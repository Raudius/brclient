/**
 * Baserow API spec
 * For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).
 *
 * The version of the OpenAPI document: 1.26.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AIFieldCreateField
 */
export interface AIFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof AIFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof AIFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof AIFieldCreateField
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AIFieldCreateField
     */
    'ai_generative_ai_type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AIFieldCreateField
     */
    'ai_generative_ai_model'?: string | null;
    /**
     * The prompt that must run for each row. Must be an formula.
     * @type {string}
     * @memberof AIFieldCreateField
     */
    'ai_prompt'?: string;
    /**
     * File field that will be used as a knowledge base for the AI model.
     * @type {number}
     * @memberof AIFieldCreateField
     */
    'ai_file_field_id'?: number | null;
}
/**
 *
 * @export
 * @interface AIFieldField
 */
export interface AIFieldField {
    /**
     *
     * @type {number}
     * @memberof AIFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof AIFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof AIFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof AIFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof AIFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof AIFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof AIFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof AIFieldField
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AIFieldField
     */
    'ai_generative_ai_type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AIFieldField
     */
    'ai_generative_ai_model'?: string | null;
    /**
     * The prompt that must run for each row. Must be an formula.
     * @type {string}
     * @memberof AIFieldField
     */
    'ai_prompt'?: string;
    /**
     * File field that will be used as a knowledge base for the AI model.
     * @type {number}
     * @memberof AIFieldField
     */
    'ai_file_field_id'?: number | null;
}
/**
 *
 * @export
 * @interface AIFieldFieldSerializerWithRelatedFields
 */
export interface AIFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     *
     * @type {string}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'ai_generative_ai_type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'ai_generative_ai_model'?: string | null;
    /**
     * The prompt that must run for each row. Must be an formula.
     * @type {string}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'ai_prompt'?: string;
    /**
     * File field that will be used as a knowledge base for the AI model.
     * @type {number}
     * @memberof AIFieldFieldSerializerWithRelatedFields
     */
    'ai_file_field_id'?: number | null;
}
/**
 *
 * @export
 * @interface AIFieldUpdateField
 */
export interface AIFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof AIFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof AIFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof AIFieldUpdateField
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AIFieldUpdateField
     */
    'ai_generative_ai_type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AIFieldUpdateField
     */
    'ai_generative_ai_model'?: string | null;
    /**
     * The prompt that must run for each row. Must be an formula.
     * @type {string}
     * @memberof AIFieldUpdateField
     */
    'ai_prompt'?: string;
    /**
     * File field that will be used as a knowledge base for the AI model.
     * @type {number}
     * @memberof AIFieldUpdateField
     */
    'ai_file_field_id'?: number | null;
}
/**
 *
 * @export
 * @interface AcceptGroupInvitation400Response
 */
export interface AcceptGroupInvitation400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AcceptGroupInvitation400Response
     */
    'error'?: AcceptGroupInvitation400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AcceptGroupInvitation400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AcceptGroupInvitation400ResponseErrorEnum: {
    readonly ErrorGroupInvitationEmailMismatch: "ERROR_GROUP_INVITATION_EMAIL_MISMATCH";
};
export type AcceptGroupInvitation400ResponseErrorEnum = typeof AcceptGroupInvitation400ResponseErrorEnum[keyof typeof AcceptGroupInvitation400ResponseErrorEnum];
/**
 * This serializer must be kept in sync with `UserSerializer`.
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'first_name'?: string;
    /**
     * An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @type {string}
     * @memberof Account
     */
    'language'?: string;
    /**
     * The maximum frequency at which the user wants to receive email notifications.  * `instant` - instant * `daily` - daily * `weekly` - weekly * `never` - never
     * @type {EmailNotificationFrequencyEnum}
     * @memberof Account
     */
    'email_notification_frequency'?: EmailNotificationFrequencyEnum;
    /**
     * Indicates whether the user has completed the onboarding.
     * @type {boolean}
     * @memberof Account
     */
    'completed_onboarding'?: boolean;
}
/**
 * Mixin to a DRF serializer class to raise an exception if data with unknown fields is provided to the serializer.
 * @export
 * @interface ActionScopes
 */
export interface ActionScopes {
    /**
     * If set to true then actions registered in the root scope will be included when undoing or redoing.
     * @type {boolean}
     * @memberof ActionScopes
     */
    'root'?: boolean | null;
    /**
     * If set to a workspaces id then any actions directly related to that workspace will be be included when undoing or redoing.
     * @type {number}
     * @memberof ActionScopes
     */
    'workspace'?: number | null;
    /**
     * If set to a workspaces id then any actions directly related to that workspace will be be included when undoing or redoing.
     * @type {number}
     * @memberof ActionScopes
     */
    'group'?: number | null;
    /**
     * If set to an applications id then any actions directly related to that application will be be included when undoing or redoing.
     * @type {number}
     * @memberof ActionScopes
     */
    'application'?: number | null;
    /**
     * If set to a table id then any actions directly related to that table will be be included when undoing or redoing.
     * @type {number}
     * @memberof ActionScopes
     */
    'table'?: number | null;
    /**
     * If set to an view id then any actions directly related to that view will be be included when undoing or redoing.
     * @type {number}
     * @memberof ActionScopes
     */
    'view'?: number | null;
    /**
     * If set to a workspace id then any actions directly related to that workspace will be be included when undoing or redoing.
     * @type {number}
     * @memberof ActionScopes
     */
    'teams_in_workspace'?: number | null;
}
/**
 *
 * @export
 * @interface AdminAddUserToLicense400Response
 */
export interface AdminAddUserToLicense400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AdminAddUserToLicense400Response
     */
    'error'?: AdminAddUserToLicense400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AdminAddUserToLicense400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AdminAddUserToLicense400ResponseErrorEnum: {
    readonly UserAlreadyOnLicense: "ERROR_USER_ALREADY_ON_LICENSE";
    readonly NoSeatsLeftInLicense: "ERROR_NO_SEATS_LEFT_IN_LICENSE";
    readonly CantManuallyChangeSeats: "ERROR_CANT_MANUALLY_CHANGE_SEATS";
};
export type AdminAddUserToLicense400ResponseErrorEnum = typeof AdminAddUserToLicense400ResponseErrorEnum[keyof typeof AdminAddUserToLicense400ResponseErrorEnum];
/**
 *
 * @export
 * @interface AdminAddUserToLicense404Response
 */
export interface AdminAddUserToLicense404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AdminAddUserToLicense404Response
     */
    'error'?: AdminAddUserToLicense404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AdminAddUserToLicense404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AdminAddUserToLicense404ResponseErrorEnum: {
    readonly LicenseDoesNotExist: "ERROR_LICENSE_DOES_NOT_EXIST";
    readonly UserNotFound: "ERROR_USER_NOT_FOUND";
};
export type AdminAddUserToLicense404ResponseErrorEnum = typeof AdminAddUserToLicense404ResponseErrorEnum[keyof typeof AdminAddUserToLicense404ResponseErrorEnum];
/**
 *
 * @export
 * @interface AdminCreateUser400Response
 */
export interface AdminCreateUser400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AdminCreateUser400Response
     */
    'error'?: AdminCreateUser400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AdminCreateUser400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AdminCreateUser400ResponseErrorEnum: {
    readonly ErrorRequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly ErrorFeatureNotAvailable: "ERROR_FEATURE_NOT_AVAILABLE";
    readonly UserAdminAlreadyExists: "USER_ADMIN_ALREADY_EXISTS";
};
export type AdminCreateUser400ResponseErrorEnum = typeof AdminCreateUser400ResponseErrorEnum[keyof typeof AdminCreateUser400ResponseErrorEnum];
/**
 *
 * @export
 * @interface AdminDashboard
 */
export interface AdminDashboard {
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'total_users': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'total_groups': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'total_workspaces': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'total_applications': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'new_users_last_24_hours': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'new_users_last_7_days': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'new_users_last_30_days': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'previous_new_users_last_24_hours': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'previous_new_users_last_7_days': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'previous_new_users_last_30_days': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'active_users_last_24_hours': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'active_users_last_7_days': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'active_users_last_30_days': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'previous_active_users_last_24_hours': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'previous_active_users_last_7_days': number;
    /**
     *
     * @type {number}
     * @memberof AdminDashboard
     */
    'previous_active_users_last_30_days': number;
    /**
     *
     * @type {Array<AdminDashboardPerDay>}
     * @memberof AdminDashboard
     */
    'new_users_per_day': Array<AdminDashboardPerDay>;
    /**
     *
     * @type {Array<AdminDashboardPerDay>}
     * @memberof AdminDashboard
     */
    'active_users_per_day': Array<AdminDashboardPerDay>;
}
/**
 *
 * @export
 * @interface AdminDashboardPerDay
 */
export interface AdminDashboardPerDay {
    /**
     *
     * @type {string}
     * @memberof AdminDashboardPerDay
     */
    'date': string;
    /**
     *
     * @type {number}
     * @memberof AdminDashboardPerDay
     */
    'count': number;
}
/**
 *
 * @export
 * @interface AdminDeleteGroup400Response
 */
export interface AdminDeleteGroup400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AdminDeleteGroup400Response
     */
    'error'?: AdminDeleteGroup400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AdminDeleteGroup400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AdminDeleteGroup400ResponseErrorEnum: {
    readonly GroupDoesNotExist: "ERROR_GROUP_DOES_NOT_EXIST";
    readonly FeatureNotAvailable: "ERROR_FEATURE_NOT_AVAILABLE";
};
export type AdminDeleteGroup400ResponseErrorEnum = typeof AdminDeleteGroup400ResponseErrorEnum[keyof typeof AdminDeleteGroup400ResponseErrorEnum];
/**
 *
 * @export
 * @interface AdminDeleteUser400Response
 */
export interface AdminDeleteUser400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AdminDeleteUser400Response
     */
    'error'?: AdminDeleteUser400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AdminDeleteUser400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AdminDeleteUser400ResponseErrorEnum: {
    readonly UserAdminCannotDeleteSelf: "USER_ADMIN_CANNOT_DELETE_SELF";
    readonly UserAdminUnknownUser: "USER_ADMIN_UNKNOWN_USER";
    readonly ErrorFeatureNotAvailable: "ERROR_FEATURE_NOT_AVAILABLE";
};
export type AdminDeleteUser400ResponseErrorEnum = typeof AdminDeleteUser400ResponseErrorEnum[keyof typeof AdminDeleteUser400ResponseErrorEnum];
/**
 *
 * @export
 * @interface AdminEditUser400Response
 */
export interface AdminEditUser400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AdminEditUser400Response
     */
    'error'?: AdminEditUser400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AdminEditUser400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AdminEditUser400ResponseErrorEnum: {
    readonly ErrorRequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly UserAdminCannotDeactivateSelf: "USER_ADMIN_CANNOT_DEACTIVATE_SELF";
    readonly UserAdminUnknownUser: "USER_ADMIN_UNKNOWN_USER";
    readonly UserAdminAlreadyExists: "USER_ADMIN_ALREADY_EXISTS";
    readonly ErrorFeatureNotAvailable: "ERROR_FEATURE_NOT_AVAILABLE";
};
export type AdminEditUser400ResponseErrorEnum = typeof AdminEditUser400ResponseErrorEnum[keyof typeof AdminEditUser400ResponseErrorEnum];
/**
 *
 * @export
 * @interface AdminGetLicense404Response
 */
export interface AdminGetLicense404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AdminGetLicense404Response
     */
    'error'?: AdminGetLicense404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AdminGetLicense404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AdminGetLicense404ResponseErrorEnum: {
    readonly ErrorLicenseDoesNotExist: "ERROR_LICENSE_DOES_NOT_EXIST";
};
export type AdminGetLicense404ResponseErrorEnum = typeof AdminGetLicense404ResponseErrorEnum[keyof typeof AdminGetLicense404ResponseErrorEnum];
/**
 *
 * @export
 * @interface AdminImpersonateUser200Response
 */
export interface AdminImpersonateUser200Response {
    /**
     *
     * @type {AdminImpersonateUser200ResponseUser}
     * @memberof AdminImpersonateUser200Response
     */
    'user'?: AdminImpersonateUser200ResponseUser;
    /**
     * Deprecated. Use the `access_token` instead.
     * @type {string}
     * @memberof AdminImpersonateUser200Response
     * @deprecated
     */
    'token'?: string;
    /**
     * \'access_token\' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
     * @type {string}
     * @memberof AdminImpersonateUser200Response
     */
    'access_token'?: string;
}
/**
 * An object containing information related to the user.
 * @export
 * @interface AdminImpersonateUser200ResponseUser
 */
export interface AdminImpersonateUser200ResponseUser {
    /**
     * The first name of related user.
     * @type {string}
     * @memberof AdminImpersonateUser200ResponseUser
     */
    'first_name'?: string;
    /**
     * The username of the related user. This is always an email address.
     * @type {string}
     * @memberof AdminImpersonateUser200ResponseUser
     */
    'username'?: string;
    /**
     * An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @type {string}
     * @memberof AdminImpersonateUser200ResponseUser
     */
    'language'?: string;
}
/**
 *
 * @export
 * @interface AdminRegisterLicense400Response
 */
export interface AdminRegisterLicense400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AdminRegisterLicense400Response
     */
    'error'?: AdminRegisterLicense400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AdminRegisterLicense400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AdminRegisterLicense400ResponseErrorEnum: {
    readonly InvalidLicense: "ERROR_INVALID_LICENSE";
    readonly UnsupportedLicense: "ERROR_UNSUPPORTED_LICENSE";
    readonly PremiumLicenseInstanceIdMismatch: "ERROR_PREMIUM_LICENSE_INSTANCE_ID_MISMATCH";
    readonly LicenseHasExpired: "ERROR_LICENSE_HAS_EXPIRED";
    readonly LicenseAlreadyExists: "ERROR_LICENSE_ALREADY_EXISTS";
};
export type AdminRegisterLicense400ResponseErrorEnum = typeof AdminRegisterLicense400ResponseErrorEnum[keyof typeof AdminRegisterLicense400ResponseErrorEnum];
/**
 *
 * @export
 * @interface AdminRemoveUserFromLicense400Response
 */
export interface AdminRemoveUserFromLicense400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AdminRemoveUserFromLicense400Response
     */
    'error'?: AdminRemoveUserFromLicense400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AdminRemoveUserFromLicense400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AdminRemoveUserFromLicense400ResponseErrorEnum: {
    readonly ErrorCantManuallyChangeSeats: "ERROR_CANT_MANUALLY_CHANGE_SEATS";
};
export type AdminRemoveUserFromLicense400ResponseErrorEnum = typeof AdminRemoveUserFromLicense400ResponseErrorEnum[keyof typeof AdminRemoveUserFromLicense400ResponseErrorEnum];
/**
 * * `empty_count` - empty_count * `not_empty_count` - not_empty_count * `unique_count` - unique_count * `min` - min * `max` - max * `sum` - sum * `average` - average * `median` - median * `decile` - decile * `variance` - variance * `std_dev` - std_dev
 * @export
 * @enum {string}
 */
export declare const AggregationRawTypeEnum: {
    readonly EmptyCount: "empty_count";
    readonly NotEmptyCount: "not_empty_count";
    readonly UniqueCount: "unique_count";
    readonly Min: "min";
    readonly Max: "max";
    readonly Sum: "sum";
    readonly Average: "average";
    readonly Median: "median";
    readonly Decile: "decile";
    readonly Variance: "variance";
    readonly StdDev: "std_dev";
};
export type AggregationRawTypeEnum = typeof AggregationRawTypeEnum[keyof typeof AggregationRawTypeEnum];
/**
 *
 * @export
 * @interface AirtableImportJobCreateJob
 */
export interface AirtableImportJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof AirtableImportJobCreateJob
     */
    'type': Type8b6Enum;
    /**
     * The group ID where the Airtable base must be imported into.
     * @type {number}
     * @memberof AirtableImportJobCreateJob
     */
    'group_id'?: number;
    /**
     * The workspace ID where the Airtable base must be imported into.
     * @type {number}
     * @memberof AirtableImportJobCreateJob
     */
    'workspace_id'?: number;
    /**
     * The publicly shared URL of the Airtable base (e.g. https://airtable.com/shrxxxxxxxxxxxxxx)
     * @type {string}
     * @memberof AirtableImportJobCreateJob
     */
    'airtable_share_url': string;
}
/**
 *
 * @export
 * @interface AirtableImportJobJob
 */
export interface AirtableImportJobJob {
    /**
     *
     * @type {number}
     * @memberof AirtableImportJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof AirtableImportJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof AirtableImportJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof AirtableImportJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof AirtableImportJobJob
     */
    'human_readable_error'?: string;
    /**
     * The group ID where the Airtable base must be imported into.
     * @type {number}
     * @memberof AirtableImportJobJob
     */
    'group_id': number;
    /**
     * The workspace ID where the Airtable base must be imported into.
     * @type {number}
     * @memberof AirtableImportJobJob
     */
    'workspace_id': number;
    /**
     *
     * @type {ApplicationApplication}
     * @memberof AirtableImportJobJob
     */
    'database': ApplicationApplication;
    /**
     * Public ID of the shared Airtable base that must be imported.
     * @type {string}
     * @memberof AirtableImportJobJob
     */
    'airtable_share_id': string;
}
/**
 * * `top` - Top * `center` - Center * `bottom` - Bottom
 * @export
 * @enum {string}
 */
export declare const AlignmentEnum: {
    readonly Top: "top";
    readonly Center: "center";
    readonly Bottom: "bottom";
};
export type AlignmentEnum = typeof AlignmentEnum[keyof typeof AlignmentEnum];
/**
 * @type AppAuthProviderAppAuthProvider
 * @export
 */
export type AppAuthProviderAppAuthProvider = {
    type: 'local_baserow_password';
} & LocalBaserowPasswordAppAuthProviderAppAuthProvider;
/**
 * @type AppAuthProviderBaseAppAuthProvider
 * @export
 */
export type AppAuthProviderBaseAppAuthProvider = {
    type: 'local_baserow_password';
} & LocalBaserowPasswordAppAuthProviderBaseAppAuthProvider;
/**
 * @type ApplicationApplication
 * @export
 */
export type ApplicationApplication = {
    type: 'builder';
} & BuilderApplication | {
    type: 'database';
} & DatabaseApplication;
/**
 * @type ApplicationBaseApplicationCreatePolymorphic
 * @export
 */
export type ApplicationBaseApplicationCreatePolymorphic = {
    type: 'builder';
} & BuilderBaseApplicationCreatePolymorphic | {
    type: 'database';
} & DatabaseBaseApplicationCreatePolymorphic;
/**
 * * `invalid` - invalid * `text` - text * `char` - char * `button` - button * `link` - link * `date_interval` - date_interval * `duration` - duration * `date` - date * `boolean` - boolean * `number` - number * `single_select` - single_select * `multiple_select` - multiple_select * `single_file` - single_file * `url` - url
 * @export
 * @enum {string}
 */
export declare const ArrayFormulaTypeEnum: {
    readonly Invalid: "invalid";
    readonly Text: "text";
    readonly Char: "char";
    readonly Button: "button";
    readonly Link: "link";
    readonly DateInterval: "date_interval";
    readonly Duration: "duration";
    readonly Date: "date";
    readonly Boolean: "boolean";
    readonly Number: "number";
    readonly SingleSelect: "single_select";
    readonly MultipleSelect: "multiple_select";
    readonly SingleFile: "single_file";
    readonly Url: "url";
};
export type ArrayFormulaTypeEnum = typeof ArrayFormulaTypeEnum[keyof typeof ArrayFormulaTypeEnum];
/**
 *
 * @export
 * @interface AsyncAuditLogExport400Response
 */
export interface AsyncAuditLogExport400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AsyncAuditLogExport400Response
     */
    'error'?: AsyncAuditLogExport400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AsyncAuditLogExport400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AsyncAuditLogExport400ResponseErrorEnum: {
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly MaxJobCountExceeded: "ERROR_MAX_JOB_COUNT_EXCEEDED";
};
export type AsyncAuditLogExport400ResponseErrorEnum = typeof AsyncAuditLogExport400ResponseErrorEnum[keyof typeof AsyncAuditLogExport400ResponseErrorEnum];
/**
 *
 * @export
 * @interface AsyncAuditLogExport404Response
 */
export interface AsyncAuditLogExport404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AsyncAuditLogExport404Response
     */
    'error'?: AsyncAuditLogExport404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AsyncAuditLogExport404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AsyncAuditLogExport404ResponseErrorEnum: {
    readonly ErrorGroupDoesNotExist: "ERROR_GROUP_DOES_NOT_EXIST";
};
export type AsyncAuditLogExport404ResponseErrorEnum = typeof AsyncAuditLogExport404ResponseErrorEnum[keyof typeof AsyncAuditLogExport404ResponseErrorEnum];
/**
 *
 * @export
 * @interface AuditLog
 */
export interface AuditLog {
    /**
     *
     * @type {number}
     * @memberof AuditLog
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'action_type': string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'user': string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'group': string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'workspace': string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'timestamp': string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'ip_address': string | null;
}
/**
 *
 * @export
 * @interface AuditLogActionType
 */
export interface AuditLogActionType {
    /**
     *
     * @type {IdEnum}
     * @memberof AuditLogActionType
     */
    'id': IdEnum;
    /**
     * Given the *incoming* primitive data, return the value for this field that should be validated and transformed to a native value.
     * @type {string}
     * @memberof AuditLogActionType
     */
    'value': string;
}
/**
 * When mixed in to a model serializer for an ExportJob this will add an url field with the actual usable url of the export job\'s file (if it has one).
 * @export
 * @interface AuditLogExportJobCreateJob
 */
export interface AuditLogExportJobCreateJob {
    /**
     *
     * @type {string}
     * @memberof AuditLogExportJobCreateJob
     */
    'url': string;
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof AuditLogExportJobCreateJob
     */
    'type': Type8b6Enum;
    /**
     * The character set to use when creating the export file.  * `utf-8` - utf-8 * `iso-8859-6` - iso-8859-6 * `windows-1256` - windows-1256 * `iso-8859-4` - iso-8859-4 * `windows-1257` - windows-1257 * `iso-8859-14` - iso-8859-14 * `iso-8859-2` - iso-8859-2 * `windows-1250` - windows-1250 * `gbk` - gbk * `gb18030` - gb18030 * `big5` - big5 * `koi8-r` - koi8-r * `koi8-u` - koi8-u * `iso-8859-5` - iso-8859-5 * `windows-1251` - windows-1251 * `x-mac-cyrillic` - mac-cyrillic * `iso-8859-7` - iso-8859-7 * `windows-1253` - windows-1253 * `iso-8859-8` - iso-8859-8 * `windows-1255` - windows-1255 * `euc-jp` - euc-jp * `iso-2022-jp` - iso-2022-jp * `shift-jis` - shift-jis * `euc-kr` - euc-kr * `macintosh` - macintosh * `iso-8859-10` - iso-8859-10 * `iso-8859-16` - iso-8859-16 * `windows-874` - cp874 * `windows-1254` - windows-1254 * `windows-1258` - windows-1258 * `iso-8859-1` - iso-8859-1 * `windows-1252` - windows-1252 * `iso-8859-3` - iso-8859-3
     * @type {ExportCharsetEnum}
     * @memberof AuditLogExportJobCreateJob
     */
    'export_charset'?: ExportCharsetEnum;
    /**
     * The value used to separate columns in the resulting csv file.  * `,` - , * `;` - ; * `|` - | * `tab` -   * `record_separator` -  * `unit_separator` - 
     * @type {CsvColumnSeparatorEnum}
     * @memberof AuditLogExportJobCreateJob
     */
    'csv_column_separator'?: CsvColumnSeparatorEnum;
    /**
     * Whether or not to generate a header row at the top of the csv file.
     * @type {boolean}
     * @memberof AuditLogExportJobCreateJob
     */
    'csv_first_row_header'?: boolean;
    /**
     * Optional: The user to filter the audit log by.
     * @type {number}
     * @memberof AuditLogExportJobCreateJob
     */
    'filter_user_id'?: number;
    /**
     * Optional: The workspace to filter the audit log by.
     * @type {number}
     * @memberof AuditLogExportJobCreateJob
     */
    'filter_workspace_id'?: number;
    /**
     * Optional: The action type to filter the audit log by.  * `create_group` - create_group * `delete_group` - delete_group * `update_group` - update_group * `order_groups` - order_groups * `create_application` - create_application * `update_application` - update_application * `delete_application` - delete_application * `order_applications` - order_applications * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_group_invitation` - create_group_invitation * `delete_group_invitation` - delete_group_invitation * `accept_group_invitation` - accept_group_invitation * `reject_group_invitation` - reject_group_invitation * `update_group_invitation_permissions` - update_group_invitation_permissions * `leave_group` - leave_group * `create_initial_workspace` - create_initial_workspace * `create_snapshot` - create_snapshot * `delete_snapshot` - delete_snapshot * `restore_snapshot` - restore_snapshot * `empty_trash` - empty_trash * `restore_from_trash` - restore_from_trash * `create_user` - create_user * `update_user` - update_user * `schedule_user_deletion` - schedule_user_deletion * `cancel_user_deletion` - cancel_user_deletion * `sign_in_user` - sign_in_user * `change_user_password` - change_user_password * `send_reset_user_password` - send_reset_user_password * `reset_user_password` - reset_user_password * `send_verify_email` - send_verify_email * `verify_email` - verify_email * `create_db_token` - create_db_token * `update_db_token_name` - update_db_token_name * `update_db_token_permissions` - update_db_token_permissions * `rotate_db_token_key` - rotate_db_token_key * `delete_db_token_key` - delete_db_token_key * `create_webhook` - create_webhook * `delete_webhook` - delete_webhook * `update_webhook` - update_webhook * `export_table` - export_table * `import_database_from_airtable` - import_database_from_airtable * `create_table` - create_table * `delete_table` - delete_table * `order_tables` - order_tables * `update_table` - update_table * `duplicate_table` - duplicate_table * `create_row` - create_row * `create_rows` - create_rows * `import_rows` - import_rows * `delete_row` - delete_row * `delete_rows` - delete_rows * `move_row` - move_row * `update_row` - update_row * `update_rows` - update_rows * `create_view` - create_view * `duplicate_view` - duplicate_view * `delete_view` - delete_view * `order_views` - order_views * `update_view` - update_view * `create_view_filter` - create_view_filter * `update_view_filter` - update_view_filter * `delete_view_filter` - delete_view_filter * `create_view_sort` - create_view_sort * `update_view_sort` - update_view_sort * `delete_view_sort` - delete_view_sort * `create_view_group` - create_view_group * `update_view_group` - update_view_group * `delete_view_group` - delete_view_group * `rotate_view_slug` - rotate_view_slug * `update_view_field_options` - update_view_field_options * `create_decoration` - create_decoration * `update_decoration` - update_decoration * `delete_decoration` - delete_decoration * `create_view_filter_group` - create_view_filter_group * `update_view_filter_group` - update_view_filter_group * `delete_view_filter_group` - delete_view_filter_group * `create_field` - create_field * `delete_field` - delete_field * `update_field` - update_field * `duplicate_field` - duplicate_field * `change_primary_field` - change_primary_field * `generate_formula_with_ai` - generate_formula_with_ai * `create_row_comment` - create_row_comment * `delete_row_comment` - delete_row_comment * `update_row_comment` - update_row_comment * `rotate_calendar_ical_view_slug` - rotate_calendar_ical_view_slug * `create_team` - create_team * `update_team` - update_team * `delete_team` - delete_team * `create_team_subject` - create_team_subject * `delete_team_subject` - delete_team_subject * `batch_assign_role` - batch_assign_role
     * @type {FilterActionTypeEnum}
     * @memberof AuditLogExportJobCreateJob
     */
    'filter_action_type'?: FilterActionTypeEnum;
    /**
     * Optional: The start date to filter the audit log by.
     * @type {string}
     * @memberof AuditLogExportJobCreateJob
     */
    'filter_from_timestamp'?: string;
    /**
     * Optional: The end date to filter the audit log by.
     * @type {string}
     * @memberof AuditLogExportJobCreateJob
     */
    'filter_to_timestamp'?: string;
    /**
     * Optional: A comma separated list of column names to exclude from the export. Available options are `user_email, user_id, workspace_name, workspace_id, type, description, timestamp, ip_address`.
     * @type {string}
     * @memberof AuditLogExportJobCreateJob
     */
    'exclude_columns'?: string;
}
/**
 * When mixed in to a model serializer for an ExportJob this will add an url field with the actual usable url of the export job\'s file (if it has one).
 * @export
 * @interface AuditLogExportJobJob
 */
export interface AuditLogExportJobJob {
    /**
     *
     * @type {number}
     * @memberof AuditLogExportJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof AuditLogExportJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof AuditLogExportJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof AuditLogExportJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof AuditLogExportJobJob
     */
    'human_readable_error'?: string;
    /**
     * The value used to separate columns in the resulting csv file.  * `,` - , * `;` - ; * `|` - | * `tab` -   * `record_separator` -  * `unit_separator` - 
     * @type {CsvColumnSeparatorEnum}
     * @memberof AuditLogExportJobJob
     */
    'csv_column_separator'?: CsvColumnSeparatorEnum;
    /**
     * Whether or not to generate a header row at the top of the csv file.
     * @type {boolean}
     * @memberof AuditLogExportJobJob
     */
    'csv_first_row_header'?: boolean;
    /**
     * The character set to use when creating the export file.  * `utf-8` - utf-8 * `iso-8859-6` - iso-8859-6 * `windows-1256` - windows-1256 * `iso-8859-4` - iso-8859-4 * `windows-1257` - windows-1257 * `iso-8859-14` - iso-8859-14 * `iso-8859-2` - iso-8859-2 * `windows-1250` - windows-1250 * `gbk` - gbk * `gb18030` - gb18030 * `big5` - big5 * `koi8-r` - koi8-r * `koi8-u` - koi8-u * `iso-8859-5` - iso-8859-5 * `windows-1251` - windows-1251 * `x-mac-cyrillic` - mac-cyrillic * `iso-8859-7` - iso-8859-7 * `windows-1253` - windows-1253 * `iso-8859-8` - iso-8859-8 * `windows-1255` - windows-1255 * `euc-jp` - euc-jp * `iso-2022-jp` - iso-2022-jp * `shift-jis` - shift-jis * `euc-kr` - euc-kr * `macintosh` - macintosh * `iso-8859-10` - iso-8859-10 * `iso-8859-16` - iso-8859-16 * `windows-874` - cp874 * `windows-1254` - windows-1254 * `windows-1258` - windows-1258 * `iso-8859-1` - iso-8859-1 * `windows-1252` - windows-1252 * `iso-8859-3` - iso-8859-3
     * @type {ExportCharsetEnum}
     * @memberof AuditLogExportJobJob
     */
    'export_charset'?: ExportCharsetEnum;
    /**
     * Optional: The user to filter the audit log by.
     * @type {number}
     * @memberof AuditLogExportJobJob
     */
    'filter_user_id'?: number;
    /**
     * Optional: The workspace to filter the audit log by.
     * @type {number}
     * @memberof AuditLogExportJobJob
     */
    'filter_workspace_id'?: number;
    /**
     * Optional: The action type to filter the audit log by.  * `create_group` - create_group * `delete_group` - delete_group * `update_group` - update_group * `order_groups` - order_groups * `create_application` - create_application * `update_application` - update_application * `delete_application` - delete_application * `order_applications` - order_applications * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_group_invitation` - create_group_invitation * `delete_group_invitation` - delete_group_invitation * `accept_group_invitation` - accept_group_invitation * `reject_group_invitation` - reject_group_invitation * `update_group_invitation_permissions` - update_group_invitation_permissions * `leave_group` - leave_group * `create_initial_workspace` - create_initial_workspace * `create_snapshot` - create_snapshot * `delete_snapshot` - delete_snapshot * `restore_snapshot` - restore_snapshot * `empty_trash` - empty_trash * `restore_from_trash` - restore_from_trash * `create_user` - create_user * `update_user` - update_user * `schedule_user_deletion` - schedule_user_deletion * `cancel_user_deletion` - cancel_user_deletion * `sign_in_user` - sign_in_user * `change_user_password` - change_user_password * `send_reset_user_password` - send_reset_user_password * `reset_user_password` - reset_user_password * `send_verify_email` - send_verify_email * `verify_email` - verify_email * `create_db_token` - create_db_token * `update_db_token_name` - update_db_token_name * `update_db_token_permissions` - update_db_token_permissions * `rotate_db_token_key` - rotate_db_token_key * `delete_db_token_key` - delete_db_token_key * `create_webhook` - create_webhook * `delete_webhook` - delete_webhook * `update_webhook` - update_webhook * `export_table` - export_table * `import_database_from_airtable` - import_database_from_airtable * `create_table` - create_table * `delete_table` - delete_table * `order_tables` - order_tables * `update_table` - update_table * `duplicate_table` - duplicate_table * `create_row` - create_row * `create_rows` - create_rows * `import_rows` - import_rows * `delete_row` - delete_row * `delete_rows` - delete_rows * `move_row` - move_row * `update_row` - update_row * `update_rows` - update_rows * `create_view` - create_view * `duplicate_view` - duplicate_view * `delete_view` - delete_view * `order_views` - order_views * `update_view` - update_view * `create_view_filter` - create_view_filter * `update_view_filter` - update_view_filter * `delete_view_filter` - delete_view_filter * `create_view_sort` - create_view_sort * `update_view_sort` - update_view_sort * `delete_view_sort` - delete_view_sort * `create_view_group` - create_view_group * `update_view_group` - update_view_group * `delete_view_group` - delete_view_group * `rotate_view_slug` - rotate_view_slug * `update_view_field_options` - update_view_field_options * `create_decoration` - create_decoration * `update_decoration` - update_decoration * `delete_decoration` - delete_decoration * `create_view_filter_group` - create_view_filter_group * `update_view_filter_group` - update_view_filter_group * `delete_view_filter_group` - delete_view_filter_group * `create_field` - create_field * `delete_field` - delete_field * `update_field` - update_field * `duplicate_field` - duplicate_field * `change_primary_field` - change_primary_field * `generate_formula_with_ai` - generate_formula_with_ai * `create_row_comment` - create_row_comment * `delete_row_comment` - delete_row_comment * `update_row_comment` - update_row_comment * `rotate_calendar_ical_view_slug` - rotate_calendar_ical_view_slug * `create_team` - create_team * `update_team` - update_team * `delete_team` - delete_team * `create_team_subject` - create_team_subject * `delete_team_subject` - delete_team_subject * `batch_assign_role` - batch_assign_role
     * @type {FilterActionTypeEnum}
     * @memberof AuditLogExportJobJob
     */
    'filter_action_type'?: FilterActionTypeEnum;
    /**
     * Optional: The start date to filter the audit log by.
     * @type {string}
     * @memberof AuditLogExportJobJob
     */
    'filter_from_timestamp'?: string;
    /**
     * Optional: The end date to filter the audit log by.
     * @type {string}
     * @memberof AuditLogExportJobJob
     */
    'filter_to_timestamp'?: string;
    /**
     * Optional: A comma separated list of column names to exclude from the export. Available options are `user_email, user_id, workspace_name, workspace_id, type, description, timestamp, ip_address`.
     * @type {string}
     * @memberof AuditLogExportJobJob
     */
    'exclude_columns'?: string;
    /**
     * The date and time when the export job was created.
     * @type {string}
     * @memberof AuditLogExportJobJob
     */
    'created_on': string;
    /**
     * The name of the file that was created by the export job.
     * @type {string}
     * @memberof AuditLogExportJobJob
     */
    'exported_file_name': string;
    /**
     * The URL to download the exported file.
     * @type {string}
     * @memberof AuditLogExportJobJob
     */
    'url': string;
}
/**
 *
 * @export
 * @interface AuditLogList400Response
 */
export interface AuditLogList400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AuditLogList400Response
     */
    'error'?: AuditLogList400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AuditLogList400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AuditLogList400ResponseErrorEnum: {
    readonly PageSizeLimit: "ERROR_PAGE_SIZE_LIMIT";
    readonly InvalidPage: "ERROR_INVALID_PAGE";
    readonly InvalidSortDirection: "ERROR_INVALID_SORT_DIRECTION";
    readonly InvalidSortAttribute: "ERROR_INVALID_SORT_ATTRIBUTE";
};
export type AuditLogList400ResponseErrorEnum = typeof AuditLogList400ResponseErrorEnum[keyof typeof AuditLogList400ResponseErrorEnum];
/**
 *
 * @export
 * @interface AuditLogUser
 */
export interface AuditLogUser {
    /**
     *
     * @type {number}
     * @memberof AuditLogUser
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof AuditLogUser
     */
    'value': string;
}
/**
 *
 * @export
 * @interface AuditLogWorkspace
 */
export interface AuditLogWorkspace {
    /**
     *
     * @type {number}
     * @memberof AuditLogWorkspace
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof AuditLogWorkspace
     */
    'value': string;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface AuthFormElementCreateElement
 */
export interface AuthFormElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof AuthFormElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof AuthFormElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof AuthFormElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof AuthFormElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonInputConfigBlock}
     * @memberof AuthFormElementCreateElement
     */
    'styles'?: ButtonInputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof AuthFormElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof AuthFormElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof AuthFormElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof AuthFormElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof AuthFormElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof AuthFormElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof AuthFormElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof AuthFormElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof AuthFormElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * Display the auth form for the selected user source
     * @type {number}
     * @memberof AuthFormElementCreateElement
     */
    'user_source_id'?: number | null;
    /**
     * The label of the login button
     * @type {string}
     * @memberof AuthFormElementCreateElement
     */
    'login_button_label'?: string;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface AuthFormElementElement
 */
export interface AuthFormElementElement {
    /**
     *
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof AuthFormElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof AuthFormElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof AuthFormElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof AuthFormElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonInputConfigBlock}
     * @memberof AuthFormElementElement
     */
    'styles'?: ButtonInputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof AuthFormElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof AuthFormElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof AuthFormElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof AuthFormElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof AuthFormElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof AuthFormElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof AuthFormElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof AuthFormElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof AuthFormElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof AuthFormElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof AuthFormElementElement
     */
    'roles'?: any;
    /**
     * Display the auth form for the selected user source
     * @type {number}
     * @memberof AuthFormElementElement
     */
    'user_source_id'?: number | null;
    /**
     * The label of the login button
     * @type {string}
     * @memberof AuthFormElementElement
     */
    'login_button_label'?: string;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface AuthFormElementPublicElement
 */
export interface AuthFormElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof AuthFormElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof AuthFormElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof AuthFormElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof AuthFormElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonInputConfigBlock}
     * @memberof AuthFormElementPublicElement
     */
    'styles'?: ButtonInputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof AuthFormElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof AuthFormElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof AuthFormElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof AuthFormElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof AuthFormElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof AuthFormElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof AuthFormElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof AuthFormElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof AuthFormElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof AuthFormElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof AuthFormElementPublicElement
     */
    'roles'?: any;
    /**
     * Display the auth form for the selected user source
     * @type {number}
     * @memberof AuthFormElementPublicElement
     */
    'user_source_id'?: number | null;
    /**
     * The label of the login button
     * @type {string}
     * @memberof AuthFormElementPublicElement
     */
    'login_button_label'?: string;
}
/**
 *
 * @export
 * @interface AuthFormElementUpdateElement
 */
export interface AuthFormElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof AuthFormElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonInputConfigBlock}
     * @memberof AuthFormElementUpdateElement
     */
    'styles'?: ButtonInputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof AuthFormElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof AuthFormElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof AuthFormElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof AuthFormElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof AuthFormElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof AuthFormElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof AuthFormElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof AuthFormElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof AuthFormElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof AuthFormElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof AuthFormElementUpdateElement
     */
    'roles'?: any;
    /**
     * Display the auth form for the selected user source
     * @type {number}
     * @memberof AuthFormElementUpdateElement
     */
    'user_source_id'?: number | null;
    /**
     * The label of the login button
     * @type {string}
     * @memberof AuthFormElementUpdateElement
     */
    'login_button_label'?: string;
}
/**
 *
 * @export
 * @interface AuthProviderLoginUrl400Response
 */
export interface AuthProviderLoginUrl400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof AuthProviderLoginUrl400Response
     */
    'error'?: AuthProviderLoginUrl400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof AuthProviderLoginUrl400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const AuthProviderLoginUrl400ResponseErrorEnum: {
    readonly ErrorSamlInvalidLoginRequest: "ERROR_SAML_INVALID_LOGIN_REQUEST";
};
export type AuthProviderLoginUrl400ResponseErrorEnum = typeof AuthProviderLoginUrl400ResponseErrorEnum[keyof typeof AuthProviderLoginUrl400ResponseErrorEnum];
/**
 * @type AuthenticationProviderAuthProvider
 * @export
 */
export type AuthenticationProviderAuthProvider = {
    type: 'facebook';
} & FacebookAuthProviderModelAuthProvider | {
    type: 'github';
} & GitHubAuthProviderModelAuthProvider | {
    type: 'gitlab';
} & GitLabAuthProviderModelAuthProvider | {
    type: 'google';
} & GoogleAuthProviderModelAuthProvider | {
    type: 'openid_connect';
} & OpenIdConnectAuthProviderModelAuthProvider | {
    type: 'password';
} & PasswordAuthProviderModelAuthProvider | {
    type: 'saml';
} & SamlAuthProviderModelAuthProvider;
/**
 *
 * @export
 * @interface AutonumberFieldCreateField
 */
export interface AutonumberFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof AutonumberFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof AutonumberFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof AutonumberFieldCreateField
     */
    'description'?: string | null;
    /**
     * The id of the view to use for the initial ordering.
     * @type {number}
     * @memberof AutonumberFieldCreateField
     */
    'view_id'?: number | null;
}
/**
 *
 * @export
 * @interface AutonumberFieldField
 */
export interface AutonumberFieldField {
    /**
     *
     * @type {number}
     * @memberof AutonumberFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof AutonumberFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof AutonumberFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof AutonumberFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof AutonumberFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof AutonumberFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof AutonumberFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof AutonumberFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface AutonumberFieldFieldSerializerWithRelatedFields
 */
export interface AutonumberFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof AutonumberFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof AutonumberFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof AutonumberFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof AutonumberFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof AutonumberFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof AutonumberFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof AutonumberFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof AutonumberFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof AutonumberFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface AutonumberFieldUpdateField
 */
export interface AutonumberFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof AutonumberFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof AutonumberFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof AutonumberFieldUpdateField
     */
    'description'?: string | null;
    /**
     * The id of the view to use for the initial ordering.
     * @type {number}
     * @memberof AutonumberFieldUpdateField
     */
    'view_id'?: number | null;
}
/**
 *
 * @export
 * @interface BaseExporterOptions
 */
export interface BaseExporterOptions {
    /**
     * Optional: The view for this table to export using its filters, sorts and other view specific settings.
     * @type {number}
     * @memberof BaseExporterOptions
     */
    'view_id'?: number | null;
    /**
     * The file type to export to.  * `csv` - csv * `json` - json * `xml` - xml
     * @type {ExporterTypeEnum}
     * @memberof BaseExporterOptions
     */
    'exporter_type': ExporterTypeEnum;
    /**
     * The character set to use when creating the export file.  * `utf-8` - utf-8 * `iso-8859-6` - iso-8859-6 * `windows-1256` - windows-1256 * `iso-8859-4` - iso-8859-4 * `windows-1257` - windows-1257 * `iso-8859-14` - iso-8859-14 * `iso-8859-2` - iso-8859-2 * `windows-1250` - windows-1250 * `gbk` - gbk * `gb18030` - gb18030 * `big5` - big5 * `koi8-r` - koi8-r * `koi8-u` - koi8-u * `iso-8859-5` - iso-8859-5 * `windows-1251` - windows-1251 * `x-mac-cyrillic` - mac-cyrillic * `iso-8859-7` - iso-8859-7 * `windows-1253` - windows-1253 * `iso-8859-8` - iso-8859-8 * `windows-1255` - windows-1255 * `euc-jp` - euc-jp * `iso-2022-jp` - iso-2022-jp * `shift-jis` - shift-jis * `euc-kr` - euc-kr * `macintosh` - macintosh * `iso-8859-10` - iso-8859-10 * `iso-8859-16` - iso-8859-16 * `windows-874` - cp874 * `windows-1254` - windows-1254 * `windows-1258` - windows-1258 * `iso-8859-1` - iso-8859-1 * `windows-1252` - windows-1252 * `iso-8859-3` - iso-8859-3
     * @type {ExportCharsetEnum}
     * @memberof BaseExporterOptions
     */
    'export_charset'?: ExportCharsetEnum;
}
/**
 * Serializer used for impersonation.
 * @export
 * @interface BaserowImpersonateAuthToken
 */
export interface BaserowImpersonateAuthToken {
    /**
     *
     * @type {number}
     * @memberof BaserowImpersonateAuthToken
     */
    'user': number;
}
/**
 *
 * @export
 * @interface BatchCreateDatabaseTableRows400Response
 */
export interface BatchCreateDatabaseTableRows400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof BatchCreateDatabaseTableRows400Response
     */
    'error'?: BatchCreateDatabaseTableRows400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof BatchCreateDatabaseTableRows400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const BatchCreateDatabaseTableRows400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly RowIdsNotUnique: "ERROR_ROW_IDS_NOT_UNIQUE";
    readonly RequestBodyValidation2: "ERROR_REQUEST_BODY_VALIDATION";
};
export type BatchCreateDatabaseTableRows400ResponseErrorEnum = typeof BatchCreateDatabaseTableRows400ResponseErrorEnum[keyof typeof BatchCreateDatabaseTableRows400ResponseErrorEnum];
/**
 *
 * @export
 * @interface BatchCreateRoleAssignment
 */
export interface BatchCreateRoleAssignment {
    /**
     *
     * @type {Array<CreateRoleAssignment>}
     * @memberof BatchCreateRoleAssignment
     */
    'items': Array<CreateRoleAssignment>;
}
/**
 *
 * @export
 * @interface BatchDeleteDatabaseTableRows400Response
 */
export interface BatchDeleteDatabaseTableRows400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof BatchDeleteDatabaseTableRows400Response
     */
    'error'?: BatchDeleteDatabaseTableRows400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof BatchDeleteDatabaseTableRows400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const BatchDeleteDatabaseTableRows400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly CannotDeleteAlreadyDeletedItem: "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
    readonly RowIdsNotUnique: "ERROR_ROW_IDS_NOT_UNIQUE";
};
export type BatchDeleteDatabaseTableRows400ResponseErrorEnum = typeof BatchDeleteDatabaseTableRows400ResponseErrorEnum[keyof typeof BatchDeleteDatabaseTableRows400ResponseErrorEnum];
/**
 *
 * @export
 * @interface BatchDeleteRows
 */
export interface BatchDeleteRows {
    /**
     *
     * @type {Array<number>}
     * @memberof BatchDeleteRows
     */
    'items': Array<number>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const BlankEnum: {
    readonly Empty: "";
};
export type BlankEnum = typeof BlankEnum[keyof typeof BlankEnum];
/**
 *
 * @export
 * @interface BooleanFieldCreateField
 */
export interface BooleanFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof BooleanFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof BooleanFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof BooleanFieldCreateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface BooleanFieldField
 */
export interface BooleanFieldField {
    /**
     *
     * @type {number}
     * @memberof BooleanFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof BooleanFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof BooleanFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof BooleanFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof BooleanFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof BooleanFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof BooleanFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof BooleanFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface BooleanFieldFieldSerializerWithRelatedFields
 */
export interface BooleanFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof BooleanFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof BooleanFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof BooleanFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof BooleanFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof BooleanFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof BooleanFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof BooleanFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof BooleanFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof BooleanFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface BooleanFieldUpdateField
 */
export interface BooleanFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof BooleanFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof BooleanFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof BooleanFieldUpdateField
     */
    'description'?: string | null;
}
/**
 * The builder serializer.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicBuilderSerializer when you update this one.
 * @export
 * @interface BuilderApplication
 */
export interface BuilderApplication {
    /**
     *
     * @type {number}
     * @memberof BuilderApplication
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof BuilderApplication
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof BuilderApplication
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof BuilderApplication
     */
    'type': string;
    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     * @type {Workspace}
     * @memberof BuilderApplication
     */
    'group': Workspace;
    /**
     * The workspace that the application belongs to.
     * @type {Workspace}
     * @memberof BuilderApplication
     */
    'workspace': Workspace;
    /**
     *
     * @type {string}
     * @memberof BuilderApplication
     */
    'created_on': string;
    /**
     * This field is specific to the `builder` application and contains an array of pages that are in the builder.
     * @type {Array<Page>}
     * @memberof BuilderApplication
     */
    'pages': Array<Page>;
    /**
     * This field is specific to the `builder` application and contains the theme settings.
     * @type {CombinedThemeConfigBlocks}
     * @memberof BuilderApplication
     */
    'theme': CombinedThemeConfigBlocks;
    /**
     * The favicon image file
     * @type {UserFile}
     * @memberof BuilderApplication
     */
    'favicon_file'?: UserFile | null;
}
/**
 * The builder serializer.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicBuilderSerializer when you update this one.
 * @export
 * @interface BuilderBaseApplicationCreatePolymorphic
 */
export interface BuilderBaseApplicationCreatePolymorphic {
    /**
     *
     * @type {string}
     * @memberof BuilderBaseApplicationCreatePolymorphic
     */
    'name': string;
    /**
     *
     * @type {Type8b0Enum}
     * @memberof BuilderBaseApplicationCreatePolymorphic
     */
    'type': Type8b0Enum;
    /**
     *
     * @type {boolean}
     * @memberof BuilderBaseApplicationCreatePolymorphic
     */
    'init_with_data'?: boolean;
    /**
     * The favicon image file
     * @type {UserFile}
     * @memberof BuilderBaseApplicationCreatePolymorphic
     */
    'favicon_file'?: UserFile | null;
}
/**
 * The builder serializer.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicBuilderSerializer when you update this one.
 * @export
 * @interface BuilderBaseApplicationUpdatePolymorphic
 */
export interface BuilderBaseApplicationUpdatePolymorphic {
    /**
     *
     * @type {string}
     * @memberof BuilderBaseApplicationUpdatePolymorphic
     */
    'name': string;
    /**
     * The favicon image file
     * @type {UserFile}
     * @memberof BuilderBaseApplicationUpdatePolymorphic
     */
    'favicon_file'?: UserFile | null;
}
/**
 * Basic builder workflow action serializer
 * @export
 * @interface BuilderWorkflowAction
 */
export interface BuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof BuilderWorkflowAction
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof BuilderWorkflowAction
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof BuilderWorkflowAction
     */
    'element_id': number | null;
    /**
     * The type of the workflow action
     * @type {string}
     * @memberof BuilderWorkflowAction
     */
    'type': string;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof BuilderWorkflowAction
     */
    'event': string;
}
/**
 * @type BuilderWorkflowActionTypeBuilderWorkflowAction
 * @export
 */
export type BuilderWorkflowActionTypeBuilderWorkflowAction = {
    type: 'create_row';
} & LocalBaserowCreateRowWorkflowActionBuilderWorkflowAction | {
    type: 'delete_row';
} & LocalBaserowDeleteRowWorkflowActionBuilderWorkflowAction | {
    type: 'logout';
} & LogoutWorkflowActionBuilderWorkflowAction | {
    type: 'notification';
} & NotificationWorkflowActionBuilderWorkflowAction | {
    type: 'open_page';
} & OpenPageWorkflowActionBuilderWorkflowAction | {
    type: 'refresh_data_source';
} & RefreshDataSourceWorkflowActionBuilderWorkflowAction | {
    type: 'update_row';
} & LocalBaserowUpdateRowWorkflowActionBuilderWorkflowAction;
/**
 * @type BuilderWorkflowActionTypeCreateBuilderWorkflowAction
 * @export
 */
export type BuilderWorkflowActionTypeCreateBuilderWorkflowAction = {
    type: 'create_row';
} & LocalBaserowCreateRowWorkflowActionCreateBuilderWorkflowAction | {
    type: 'delete_row';
} & LocalBaserowDeleteRowWorkflowActionCreateBuilderWorkflowAction | {
    type: 'logout';
} & LogoutWorkflowActionCreateBuilderWorkflowAction | {
    type: 'notification';
} & NotificationWorkflowActionCreateBuilderWorkflowAction | {
    type: 'open_page';
} & OpenPageWorkflowActionCreateBuilderWorkflowAction | {
    type: 'refresh_data_source';
} & RefreshDataSourceWorkflowActionCreateBuilderWorkflowAction | {
    type: 'update_row';
} & LocalBaserowUpdateRowWorkflowActionCreateBuilderWorkflowAction;
/**
 * Style overrides for this element.
 * @export
 * @interface ButtonConfigBlock
 */
export interface ButtonConfigBlock {
    /**
     * Styles overrides for button
     * @type {ButtonThemeConfigBlock}
     * @memberof ButtonConfigBlock
     */
    'button'?: ButtonThemeConfigBlock;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface ButtonElementCreateElement
 */
export interface ButtonElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof ButtonElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof ButtonElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ButtonElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ButtonElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof ButtonElementCreateElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ButtonElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ButtonElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ButtonElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ButtonElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ButtonElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ButtonElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ButtonElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ButtonElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ButtonElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ButtonElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The caption of the button.
     * @type {string}
     * @memberof ButtonElementCreateElement
     */
    'value'?: string;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface ButtonElementElement
 */
export interface ButtonElementElement {
    /**
     *
     * @type {number}
     * @memberof ButtonElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof ButtonElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof ButtonElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof ButtonElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ButtonElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ButtonElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof ButtonElementElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ButtonElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ButtonElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ButtonElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ButtonElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ButtonElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ButtonElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ButtonElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ButtonElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ButtonElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ButtonElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ButtonElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ButtonElementElement
     */
    'roles'?: any;
    /**
     * The caption of the button.
     * @type {string}
     * @memberof ButtonElementElement
     */
    'value'?: string;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface ButtonElementPublicElement
 */
export interface ButtonElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof ButtonElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof ButtonElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ButtonElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ButtonElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof ButtonElementPublicElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ButtonElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ButtonElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ButtonElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ButtonElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ButtonElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ButtonElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ButtonElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ButtonElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ButtonElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ButtonElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ButtonElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ButtonElementPublicElement
     */
    'roles'?: any;
    /**
     * The caption of the button.
     * @type {string}
     * @memberof ButtonElementPublicElement
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface ButtonElementUpdateElement
 */
export interface ButtonElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ButtonElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof ButtonElementUpdateElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ButtonElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ButtonElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ButtonElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ButtonElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ButtonElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ButtonElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ButtonElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ButtonElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ButtonElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ButtonElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ButtonElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ButtonElementUpdateElement
     */
    'roles'?: any;
    /**
     * The caption of the button.
     * @type {string}
     * @memberof ButtonElementUpdateElement
     */
    'value'?: string;
}
/**
 * Style overrides for this element.
 * @export
 * @interface ButtonInputConfigBlock
 */
export interface ButtonInputConfigBlock {
    /**
     * Styles overrides for login_button
     * @type {ButtonThemeConfigBlock}
     * @memberof ButtonInputConfigBlock
     */
    'login_button'?: ButtonThemeConfigBlock;
    /**
     * Styles overrides for input
     * @type {InputThemeConfigBlock}
     * @memberof ButtonInputConfigBlock
     */
    'input'?: InputThemeConfigBlock;
}
/**
 * Style overrides for this element.
 * @export
 * @interface ButtonLinkConfigBlock
 */
export interface ButtonLinkConfigBlock {
    /**
     * Styles overrides for button
     * @type {ButtonThemeConfigBlock}
     * @memberof ButtonLinkConfigBlock
     */
    'button'?: ButtonThemeConfigBlock;
    /**
     * Styles overrides for link
     * @type {LinkThemeConfigBlock}
     * @memberof ButtonLinkConfigBlock
     */
    'link'?: LinkThemeConfigBlock;
}
/**
 * Style overrides for this element.
 * @export
 * @interface ButtonTableConfigBlock
 */
export interface ButtonTableConfigBlock {
    /**
     * Styles overrides for button
     * @type {ButtonThemeConfigBlock}
     * @memberof ButtonTableConfigBlock
     */
    'button'?: ButtonThemeConfigBlock;
    /**
     * Styles overrides for table
     * @type {TableThemeConfigBlock}
     * @memberof ButtonTableConfigBlock
     */
    'table'?: TableThemeConfigBlock;
}
/**
 *
 * @export
 * @interface ButtonThemeConfigBlock
 */
export interface ButtonThemeConfigBlock {
    /**
     *
     * @type {string}
     * @memberof ButtonThemeConfigBlock
     */
    'button_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof ButtonThemeConfigBlock
     */
    'button_font_size'?: number;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof ButtonThemeConfigBlock
     */
    'button_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof ButtonThemeConfigBlock
     */
    'button_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {ButtonWidthEnum}
     * @memberof ButtonThemeConfigBlock
     */
    'button_width'?: ButtonWidthEnum;
    /**
     * The background color of buttons
     * @type {string}
     * @memberof ButtonThemeConfigBlock
     */
    'button_background_color'?: string;
    /**
     * The text color of buttons
     * @type {string}
     * @memberof ButtonThemeConfigBlock
     */
    'button_text_color'?: string;
    /**
     * The border color of buttons
     * @type {string}
     * @memberof ButtonThemeConfigBlock
     */
    'button_border_color'?: string;
    /**
     * Button border size
     * @type {number}
     * @memberof ButtonThemeConfigBlock
     */
    'button_border_size'?: number;
    /**
     * Button border radius
     * @type {number}
     * @memberof ButtonThemeConfigBlock
     */
    'button_border_radius'?: number;
    /**
     * Button vertical padding
     * @type {number}
     * @memberof ButtonThemeConfigBlock
     */
    'button_vertical_padding'?: number;
    /**
     * Button horizontal padding
     * @type {number}
     * @memberof ButtonThemeConfigBlock
     */
    'button_horizontal_padding'?: number;
    /**
     * The background color of buttons when hovered
     * @type {string}
     * @memberof ButtonThemeConfigBlock
     */
    'button_hover_background_color'?: string;
    /**
     * The text color of buttons when hovered
     * @type {string}
     * @memberof ButtonThemeConfigBlock
     */
    'button_hover_text_color'?: string;
    /**
     * The border color of buttons when hovered
     * @type {string}
     * @memberof ButtonThemeConfigBlock
     */
    'button_hover_border_color'?: string;
}
/**
 * * `auto` - Auto * `full` - Full
 * @export
 * @enum {string}
 */
export declare const ButtonWidthEnum: {
    readonly Auto: "auto";
    readonly Full: "full";
};
export type ButtonWidthEnum = typeof ButtonWidthEnum[keyof typeof ButtonWidthEnum];
/**
 *
 * @export
 * @interface CalendarIcalFeed400Response
 */
export interface CalendarIcalFeed400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CalendarIcalFeed400Response
     */
    'error'?: CalendarIcalFeed400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CalendarIcalFeed400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CalendarIcalFeed400ResponseErrorEnum: {
    readonly ErrorCalendarViewHasNoDateField: "ERROR_CALENDAR_VIEW_HAS_NO_DATE_FIELD";
};
export type CalendarIcalFeed400ResponseErrorEnum = typeof CalendarIcalFeed400ResponseErrorEnum[keyof typeof CalendarIcalFeed400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CalendarViewCreateView
 */
export interface CalendarViewCreateView {
    /**
     *
     * @type {string}
     * @memberof CalendarViewCreateView
     */
    'name': string;
    /**
     *
     * @type {ViewTypesEnum}
     * @memberof CalendarViewCreateView
     */
    'type': ViewTypesEnum;
    /**
     *
     * @type {OwnershipTypeEnum}
     * @memberof CalendarViewCreateView
     */
    'ownership_type'?: OwnershipTypeEnum;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof CalendarViewCreateView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof CalendarViewCreateView
     */
    'filters_disabled'?: boolean;
    /**
     *
     * @type {number}
     * @memberof CalendarViewCreateView
     */
    'date_field'?: number | null;
    /**
     * Read-only field with ICal feed endpoint. Note: this url will not be active if ical_public value is set to False.
     * @type {string}
     * @memberof CalendarViewCreateView
     */
    'ical_feed_url': string;
    /**
     * A flag to show if ical feed is exposed. Set this field to True when modifying this resource to enable ICal feed url.
     * @type {boolean}
     * @memberof CalendarViewCreateView
     */
    'ical_public'?: boolean | null;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof CalendarViewCreateView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof CalendarViewCreateView
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface CalendarViewExampleResponse
 */
export interface CalendarViewExampleResponse {
    /**
     * Every date bucket (e.g. \'2023-01-01\') related to the view\'s date field can have its own entry like this.
     * @type {{ [key: string]: CalendarViewExampleResponseStack; }}
     * @memberof CalendarViewExampleResponse
     */
    'rows': {
        [key: string]: CalendarViewExampleResponseStack;
    };
    /**
     *
     * @type {Array<CalendarViewFieldOptions>}
     * @memberof CalendarViewExampleResponse
     */
    'field_options': Array<CalendarViewFieldOptions>;
    /**
     * An object keyed by row id with a value being an object containing additional metadata about that row. A row might not have metadata and will not be present as a key if so.
     * @type {{ [key: string]: RowMetadata; }}
     * @memberof CalendarViewExampleResponse
     */
    'row_metadata'?: {
        [key: string]: RowMetadata;
    };
}
/**
 *
 * @export
 * @interface CalendarViewExampleResponseStack
 */
export interface CalendarViewExampleResponseStack {
    /**
     * The total count of rows that are included in this group.
     * @type {number}
     * @memberof CalendarViewExampleResponseStack
     */
    'count': number;
    /**
     * All the rows that belong in this group and match provided `limit` and `offset`.
     * @type {Array<ExampleRowResponse>}
     * @memberof CalendarViewExampleResponseStack
     */
    'results': Array<ExampleRowResponse>;
}
/**
 *
 * @export
 * @interface CalendarViewFieldOptions
 */
export interface CalendarViewFieldOptions {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: CalendarViewFieldOptions; }}
     * @memberof CalendarViewFieldOptions
     */
    'field_options': {
        [key: string]: CalendarViewFieldOptions;
    };
}
/**
 *
 * @export
 * @interface CalendarViewUpdate
 */
export interface CalendarViewUpdate {
    /**
     *
     * @type {string}
     * @memberof CalendarViewUpdate
     */
    'name'?: string;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof CalendarViewUpdate
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof CalendarViewUpdate
     */
    'filters_disabled'?: boolean;
    /**
     * The new password or an empty string to remove any previous password from the view and make it publicly accessible again.
     * @type {string}
     * @memberof CalendarViewUpdate
     */
    'public_view_password'?: string;
    /**
     * Indicates how the access to the view is determined. By default, views are collaborative and shared for all users that have access to the table.
     * @type {string}
     * @memberof CalendarViewUpdate
     */
    'ownership_type'?: string;
    /**
     *
     * @type {number}
     * @memberof CalendarViewUpdate
     */
    'date_field'?: number | null;
    /**
     * Read-only field with ICal feed endpoint. Note: this url will not be active if ical_public value is set to False.
     * @type {string}
     * @memberof CalendarViewUpdate
     */
    'ical_feed_url': string;
    /**
     * A flag to show if ical feed is exposed. Set this field to True when modifying this resource to enable ICal feed url.
     * @type {boolean}
     * @memberof CalendarViewUpdate
     */
    'ical_public'?: boolean | null;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof CalendarViewUpdate
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof CalendarViewUpdate
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface CalendarViewView
 */
export interface CalendarViewView {
    /**
     *
     * @type {number}
     * @memberof CalendarViewView
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof CalendarViewView
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof CalendarViewView
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof CalendarViewView
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof CalendarViewView
     */
    'type': string;
    /**
     *
     * @type {Table}
     * @memberof CalendarViewView
     */
    'table': Table;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof CalendarViewView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     *
     * @type {Array<ViewFilter>}
     * @memberof CalendarViewView
     */
    'filters'?: Array<ViewFilter>;
    /**
     *
     * @type {Array<ViewFilterGroup>}
     * @memberof CalendarViewView
     */
    'filter_groups'?: Array<ViewFilterGroup>;
    /**
     *
     * @type {Array<ViewSort>}
     * @memberof CalendarViewView
     */
    'sortings'?: Array<ViewSort>;
    /**
     *
     * @type {Array<ViewGroupBy>}
     * @memberof CalendarViewView
     */
    'group_bys'?: Array<ViewGroupBy>;
    /**
     *
     * @type {Array<ViewDecoration>}
     * @memberof CalendarViewView
     */
    'decorations'?: Array<ViewDecoration>;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof CalendarViewView
     */
    'filters_disabled'?: boolean;
    /**
     * Indicates whether the public view is password protected or not.  :return: True if the public view is password protected, False otherwise.
     * @type {boolean}
     * @memberof CalendarViewView
     */
    'public_view_has_password': boolean;
    /**
     *
     * @type {boolean}
     * @memberof CalendarViewView
     */
    'show_logo'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CalendarViewView
     */
    'ownership_type': string;
    /**
     *
     * @type {number}
     * @memberof CalendarViewView
     */
    'owned_by_id'?: number;
    /**
     *
     * @type {number}
     * @memberof CalendarViewView
     */
    'date_field'?: number | null;
    /**
     * Read-only field with ICal feed endpoint. Note: this url will not be active if ical_public value is set to False.
     * @type {string}
     * @memberof CalendarViewView
     */
    'ical_feed_url': string;
    /**
     * A flag to show if ical feed is exposed. Set this field to True when modifying this resource to enable ICal feed url.
     * @type {boolean}
     * @memberof CalendarViewView
     */
    'ical_public'?: boolean | null;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof CalendarViewView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof CalendarViewView
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface ChangePassword400Response
 */
export interface ChangePassword400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ChangePassword400Response
     */
    'error'?: ChangePassword400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ChangePassword400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ChangePassword400ResponseErrorEnum: {
    readonly InvalidOldPassword: "ERROR_INVALID_OLD_PASSWORD";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
};
export type ChangePassword400ResponseErrorEnum = typeof ChangePassword400ResponseErrorEnum[keyof typeof ChangePassword400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ChangePasswordBodyValidation
 */
export interface ChangePasswordBodyValidation {
    /**
     *
     * @type {string}
     * @memberof ChangePasswordBodyValidation
     */
    'old_password': string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordBodyValidation
     */
    'new_password': string;
}
/**
 *
 * @export
 * @interface ChangePrimaryField400Response
 */
export interface ChangePrimaryField400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ChangePrimaryField400Response
     */
    'error'?: ChangePrimaryField400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ChangePrimaryField400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ChangePrimaryField400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly UserNotInGroup2: "ERROR_USER_NOT_IN_GROUP";
    readonly FieldIsAlreadyPrimary: "ERROR_FIELD_IS_ALREADY_PRIMARY";
    readonly FieldNotInTable: "ERROR_FIELD_NOT_IN_TABLE";
    readonly IncompatiblePrimaryFieldType: "ERROR_INCOMPATIBLE_PRIMARY_FIELD_TYPE";
    readonly TableHasNoPrimaryField: "ERROR_TABLE_HAS_NO_PRIMARY_FIELD";
};
export type ChangePrimaryField400ResponseErrorEnum = typeof ChangePrimaryField400ResponseErrorEnum[keyof typeof ChangePrimaryField400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ChangePrimaryField404Response
 */
export interface ChangePrimaryField404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ChangePrimaryField404Response
     */
    'error'?: ChangePrimaryField404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ChangePrimaryField404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ChangePrimaryField404ResponseErrorEnum: {
    readonly TableDoesNotExist: "ERROR_TABLE_DOES_NOT_EXIST";
    readonly FieldDoesNotExist: "ERROR_FIELD_DOES_NOT_EXIST";
};
export type ChangePrimaryField404ResponseErrorEnum = typeof ChangePrimaryField404ResponseErrorEnum[keyof typeof ChangePrimaryField404ResponseErrorEnum];
/**
 *
 * @export
 * @interface ChangePrimaryFieldParams
 */
export interface ChangePrimaryFieldParams {
    /**
     * The ID of the new primary field.
     * @type {number}
     * @memberof ChangePrimaryFieldParams
     */
    'new_primary_field_id': number;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface CheckboxElementCreateElement
 */
export interface CheckboxElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof CheckboxElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof CheckboxElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof CheckboxElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof CheckboxElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof CheckboxElementCreateElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof CheckboxElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof CheckboxElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof CheckboxElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof CheckboxElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof CheckboxElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof CheckboxElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof CheckboxElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof CheckboxElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof CheckboxElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof CheckboxElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The text label for this input
     * @type {string}
     * @memberof CheckboxElementCreateElement
     */
    'label'?: string;
    /**
     * The input\'s default value.
     * @type {string}
     * @memberof CheckboxElementCreateElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof CheckboxElementCreateElement
     */
    'required'?: boolean;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface CheckboxElementElement
 */
export interface CheckboxElementElement {
    /**
     *
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof CheckboxElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof CheckboxElementElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof CheckboxElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof CheckboxElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof CheckboxElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof CheckboxElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof CheckboxElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof CheckboxElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof CheckboxElementElement
     */
    'roles'?: any;
    /**
     * The text label for this input
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'label'?: string;
    /**
     * The input\'s default value.
     * @type {string}
     * @memberof CheckboxElementElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof CheckboxElementElement
     */
    'required'?: boolean;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface CheckboxElementPublicElement
 */
export interface CheckboxElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof CheckboxElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof CheckboxElementPublicElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof CheckboxElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof CheckboxElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof CheckboxElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof CheckboxElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof CheckboxElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof CheckboxElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof CheckboxElementPublicElement
     */
    'roles'?: any;
    /**
     * The text label for this input
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'label'?: string;
    /**
     * The input\'s default value.
     * @type {string}
     * @memberof CheckboxElementPublicElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof CheckboxElementPublicElement
     */
    'required'?: boolean;
}
/**
 *
 * @export
 * @interface CheckboxElementUpdateElement
 */
export interface CheckboxElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof CheckboxElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof CheckboxElementUpdateElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof CheckboxElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof CheckboxElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof CheckboxElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof CheckboxElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof CheckboxElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof CheckboxElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof CheckboxElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof CheckboxElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof CheckboxElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof CheckboxElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof CheckboxElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof CheckboxElementUpdateElement
     */
    'roles'?: any;
    /**
     * The text label for this input
     * @type {string}
     * @memberof CheckboxElementUpdateElement
     */
    'label'?: string;
    /**
     * The input\'s default value.
     * @type {string}
     * @memberof CheckboxElementUpdateElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof CheckboxElementUpdateElement
     */
    'required'?: boolean;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface ChoiceElementCreateElement
 */
export interface ChoiceElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof ChoiceElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ChoiceElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof ChoiceElementCreateElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ChoiceElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ChoiceElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ChoiceElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ChoiceElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ChoiceElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The text label for this choice
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'label'?: string;
    /**
     * This choice\'s input default value.
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof ChoiceElementCreateElement
     */
    'required'?: boolean;
    /**
     * The placeholder text which should be applied to the element.
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'placeholder'?: string;
    /**
     *
     * @type {Array<ChoiceOption>}
     * @memberof ChoiceElementCreateElement
     */
    'options'?: Array<ChoiceOption>;
    /**
     * Whether this choice allows users to choose multiple values.
     * @type {boolean}
     * @memberof ChoiceElementCreateElement
     */
    'multiple'?: boolean;
    /**
     * Whether to show the choices as a dropdown.
     * @type {boolean}
     * @memberof ChoiceElementCreateElement
     */
    'show_as_dropdown'?: boolean;
    /**
     *
     * @type {OptionTypeEnum}
     * @memberof ChoiceElementCreateElement
     */
    'option_type'?: OptionTypeEnum;
    /**
     * The value of the option if it is a formula
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'formula_value'?: string;
    /**
     * The display name of the option if it is a formula
     * @type {string}
     * @memberof ChoiceElementCreateElement
     */
    'formula_name'?: string;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface ChoiceElementElement
 */
export interface ChoiceElementElement {
    /**
     *
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ChoiceElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof ChoiceElementElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ChoiceElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ChoiceElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ChoiceElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ChoiceElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ChoiceElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ChoiceElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ChoiceElementElement
     */
    'roles'?: any;
    /**
     * The text label for this choice
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'label'?: string;
    /**
     * This choice\'s input default value.
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof ChoiceElementElement
     */
    'required'?: boolean;
    /**
     * The placeholder text which should be applied to the element.
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'placeholder'?: string;
    /**
     *
     * @type {Array<ChoiceOption>}
     * @memberof ChoiceElementElement
     */
    'options'?: Array<ChoiceOption>;
    /**
     * Whether this choice allows users to choose multiple values.
     * @type {boolean}
     * @memberof ChoiceElementElement
     */
    'multiple'?: boolean;
    /**
     * Whether to show the choices as a dropdown.
     * @type {boolean}
     * @memberof ChoiceElementElement
     */
    'show_as_dropdown'?: boolean;
    /**
     *
     * @type {OptionTypeEnum}
     * @memberof ChoiceElementElement
     */
    'option_type'?: OptionTypeEnum;
    /**
     * The value of the option if it is a formula
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'formula_value'?: string;
    /**
     * The display name of the option if it is a formula
     * @type {string}
     * @memberof ChoiceElementElement
     */
    'formula_name'?: string;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface ChoiceElementPublicElement
 */
export interface ChoiceElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ChoiceElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof ChoiceElementPublicElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ChoiceElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ChoiceElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ChoiceElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ChoiceElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ChoiceElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ChoiceElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ChoiceElementPublicElement
     */
    'roles'?: any;
    /**
     * The text label for this choice
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'label'?: string;
    /**
     * This choice\'s input default value.
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof ChoiceElementPublicElement
     */
    'required'?: boolean;
    /**
     * The placeholder text which should be applied to the element.
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'placeholder'?: string;
    /**
     *
     * @type {Array<ChoiceOption>}
     * @memberof ChoiceElementPublicElement
     */
    'options'?: Array<ChoiceOption>;
    /**
     * Whether this choice allows users to choose multiple values.
     * @type {boolean}
     * @memberof ChoiceElementPublicElement
     */
    'multiple'?: boolean;
    /**
     * Whether to show the choices as a dropdown.
     * @type {boolean}
     * @memberof ChoiceElementPublicElement
     */
    'show_as_dropdown'?: boolean;
    /**
     *
     * @type {OptionTypeEnum}
     * @memberof ChoiceElementPublicElement
     */
    'option_type'?: OptionTypeEnum;
    /**
     * The value of the option if it is a formula
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'formula_value'?: string;
    /**
     * The display name of the option if it is a formula
     * @type {string}
     * @memberof ChoiceElementPublicElement
     */
    'formula_name'?: string;
}
/**
 *
 * @export
 * @interface ChoiceElementUpdateElement
 */
export interface ChoiceElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ChoiceElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof ChoiceElementUpdateElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ChoiceElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ChoiceElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ChoiceElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ChoiceElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ChoiceElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ChoiceElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ChoiceElementUpdateElement
     */
    'roles'?: any;
    /**
     * The text label for this choice
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'label'?: string;
    /**
     * This choice\'s input default value.
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof ChoiceElementUpdateElement
     */
    'required'?: boolean;
    /**
     * The placeholder text which should be applied to the element.
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'placeholder'?: string;
    /**
     *
     * @type {Array<ChoiceOption>}
     * @memberof ChoiceElementUpdateElement
     */
    'options'?: Array<ChoiceOption>;
    /**
     * Whether this choice allows users to choose multiple values.
     * @type {boolean}
     * @memberof ChoiceElementUpdateElement
     */
    'multiple'?: boolean;
    /**
     * Whether to show the choices as a dropdown.
     * @type {boolean}
     * @memberof ChoiceElementUpdateElement
     */
    'show_as_dropdown'?: boolean;
    /**
     *
     * @type {OptionTypeEnum}
     * @memberof ChoiceElementUpdateElement
     */
    'option_type'?: OptionTypeEnum;
    /**
     * The value of the option if it is a formula
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'formula_value'?: string;
    /**
     * The display name of the option if it is a formula
     * @type {string}
     * @memberof ChoiceElementUpdateElement
     */
    'formula_name'?: string;
}
/**
 *
 * @export
 * @interface ChoiceOption
 */
export interface ChoiceOption {
    /**
     *
     * @type {number}
     * @memberof ChoiceOption
     */
    'id': number;
    /**
     * The value of the option
     * @type {string}
     * @memberof ChoiceOption
     */
    'value'?: string;
    /**
     * The display name of the option
     * @type {string}
     * @memberof ChoiceOption
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface Collaborator
 */
export interface Collaborator {
    /**
     *
     * @type {number}
     * @memberof Collaborator
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Collaborator
     */
    'name': string;
}
/**
 * This serializer transform the flat properties object from/to a config dict property. This allows us to see the field on the frontend side as a simple polymorphic object.
 * @export
 * @interface CollectionField
 */
export interface CollectionField {
    /**
     *
     * @type {number}
     * @memberof CollectionField
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof CollectionField
     */
    'uid'?: string;
    /**
     * The name of the field.
     * @type {string}
     * @memberof CollectionField
     */
    'name': string;
    /**
     * The type of the field.
     * @type {string}
     * @memberof CollectionField
     */
    'type': string;
    /**
     * The theme overrides for this field
     * @type {any}
     * @memberof CollectionField
     */
    'styles'?: any | null;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface ColumnElementCreateElement
 */
export interface ColumnElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof ColumnElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof ColumnElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ColumnElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ColumnElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     * The theme overrides for this element
     * @type {any}
     * @memberof ColumnElementCreateElement
     */
    'styles'?: any;
    /**
     * Top border color.
     * @type {string}
     * @memberof ColumnElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ColumnElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ColumnElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ColumnElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ColumnElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ColumnElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ColumnElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ColumnElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ColumnElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The amount of columns inside this column element.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'column_amount'?: number;
    /**
     * The amount of space between the columns.
     * @type {number}
     * @memberof ColumnElementCreateElement
     */
    'column_gap'?: number;
    /**
     *
     * @type {AlignmentEnum}
     * @memberof ColumnElementCreateElement
     */
    'alignment'?: AlignmentEnum;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface ColumnElementElement
 */
export interface ColumnElementElement {
    /**
     *
     * @type {number}
     * @memberof ColumnElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof ColumnElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof ColumnElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof ColumnElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ColumnElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ColumnElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     * The theme overrides for this element
     * @type {any}
     * @memberof ColumnElementElement
     */
    'styles'?: any;
    /**
     * Top border color.
     * @type {string}
     * @memberof ColumnElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ColumnElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ColumnElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ColumnElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ColumnElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ColumnElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ColumnElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ColumnElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ColumnElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ColumnElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ColumnElementElement
     */
    'roles'?: any;
    /**
     * The amount of columns inside this column element.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'column_amount'?: number;
    /**
     * The amount of space between the columns.
     * @type {number}
     * @memberof ColumnElementElement
     */
    'column_gap'?: number;
    /**
     *
     * @type {AlignmentEnum}
     * @memberof ColumnElementElement
     */
    'alignment'?: AlignmentEnum;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface ColumnElementPublicElement
 */
export interface ColumnElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof ColumnElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof ColumnElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ColumnElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ColumnElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     * The theme overrides for this element
     * @type {any}
     * @memberof ColumnElementPublicElement
     */
    'styles'?: any;
    /**
     * Top border color.
     * @type {string}
     * @memberof ColumnElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ColumnElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ColumnElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ColumnElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ColumnElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ColumnElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ColumnElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ColumnElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ColumnElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ColumnElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ColumnElementPublicElement
     */
    'roles'?: any;
    /**
     * The amount of columns inside this column element.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'column_amount'?: number;
    /**
     * The amount of space between the columns.
     * @type {number}
     * @memberof ColumnElementPublicElement
     */
    'column_gap'?: number;
    /**
     *
     * @type {AlignmentEnum}
     * @memberof ColumnElementPublicElement
     */
    'alignment'?: AlignmentEnum;
}
/**
 *
 * @export
 * @interface ColumnElementUpdateElement
 */
export interface ColumnElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ColumnElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     * The theme overrides for this element
     * @type {any}
     * @memberof ColumnElementUpdateElement
     */
    'styles'?: any;
    /**
     * Top border color.
     * @type {string}
     * @memberof ColumnElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ColumnElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ColumnElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ColumnElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ColumnElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ColumnElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ColumnElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ColumnElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ColumnElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ColumnElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ColumnElementUpdateElement
     */
    'roles'?: any;
    /**
     * The amount of columns inside this column element.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'column_amount'?: number;
    /**
     * The amount of space between the columns.
     * @type {number}
     * @memberof ColumnElementUpdateElement
     */
    'column_gap'?: number;
    /**
     *
     * @type {AlignmentEnum}
     * @memberof ColumnElementUpdateElement
     */
    'alignment'?: AlignmentEnum;
}
/**
 *
 * @export
 * @interface CombinedThemeConfigBlocks
 */
export interface CombinedThemeConfigBlocks {
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'primary_color'?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'secondary_color'?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'border_color'?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'main_success_color'?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'main_warning_color'?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'main_error_color'?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'body_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'body_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'body_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'body_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_1_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_1_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_1_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_1_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_2_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_2_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_2_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_2_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_3_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_3_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_3_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_3_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_4_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_4_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_4_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_4_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_5_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_5_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_5_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_5_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_6_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_6_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_6_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'heading_6_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_font_size'?: number;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {ButtonWidthEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_width'?: ButtonWidthEnum;
    /**
     * The background color of buttons
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_background_color'?: string;
    /**
     * The text color of buttons
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_text_color'?: string;
    /**
     * The border color of buttons
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_border_color'?: string;
    /**
     * Button border size
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_border_size'?: number;
    /**
     * Button border radius
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_border_radius'?: number;
    /**
     * Button vertical padding
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_vertical_padding'?: number;
    /**
     * Button horizontal padding
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_horizontal_padding'?: number;
    /**
     * The background color of buttons when hovered
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_hover_background_color'?: string;
    /**
     * The text color of buttons when hovered
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_hover_text_color'?: string;
    /**
     * The border color of buttons when hovered
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'button_hover_border_color'?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'link_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'link_font_size'?: number;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'link_text_alignment'?: TableCellAlignmentEnum;
    /**
     * The text color of links
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'link_text_color'?: string;
    /**
     * The hover color of links when hovered
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'link_hover_text_color'?: string;
    /**
     * The image max height
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'image_max_height'?: number;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'image_alignment'?: TableCellAlignmentEnum;
    /**
     * The max-width for this image element.
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'image_max_width'?: number;
    /**
     * The image constraint to apply to this image  * `cover` - Cover * `contain` - Contain * `full-width` - Full Width
     * @type {ImageConstraintEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'image_constraint'?: ImageConstraintEnum;
    /**
     * The image file
     * @type {UserFile}
     * @memberof CombinedThemeConfigBlocks
     */
    'page_background_file'?: UserFile | null;
    /**
     * The background color of the page
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'page_background_color'?: string;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {PageBackgroundModeEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'page_background_mode'?: PageBackgroundModeEnum;
    /**
     * The font family of the label
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'label_font_family'?: string;
    /**
     * The text color of the label
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'label_text_color'?: string;
    /**
     * The font size of the label
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'label_font_size'?: number;
    /**
     * The font family of the input
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'input_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'input_font_size'?: number;
    /**
     * The text color of the input
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'input_text_color'?: string;
    /**
     * The background color of the input
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'input_background_color'?: string;
    /**
     * The color of the input border
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'input_border_color'?: string;
    /**
     * Input border size
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'input_border_size'?: number;
    /**
     * Input border radius
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'input_border_radius'?: number;
    /**
     * Input vertical padding
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'input_vertical_padding'?: number;
    /**
     * Input horizontal padding
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'input_horizontal_padding'?: number;
    /**
     * The color of the table border
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_border_color'?: string;
    /**
     * Table border size
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_border_size'?: number;
    /**
     * Table border radius
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_border_radius'?: number;
    /**
     * The background color of the table header cells
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_header_background_color'?: string;
    /**
     * The text color of the table header cells
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_header_text_color'?: string;
    /**
     * The font size of the header cells
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_header_font_size'?: number;
    /**
     * The font family of the table header cells
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_header_font_family'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_header_text_alignment'?: TableCellAlignmentEnum;
    /**
     * The background color of the table cells
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_cell_background_color'?: string;
    /**
     * The alternate background color of the table cells
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_cell_alternate_background_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_cell_alignment'?: TableCellAlignmentEnum;
    /**
     * Table cell vertical padding
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_cell_vertical_padding'?: number;
    /**
     * Table cell horizontal padding
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_cell_horizontal_padding'?: number;
    /**
     * The color of the table vertical separator
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_vertical_separator_color'?: string;
    /**
     * Table vertical separator size
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_vertical_separator_size'?: number;
    /**
     * The color of the table horizontal separator
     * @type {string}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_horizontal_separator_color'?: string;
    /**
     * Table horizontal separator size
     * @type {number}
     * @memberof CombinedThemeConfigBlocks
     */
    'table_horizontal_separator_size'?: number;
}
/**
 * * `AND` - And * `OR` - Or
 * @export
 * @enum {string}
 */
export declare const ConditionTypeEnum: {
    readonly And: "AND";
    readonly Or: "OR";
};
export type ConditionTypeEnum = typeof ConditionTypeEnum[keyof typeof ConditionTypeEnum];
/**
 *
 * @export
 * @interface ConditionalColorValueProviderConfColor
 */
export interface ConditionalColorValueProviderConfColor {
    /**
     * A unique identifier for this condition.
     * @type {string}
     * @memberof ConditionalColorValueProviderConfColor
     */
    'id': string;
    /**
     * The color the decorator should take if the defined conditions apply.
     * @type {string}
     * @memberof ConditionalColorValueProviderConfColor
     */
    'color': string;
    /**
     * A list of conditions that the row must meet to get the selected color. This list of conditions can be empty, in that case, this color will always match the row values.
     * @type {Array<ConditionalColorValueProviderConfColorFilter>}
     * @memberof ConditionalColorValueProviderConfColor
     */
    'filters': Array<ConditionalColorValueProviderConfColorFilter>;
    /**
     * A list of filter groups that the row must meet to get the selected color.
     * @type {Array<ConditionalColorValueProviderConfColorFilterGroup>}
     * @memberof ConditionalColorValueProviderConfColor
     */
    'filter_groups'?: Array<ConditionalColorValueProviderConfColorFilterGroup>;
    /**
     * The boolean operator used to group all conditions.  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof ConditionalColorValueProviderConfColor
     */
    'operator'?: ConditionTypeEnum;
}
/**
 *
 * @export
 * @interface ConditionalColorValueProviderConfColorFilter
 */
export interface ConditionalColorValueProviderConfColorFilter {
    /**
     * A unique identifier for this condition.
     * @type {string}
     * @memberof ConditionalColorValueProviderConfColorFilter
     */
    'id': string;
    /**
     * The field of which the value must be compared to the filter value.
     * @type {number}
     * @memberof ConditionalColorValueProviderConfColorFilter
     */
    'field': number | null;
    /**
     *
     * @type {Type083Enum}
     * @memberof ConditionalColorValueProviderConfColorFilter
     */
    'type': Type083Enum | null;
    /**
     * The field of which the value must be compared to the filter value.
     * @type {string}
     * @memberof ConditionalColorValueProviderConfColorFilter
     */
    'value'?: string;
    /**
     * The id of the filter group this filter belongs to. If this is null, the filter is not part of a filter group.
     * @type {string}
     * @memberof ConditionalColorValueProviderConfColorFilter
     */
    'group'?: string | null;
}
/**
 *
 * @export
 * @interface ConditionalColorValueProviderConfColorFilterGroup
 */
export interface ConditionalColorValueProviderConfColorFilterGroup {
    /**
     * A unique identifier for this condition.
     * @type {string}
     * @memberof ConditionalColorValueProviderConfColorFilterGroup
     */
    'id': string;
    /**
     * The boolean operator used to group all conditions.  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof ConditionalColorValueProviderConfColorFilterGroup
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The id of the parent filter group.
     * @type {string}
     * @memberof ConditionalColorValueProviderConfColorFilterGroup
     */
    'parent_group'?: string | null;
}
/**
 *
 * @export
 * @interface ConditionalColorValueProviderConfColors
 */
export interface ConditionalColorValueProviderConfColors {
    /**
     * A list of color items. For each row, the value provider try to match the defined colors one by one in the given order. The first matching color is returned to the decorator.
     * @type {Array<ConditionalColorValueProviderConfColor>}
     * @memberof ConditionalColorValueProviderConfColors
     */
    'colors': Array<ConditionalColorValueProviderConfColor>;
}
/**
 *
 * @export
 * @interface CountFieldCreateField
 */
export interface CountFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof CountFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof CountFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof CountFieldCreateField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof CountFieldCreateField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof CountFieldCreateField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof CountFieldCreateField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof CountFieldCreateField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof CountFieldCreateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof CountFieldCreateField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof CountFieldCreateField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof CountFieldCreateField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof CountFieldCreateField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CountFieldCreateField
     */
    'error'?: string | null;
    /**
     * The id of the link row field to count values for.
     * @type {number}
     * @memberof CountFieldCreateField
     */
    'through_field_id'?: number | null;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof CountFieldCreateField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface CountFieldField
 */
export interface CountFieldField {
    /**
     *
     * @type {number}
     * @memberof CountFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof CountFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof CountFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof CountFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof CountFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof CountFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof CountFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof CountFieldField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof CountFieldField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof CountFieldField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof CountFieldField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof CountFieldField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof CountFieldField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof CountFieldField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof CountFieldField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof CountFieldField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof CountFieldField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CountFieldField
     */
    'error'?: string | null;
    /**
     * The id of the link row field to count values for.
     * @type {number}
     * @memberof CountFieldField
     */
    'through_field_id'?: number | null;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof CountFieldField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface CountFieldFieldSerializerWithRelatedFields
 */
export interface CountFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'error'?: string | null;
    /**
     * The id of the link row field to count values for.
     * @type {number}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'through_field_id'?: number | null;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof CountFieldFieldSerializerWithRelatedFields
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface CountFieldUpdateField
 */
export interface CountFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof CountFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof CountFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof CountFieldUpdateField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof CountFieldUpdateField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof CountFieldUpdateField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof CountFieldUpdateField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof CountFieldUpdateField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof CountFieldUpdateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof CountFieldUpdateField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof CountFieldUpdateField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof CountFieldUpdateField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof CountFieldUpdateField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CountFieldUpdateField
     */
    'error'?: string | null;
    /**
     * The id of the link row field to count values for.
     * @type {number}
     * @memberof CountFieldUpdateField
     */
    'through_field_id'?: number | null;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof CountFieldUpdateField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface CreateBuilderPage400Response
 */
export interface CreateBuilderPage400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateBuilderPage400Response
     */
    'error'?: CreateBuilderPage400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateBuilderPage400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateBuilderPage400ResponseErrorEnum: {
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly PageNameNotUnique: "ERROR_PAGE_NAME_NOT_UNIQUE";
    readonly PagePathNotUnique: "ERROR_PAGE_PATH_NOT_UNIQUE";
    readonly PathParamNotInPath: "ERROR_PATH_PARAM_NOT_IN_PATH";
    readonly PathParamNotDefined: "ERROR_PATH_PARAM_NOT_DEFINED";
};
export type CreateBuilderPage400ResponseErrorEnum = typeof CreateBuilderPage400ResponseErrorEnum[keyof typeof CreateBuilderPage400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateDatabaseTable400Response
 */
export interface CreateDatabaseTable400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateDatabaseTable400Response
     */
    'error'?: CreateDatabaseTable400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateDatabaseTable400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateDatabaseTable400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly InvalidInitialTableData: "ERROR_INVALID_INITIAL_TABLE_DATA";
    readonly InitialTableDataLimitExceeded: "ERROR_INITIAL_TABLE_DATA_LIMIT_EXCEEDED";
    readonly ReservedBaserowFieldName: "ERROR_RESERVED_BASEROW_FIELD_NAME";
    readonly InitialTableDataHasDuplicateNames: "ERROR_INITIAL_TABLE_DATA_HAS_DUPLICATE_NAMES";
    readonly InvalidBaserowFieldName: "ERROR_INVALID_BASEROW_FIELD_NAME";
    readonly MaxJobCountExceeded: "ERROR_MAX_JOB_COUNT_EXCEEDED";
};
export type CreateDatabaseTable400ResponseErrorEnum = typeof CreateDatabaseTable400ResponseErrorEnum[keyof typeof CreateDatabaseTable400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateDatabaseTableField400Response
 */
export interface CreateDatabaseTableField400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateDatabaseTableField400Response
     */
    'error'?: CreateDatabaseTableField400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateDatabaseTableField400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateDatabaseTableField400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly MaxFieldCountExceeded: "ERROR_MAX_FIELD_COUNT_EXCEEDED";
    readonly ReservedBaserowFieldName: "ERROR_RESERVED_BASEROW_FIELD_NAME";
    readonly FieldWithSameNameAlreadyExists: "ERROR_FIELD_WITH_SAME_NAME_ALREADY_EXISTS";
    readonly InvalidBaserowFieldName: "ERROR_INVALID_BASEROW_FIELD_NAME";
    readonly FieldSelfReference: "ERROR_FIELD_SELF_REFERENCE";
    readonly FieldCircularReference: "ERROR_FIELD_CIRCULAR_REFERENCE";
};
export type CreateDatabaseTableField400ResponseErrorEnum = typeof CreateDatabaseTableField400ResponseErrorEnum[keyof typeof CreateDatabaseTableField400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateDatabaseTableRow400Response
 */
export interface CreateDatabaseTableRow400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateDatabaseTableRow400Response
     */
    'error'?: CreateDatabaseTableRow400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateDatabaseTableRow400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateDatabaseTableRow400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly RequestBodyValidation2: "ERROR_REQUEST_BODY_VALIDATION";
};
export type CreateDatabaseTableRow400ResponseErrorEnum = typeof CreateDatabaseTableRow400ResponseErrorEnum[keyof typeof CreateDatabaseTableRow400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateDatabaseTableRow404Response
 */
export interface CreateDatabaseTableRow404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateDatabaseTableRow404Response
     */
    'error'?: CreateDatabaseTableRow404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateDatabaseTableRow404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateDatabaseTableRow404ResponseErrorEnum: {
    readonly TableDoesNotExist: "ERROR_TABLE_DOES_NOT_EXIST";
    readonly RowDoesNotExist: "ERROR_ROW_DOES_NOT_EXIST";
};
export type CreateDatabaseTableRow404ResponseErrorEnum = typeof CreateDatabaseTableRow404ResponseErrorEnum[keyof typeof CreateDatabaseTableRow404ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateDatabaseTableViewFilter400Response
 */
export interface CreateDatabaseTableViewFilter400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateDatabaseTableViewFilter400Response
     */
    'error'?: CreateDatabaseTableViewFilter400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateDatabaseTableViewFilter400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateDatabaseTableViewFilter400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly FieldNotInTable: "ERROR_FIELD_NOT_IN_TABLE";
    readonly ViewFilterNotSupported: "ERROR_VIEW_FILTER_NOT_SUPPORTED";
    readonly ViewFilterTypeUnsupportedField: "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
};
export type CreateDatabaseTableViewFilter400ResponseErrorEnum = typeof CreateDatabaseTableViewFilter400ResponseErrorEnum[keyof typeof CreateDatabaseTableViewFilter400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateDatabaseTableViewFilter404Response
 */
export interface CreateDatabaseTableViewFilter404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateDatabaseTableViewFilter404Response
     */
    'error'?: CreateDatabaseTableViewFilter404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateDatabaseTableViewFilter404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateDatabaseTableViewFilter404ResponseErrorEnum: {
    readonly DoesNotExist: "ERROR_VIEW_DOES_NOT_EXIST";
    readonly FilterGroupDoesNotExist: "ERROR_VIEW_FILTER_GROUP_DOES_NOT_EXIST";
};
export type CreateDatabaseTableViewFilter404ResponseErrorEnum = typeof CreateDatabaseTableViewFilter404ResponseErrorEnum[keyof typeof CreateDatabaseTableViewFilter404ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateDatabaseTableViewGroup400Response
 */
export interface CreateDatabaseTableViewGroup400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateDatabaseTableViewGroup400Response
     */
    'error'?: CreateDatabaseTableViewGroup400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateDatabaseTableViewGroup400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateDatabaseTableViewGroup400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly ViewGroupByNotSupported: "ERROR_VIEW_GROUP_BY_NOT_SUPPORTED";
    readonly FieldNotInTable: "ERROR_FIELD_NOT_IN_TABLE";
    readonly ViewGroupByFieldAlreadyExists: "ERROR_VIEW_GROUP_BY_FIELD_ALREADY_EXISTS";
    readonly ViewGroupByFieldNotSupported: "ERROR_VIEW_GROUP_BY_FIELD_NOT_SUPPORTED";
};
export type CreateDatabaseTableViewGroup400ResponseErrorEnum = typeof CreateDatabaseTableViewGroup400ResponseErrorEnum[keyof typeof CreateDatabaseTableViewGroup400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateDatabaseTableViewSort400Response
 */
export interface CreateDatabaseTableViewSort400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateDatabaseTableViewSort400Response
     */
    'error'?: CreateDatabaseTableViewSort400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateDatabaseTableViewSort400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateDatabaseTableViewSort400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly ViewSortNotSupported: "ERROR_VIEW_SORT_NOT_SUPPORTED";
    readonly FieldNotInTable: "ERROR_FIELD_NOT_IN_TABLE";
    readonly ViewSortFieldAlreadyExists: "ERROR_VIEW_SORT_FIELD_ALREADY_EXISTS";
    readonly ViewSortFieldNotSupported: "ERROR_VIEW_SORT_FIELD_NOT_SUPPORTED";
};
export type CreateDatabaseTableViewSort400ResponseErrorEnum = typeof CreateDatabaseTableViewSort400ResponseErrorEnum[keyof typeof CreateDatabaseTableViewSort400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateDatabaseTableWebhook400Response
 */
export interface CreateDatabaseTableWebhook400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateDatabaseTableWebhook400Response
     */
    'error'?: CreateDatabaseTableWebhook400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateDatabaseTableWebhook400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateDatabaseTableWebhook400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly TableWebhookMaxLimitExceeded: "ERROR_TABLE_WEBHOOK_MAX_LIMIT_EXCEEDED";
};
export type CreateDatabaseTableWebhook400ResponseErrorEnum = typeof CreateDatabaseTableWebhook400ResponseErrorEnum[keyof typeof CreateDatabaseTableWebhook400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreatePage
 */
export interface CreatePage {
    /**
     *
     * @type {string}
     * @memberof CreatePage
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CreatePage
     */
    'path': string;
    /**
     *
     * @type {Array<PathParam>}
     * @memberof CreatePage
     */
    'path_params'?: Array<PathParam>;
}
/**
 * The create role assignment serializer.
 * @export
 * @interface CreateRoleAssignment
 */
export interface CreateRoleAssignment {
    /**
     * The subject ID. A subject is an actor that can do operations.
     * @type {number}
     * @memberof CreateRoleAssignment
     */
    'subject_id': number;
    /**
     * The subject type.  * `auth.User` - auth.User * `anonymous` - anonymous * `user_source.user` - user_source.user * `core.Token` - core.Token * `baserow_enterprise.Team` - baserow_enterprise.Team
     * @type {SubjectType398Enum}
     * @memberof CreateRoleAssignment
     */
    'subject_type': SubjectType398Enum;
    /**
     * The uid of the role you want to assign to the user or team in the given workspace. You can omit this property if you want to remove the role.
     * @type {string}
     * @memberof CreateRoleAssignment
     */
    'role': string | null;
    /**
     * The ID of the scope object. The scope object limit the role assignment to this scope and all its descendants.
     * @type {number}
     * @memberof CreateRoleAssignment
     */
    'scope_id': number;
    /**
     * The scope object type.  * `core` - core * `application` - application * `workspace` - workspace * `workspace_invitation` - workspace_invitation * `snapshot` - snapshot * `workspace_user` - workspace_user * `integration` - integration * `user_source` - user_source * `database` - database * `database_table` - database_table * `database_field` - database_field * `database_view` - database_view * `database_view_decoration` - database_view_decoration * `database_view_sort` - database_view_sort * `database_view_group` - database_view_group * `database_view_filter` - database_view_filter * `database_view_filter_group` - database_view_filter_group * `token` - token * `builder` - builder * `builder_page` - builder_page * `builder_element` - builder_element * `builder_domain` - builder_domain * `builder_data_source` - builder_data_source * `builder_workflow_action` - builder_workflow_action * `team` - team * `team_subject` - team_subject * `license` - license
     * @type {ScopeTypeEnum}
     * @memberof CreateRoleAssignment
     */
    'scope_type': ScopeTypeEnum;
}
/**
 *
 * @export
 * @interface CreateRowComment400Response
 */
export interface CreateRowComment400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateRowComment400Response
     */
    'error'?: CreateRowComment400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateRowComment400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateRowComment400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly InvalidCommentMention: "ERROR_INVALID_COMMENT_MENTION";
};
export type CreateRowComment400ResponseErrorEnum = typeof CreateRowComment400ResponseErrorEnum[keyof typeof CreateRowComment400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateSnapshot400Response
 */
export interface CreateSnapshot400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateSnapshot400Response
     */
    'error'?: CreateSnapshot400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateSnapshot400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateSnapshot400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly MaximumSnapshotsReached: "ERROR_MAXIMUM_SNAPSHOTS_REACHED";
    readonly ApplicationOperationNotSupported: "ERROR_APPLICATION_OPERATION_NOT_SUPPORTED";
    readonly SnapshotIsBeingCreated: "ERROR_SNAPSHOT_IS_BEING_CREATED";
    readonly SnapshotNameNotUnique: "ERROR_SNAPSHOT_NAME_NOT_UNIQUE";
    readonly SnapshotOperationLimitExceeded: "ERROR_SNAPSHOT_OPERATION_LIMIT_EXCEEDED";
};
export type CreateSnapshot400ResponseErrorEnum = typeof CreateSnapshot400ResponseErrorEnum[keyof typeof CreateSnapshot400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateSnapshotJobCreateJob
 */
export interface CreateSnapshotJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof CreateSnapshotJobCreateJob
     */
    'type': Type8b6Enum;
}
/**
 *
 * @export
 * @interface CreateSnapshotJobJob
 */
export interface CreateSnapshotJobJob {
    /**
     *
     * @type {number}
     * @memberof CreateSnapshotJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof CreateSnapshotJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof CreateSnapshotJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof CreateSnapshotJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof CreateSnapshotJobJob
     */
    'human_readable_error'?: string;
}
/**
 *
 * @export
 * @interface CreateSubject400Response
 */
export interface CreateSubject400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateSubject400Response
     */
    'error'?: CreateSubject400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateSubject400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateSubject400ResponseErrorEnum: {
    readonly NotInGroup: "ERROR_SUBJECT_NOT_IN_GROUP";
    readonly TypeUnsupported: "ERROR_SUBJECT_TYPE_UNSUPPORTED";
    readonly BadRequest: "ERROR_SUBJECT_BAD_REQUEST";
};
export type CreateSubject400ResponseErrorEnum = typeof CreateSubject400ResponseErrorEnum[keyof typeof CreateSubject400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateSubject404Response
 */
export interface CreateSubject404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateSubject404Response
     */
    'error'?: CreateSubject404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateSubject404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateSubject404ResponseErrorEnum: {
    readonly TeamDoesNotExist: "ERROR_TEAM_DOES_NOT_EXIST";
    readonly SubjectDoesNotExist: "ERROR_SUBJECT_DOES_NOT_EXIST";
};
export type CreateSubject404ResponseErrorEnum = typeof CreateSubject404ResponseErrorEnum[keyof typeof CreateSubject404ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateUser200Response
 */
export interface CreateUser200Response {
    /**
     *
     * @type {AdminImpersonateUser200ResponseUser}
     * @memberof CreateUser200Response
     */
    'user'?: AdminImpersonateUser200ResponseUser;
    /**
     * Deprecated. Use the `access_token` instead.
     * @type {string}
     * @memberof CreateUser200Response
     * @deprecated
     */
    'token'?: string;
    /**
     * \'access_token\' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
     * @type {string}
     * @memberof CreateUser200Response
     */
    'access_token'?: string;
    /**
     * \'refresh_token\' can be used to get a new valid \'access_token\'. This token will be valid for 168 hours.
     * @type {string}
     * @memberof CreateUser200Response
     */
    'refresh_token'?: string;
}
/**
 *
 * @export
 * @interface CreateUser400Response
 */
export interface CreateUser400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateUser400Response
     */
    'error'?: CreateUser400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateUser400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateUser400ResponseErrorEnum: {
    readonly ErrorAlreadyExists: "ERROR_ALREADY_EXISTS";
    readonly ErrorGroupInvitationDoesNotExist: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
    readonly ErrorRequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly BadTokenSignature: "BAD_TOKEN_SIGNATURE";
};
export type CreateUser400ResponseErrorEnum = typeof CreateUser400ResponseErrorEnum[keyof typeof CreateUser400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreateViewFilter
 */
export interface CreateViewFilter {
    /**
     * The field of which the value must be compared to the filter value.
     * @type {number}
     * @memberof CreateViewFilter
     */
    'field': number;
    /**
     * Indicates how the field\'s value must be compared to the filter\'s value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).  * `equal` - equal * `not_equal` - not_equal * `filename_contains` - filename_contains * `files_lower_than` - files_lower_than * `has_file_type` - has_file_type * `contains` - contains * `contains_not` - contains_not * `contains_word` - contains_word * `doesnt_contain_word` - doesnt_contain_word * `length_is_lower_than` - length_is_lower_than * `higher_than` - higher_than * `higher_than_or_equal` - higher_than_or_equal * `lower_than` - lower_than * `lower_than_or_equal` - lower_than_or_equal * `is_even_and_whole` - is_even_and_whole * `date_equal` - date_equal * `date_before` - date_before * `date_before_or_equal` - date_before_or_equal * `date_after_days_ago` - date_after_days_ago * `date_after` - date_after * `date_after_or_equal` - date_after_or_equal * `date_not_equal` - date_not_equal * `date_equals_today` - date_equals_today * `date_before_today` - date_before_today * `date_after_today` - date_after_today * `date_within_days` - date_within_days * `date_within_weeks` - date_within_weeks * `date_within_months` - date_within_months * `date_equals_days_ago` - date_equals_days_ago * `date_equals_months_ago` - date_equals_months_ago * `date_equals_years_ago` - date_equals_years_ago * `date_equals_week` - date_equals_week * `date_equals_month` - date_equals_month * `date_equals_day_of_month` - date_equals_day_of_month * `date_equals_year` - date_equals_year * `date_is` - date_is * `date_is_not` - date_is_not * `date_is_before` - date_is_before * `date_is_on_or_before` - date_is_on_or_before * `date_is_after` - date_is_after * `date_is_on_or_after` - date_is_on_or_after * `date_is_within` - date_is_within * `single_select_equal` - single_select_equal * `single_select_not_equal` - single_select_not_equal * `single_select_is_any_of` - single_select_is_any_of * `single_select_is_none_of` - single_select_is_none_of * `link_row_has` - link_row_has * `link_row_has_not` - link_row_has_not * `link_row_contains` - link_row_contains * `link_row_not_contains` - link_row_not_contains * `boolean` - boolean * `empty` - empty * `not_empty` - not_empty * `multiple_select_has` - multiple_select_has * `multiple_select_has_not` - multiple_select_has_not * `multiple_collaborators_has` - multiple_collaborators_has * `multiple_collaborators_has_not` - multiple_collaborators_has_not * `user_is` - user_is * `user_is_not` - user_is_not * `has_value_equal` - has_value_equal * `has_not_value_equal` - has_not_value_equal * `has_value_contains` - has_value_contains * `has_not_value_contains` - has_not_value_contains * `has_value_contains_word` - has_value_contains_word * `has_not_value_contains_word` - has_not_value_contains_word * `has_value_length_is_lower_than` - has_value_length_is_lower_than * `has_empty_value` - has_empty_value * `has_not_empty_value` - has_not_empty_value
     * @type {Type083Enum}
     * @memberof CreateViewFilter
     */
    'type': Type083Enum;
    /**
     * The filter value that must be compared to the field\'s value.
     * @type {string}
     * @memberof CreateViewFilter
     */
    'value'?: string;
    /**
     * The id of the filter group the new filter will belong to. If this is null, the filter will not be part of a filter group, but directly part of the view.
     * @type {number}
     * @memberof CreateViewFilter
     */
    'group'?: number | null;
}
/**
 *
 * @export
 * @interface CreateViewFilterGroup
 */
export interface CreateViewFilterGroup {
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR) in the group to be shown.  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof CreateViewFilterGroup
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     *
     * @type {number}
     * @memberof CreateViewFilterGroup
     */
    'parent_group'?: number | null;
}
/**
 *
 * @export
 * @interface CreateViewGroupBy
 */
export interface CreateViewGroupBy {
    /**
     * The field that must be grouped by.
     * @type {number}
     * @memberof CreateViewGroupBy
     */
    'field': number;
    /**
     * Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A.  * `ASC` - Ascending * `DESC` - Descending
     * @type {OrderEnum}
     * @memberof CreateViewGroupBy
     */
    'order'?: OrderEnum;
    /**
     * The pixel width of the group by in the related view.
     * @type {number}
     * @memberof CreateViewGroupBy
     */
    'width'?: number;
}
/**
 *
 * @export
 * @interface CreateViewSort
 */
export interface CreateViewSort {
    /**
     * The field that must be sorted on.
     * @type {number}
     * @memberof CreateViewSort
     */
    'field': number;
    /**
     * Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A.  * `ASC` - Ascending * `DESC` - Descending
     * @type {OrderEnum}
     * @memberof CreateViewSort
     */
    'order'?: OrderEnum;
}
/**
 *
 * @export
 * @interface CreateWorkspaceInvitation
 */
export interface CreateWorkspaceInvitation {
    /**
     * The email address of the user that the invitation is meant for. Only a user with that email address can accept it.
     * @type {string}
     * @memberof CreateWorkspaceInvitation
     */
    'email': string;
    /**
     * The permissions that the user is going to get within the workspace after accepting the invitation.
     * @type {string}
     * @memberof CreateWorkspaceInvitation
     */
    'permissions'?: string;
    /**
     * An optional message that the invitor can provide. This will be visible to the receiver of the invitation.
     * @type {string}
     * @memberof CreateWorkspaceInvitation
     */
    'message'?: string;
    /**
     * The base URL where the user can publicly accept his invitation.The accept token is going to be appended to the base_url (base_url \'/token\').
     * @type {string}
     * @memberof CreateWorkspaceInvitation
     */
    'base_url': string;
}
/**
 *
 * @export
 * @interface CreateWorkspaceInvitation400Response
 */
export interface CreateWorkspaceInvitation400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof CreateWorkspaceInvitation400Response
     */
    'error'?: CreateWorkspaceInvitation400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof CreateWorkspaceInvitation400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const CreateWorkspaceInvitation400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly UserInvalidGroupPermissions: "ERROR_USER_INVALID_GROUP_PERMISSIONS";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly MaxNumberOfPendingWorkspaceInvitesReached: "ERROR_MAX_NUMBER_OF_PENDING_WORKSPACE_INVITES_REACHED";
};
export type CreateWorkspaceInvitation400ResponseErrorEnum = typeof CreateWorkspaceInvitation400ResponseErrorEnum[keyof typeof CreateWorkspaceInvitation400ResponseErrorEnum];
/**
 *
 * @export
 * @interface CreatedByFieldCreateField
 */
export interface CreatedByFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof CreatedByFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof CreatedByFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof CreatedByFieldCreateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface CreatedByFieldField
 */
export interface CreatedByFieldField {
    /**
     *
     * @type {number}
     * @memberof CreatedByFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof CreatedByFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof CreatedByFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof CreatedByFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof CreatedByFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof CreatedByFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof CreatedByFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof CreatedByFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface CreatedByFieldFieldSerializerWithRelatedFields
 */
export interface CreatedByFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof CreatedByFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof CreatedByFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof CreatedByFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof CreatedByFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof CreatedByFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof CreatedByFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof CreatedByFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof CreatedByFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof CreatedByFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface CreatedByFieldUpdateField
 */
export interface CreatedByFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof CreatedByFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof CreatedByFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof CreatedByFieldUpdateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface CreatedOnFieldCreateField
 */
export interface CreatedOnFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof CreatedOnFieldCreateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof CreatedOnFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof CreatedOnFieldCreateField
     */
    'description'?: string | null;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof CreatedOnFieldCreateField
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof CreatedOnFieldCreateField
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof CreatedOnFieldCreateField
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof CreatedOnFieldCreateField
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof CreatedOnFieldCreateField
     */
    'date_force_timezone'?: string | null;
    /**
     * (\'A UTC offset in minutes to add to all the field datetimes values.\',)
     * @type {number}
     * @memberof CreatedOnFieldCreateField
     */
    'date_force_timezone_offset'?: number | null;
}
/**
 *
 * @export
 * @interface CreatedOnFieldField
 */
export interface CreatedOnFieldField {
    /**
     *
     * @type {number}
     * @memberof CreatedOnFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof CreatedOnFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof CreatedOnFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof CreatedOnFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof CreatedOnFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof CreatedOnFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof CreatedOnFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof CreatedOnFieldField
     */
    'description'?: string | null;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof CreatedOnFieldField
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof CreatedOnFieldField
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof CreatedOnFieldField
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof CreatedOnFieldField
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof CreatedOnFieldField
     */
    'date_force_timezone'?: string | null;
}
/**
 *
 * @export
 * @interface CreatedOnFieldFieldSerializerWithRelatedFields
 */
export interface CreatedOnFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'name'?: string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof CreatedOnFieldFieldSerializerWithRelatedFields
     */
    'date_force_timezone'?: string | null;
}
/**
 *
 * @export
 * @interface CreatedOnFieldUpdateField
 */
export interface CreatedOnFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof CreatedOnFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof CreatedOnFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof CreatedOnFieldUpdateField
     */
    'description'?: string | null;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof CreatedOnFieldUpdateField
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof CreatedOnFieldUpdateField
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof CreatedOnFieldUpdateField
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof CreatedOnFieldUpdateField
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof CreatedOnFieldUpdateField
     */
    'date_force_timezone'?: string | null;
    /**
     * (\'A UTC offset in minutes to add to all the field datetimes values.\',)
     * @type {number}
     * @memberof CreatedOnFieldUpdateField
     */
    'date_force_timezone_offset'?: number | null;
}
/**
 * * `,` - , * `;` - ; * `|` - | * `tab` -   * `record_separator` -  * `unit_separator` - 
 * @export
 * @enum {string}
 */
export declare const CsvColumnSeparatorEnum: {
    readonly Comma: ",";
    readonly Semicolon: ";";
    readonly Pipe: "|";
    readonly Tab: "tab";
    readonly RecordSeparator: "record_separator";
    readonly UnitSeparator: "unit_separator";
};
export type CsvColumnSeparatorEnum = typeof CsvColumnSeparatorEnum[keyof typeof CsvColumnSeparatorEnum];
/**
 *
 * @export
 * @interface CsvExporterOptions
 */
export interface CsvExporterOptions {
    /**
     * Optional: The view for this table to export using its filters, sorts and other view specific settings.
     * @type {number}
     * @memberof CsvExporterOptions
     */
    'view_id'?: number | null;
    /**
     * The file type to export to.  * `csv` - csv * `json` - json * `xml` - xml
     * @type {ExporterTypeEnum}
     * @memberof CsvExporterOptions
     */
    'exporter_type': ExporterTypeEnum;
    /**
     * The character set to use when creating the export file.  * `utf-8` - utf-8 * `iso-8859-6` - iso-8859-6 * `windows-1256` - windows-1256 * `iso-8859-4` - iso-8859-4 * `windows-1257` - windows-1257 * `iso-8859-14` - iso-8859-14 * `iso-8859-2` - iso-8859-2 * `windows-1250` - windows-1250 * `gbk` - gbk * `gb18030` - gb18030 * `big5` - big5 * `koi8-r` - koi8-r * `koi8-u` - koi8-u * `iso-8859-5` - iso-8859-5 * `windows-1251` - windows-1251 * `x-mac-cyrillic` - mac-cyrillic * `iso-8859-7` - iso-8859-7 * `windows-1253` - windows-1253 * `iso-8859-8` - iso-8859-8 * `windows-1255` - windows-1255 * `euc-jp` - euc-jp * `iso-2022-jp` - iso-2022-jp * `shift-jis` - shift-jis * `euc-kr` - euc-kr * `macintosh` - macintosh * `iso-8859-10` - iso-8859-10 * `iso-8859-16` - iso-8859-16 * `windows-874` - cp874 * `windows-1254` - windows-1254 * `windows-1258` - windows-1258 * `iso-8859-1` - iso-8859-1 * `windows-1252` - windows-1252 * `iso-8859-3` - iso-8859-3
     * @type {ExportCharsetEnum}
     * @memberof CsvExporterOptions
     */
    'export_charset'?: ExportCharsetEnum;
    /**
     * The value used to separate columns in the resulting csv file.  * `,` - , * `;` - ; * `|` - | * `tab` -   * `record_separator` -  * `unit_separator` - 
     * @type {CsvColumnSeparatorEnum}
     * @memberof CsvExporterOptions
     */
    'csv_column_separator'?: CsvColumnSeparatorEnum;
    /**
     * Whether or not to generate a header row at the top of the csv file.
     * @type {boolean}
     * @memberof CsvExporterOptions
     */
    'csv_include_header'?: boolean;
}
/**
 *
 * @export
 * @interface CustomDomainCreateDomain
 */
export interface CustomDomainCreateDomain {
    /**
     * The type of the domain.  * `custom` - custom * `sub_domain` - sub_domain
     * @type {Type509Enum}
     * @memberof CustomDomainCreateDomain
     */
    'type': Type509Enum;
    /**
     *
     * @type {string}
     * @memberof CustomDomainCreateDomain
     */
    'domain_name': string;
}
/**
 *
 * @export
 * @interface CustomDomainDomain
 */
export interface CustomDomainDomain {
    /**
     *
     * @type {number}
     * @memberof CustomDomainDomain
     */
    'id': number;
    /**
     * The type of the domain.
     * @type {string}
     * @memberof CustomDomainDomain
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof CustomDomainDomain
     */
    'domain_name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof CustomDomainDomain
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof CustomDomainDomain
     */
    'builder_id': number;
    /**
     * Last publication date of this domain
     * @type {string}
     * @memberof CustomDomainDomain
     */
    'last_published'?: string | null;
}
/**
 *
 * @export
 * @interface Dashboard
 */
export interface Dashboard {
    /**
     *
     * @type {Array<UserWorkspaceInvitation>}
     * @memberof Dashboard
     */
    'group_invitations': Array<UserWorkspaceInvitation>;
    /**
     *
     * @type {Array<UserWorkspaceInvitation>}
     * @memberof Dashboard
     */
    'workspace_invitations': Array<UserWorkspaceInvitation>;
}
/**
 *
 * @export
 * @interface DatabaseApplication
 */
export interface DatabaseApplication {
    /**
     *
     * @type {number}
     * @memberof DatabaseApplication
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof DatabaseApplication
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof DatabaseApplication
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof DatabaseApplication
     */
    'type': string;
    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     * @type {Workspace}
     * @memberof DatabaseApplication
     */
    'group': Workspace;
    /**
     * The workspace that the application belongs to.
     * @type {Workspace}
     * @memberof DatabaseApplication
     */
    'workspace': Workspace;
    /**
     *
     * @type {string}
     * @memberof DatabaseApplication
     */
    'created_on': string;
    /**
     * This field is specific to the `database` application and contains an array of tables that are in the database.
     * @type {Array<TableSerializerWithFields>}
     * @memberof DatabaseApplication
     */
    'tables': Array<TableSerializerWithFields>;
    /**
     * This field is specific to the `database` application and contains an array of views that are in the tables.
     * @type {Array<LocalBaserowView>}
     * @memberof DatabaseApplication
     */
    'views': Array<LocalBaserowView>;
}
/**
 *
 * @export
 * @interface DatabaseBaseApplicationCreatePolymorphic
 */
export interface DatabaseBaseApplicationCreatePolymorphic {
    /**
     *
     * @type {string}
     * @memberof DatabaseBaseApplicationCreatePolymorphic
     */
    'name': string;
    /**
     *
     * @type {Type8b0Enum}
     * @memberof DatabaseBaseApplicationCreatePolymorphic
     */
    'type': Type8b0Enum;
    /**
     *
     * @type {boolean}
     * @memberof DatabaseBaseApplicationCreatePolymorphic
     */
    'init_with_data'?: boolean;
}
/**
 *
 * @export
 * @interface DatabaseBaseApplicationUpdatePolymorphic
 */
export interface DatabaseBaseApplicationUpdatePolymorphic {
    /**
     *
     * @type {string}
     * @memberof DatabaseBaseApplicationUpdatePolymorphic
     */
    'name': string;
}
/**
 *
 * @export
 * @interface DatabaseTablePublicViewLinkRowFieldLookup401Response
 */
export interface DatabaseTablePublicViewLinkRowFieldLookup401Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DatabaseTablePublicViewLinkRowFieldLookup401Response
     */
    'error'?: DatabaseTablePublicViewLinkRowFieldLookup401ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DatabaseTablePublicViewLinkRowFieldLookup401Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DatabaseTablePublicViewLinkRowFieldLookup401ResponseErrorEnum: {
    readonly ErrorNoAuthorizationToPubliclySharedView: "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW";
};
export type DatabaseTablePublicViewLinkRowFieldLookup401ResponseErrorEnum = typeof DatabaseTablePublicViewLinkRowFieldLookup401ResponseErrorEnum[keyof typeof DatabaseTablePublicViewLinkRowFieldLookup401ResponseErrorEnum];
/**
 *
 * @export
 * @interface DatabaseTablePublicViewLinkRowFieldLookup404Response
 */
export interface DatabaseTablePublicViewLinkRowFieldLookup404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DatabaseTablePublicViewLinkRowFieldLookup404Response
     */
    'error'?: DatabaseTablePublicViewLinkRowFieldLookup404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DatabaseTablePublicViewLinkRowFieldLookup404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DatabaseTablePublicViewLinkRowFieldLookup404ResponseErrorEnum: {
    readonly ViewDoesNotExist: "ERROR_VIEW_DOES_NOT_EXIST";
    readonly FieldDoesNotExist: "ERROR_FIELD_DOES_NOT_EXIST";
};
export type DatabaseTablePublicViewLinkRowFieldLookup404ResponseErrorEnum = typeof DatabaseTablePublicViewLinkRowFieldLookup404ResponseErrorEnum[keyof typeof DatabaseTablePublicViewLinkRowFieldLookup404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DateFieldCreateField
 */
export interface DateFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof DateFieldCreateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof DateFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof DateFieldCreateField
     */
    'description'?: string | null;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof DateFieldCreateField
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof DateFieldCreateField
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof DateFieldCreateField
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof DateFieldCreateField
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof DateFieldCreateField
     */
    'date_force_timezone'?: string | null;
    /**
     * (\'A UTC offset in minutes to add to all the field datetimes values.\',)
     * @type {number}
     * @memberof DateFieldCreateField
     */
    'date_force_timezone_offset'?: number | null;
}
/**
 *
 * @export
 * @interface DateFieldField
 */
export interface DateFieldField {
    /**
     *
     * @type {number}
     * @memberof DateFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof DateFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof DateFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof DateFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof DateFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof DateFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof DateFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof DateFieldField
     */
    'description'?: string | null;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof DateFieldField
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof DateFieldField
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof DateFieldField
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof DateFieldField
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof DateFieldField
     */
    'date_force_timezone'?: string | null;
}
/**
 *
 * @export
 * @interface DateFieldFieldSerializerWithRelatedFields
 */
export interface DateFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'name'?: string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof DateFieldFieldSerializerWithRelatedFields
     */
    'date_force_timezone'?: string | null;
}
/**
 *
 * @export
 * @interface DateFieldUpdateField
 */
export interface DateFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof DateFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof DateFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof DateFieldUpdateField
     */
    'description'?: string | null;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof DateFieldUpdateField
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof DateFieldUpdateField
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof DateFieldUpdateField
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof DateFieldUpdateField
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof DateFieldUpdateField
     */
    'date_force_timezone'?: string | null;
    /**
     * (\'A UTC offset in minutes to add to all the field datetimes values.\',)
     * @type {number}
     * @memberof DateFieldUpdateField
     */
    'date_force_timezone_offset'?: number | null;
}
/**
 * * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
 * @export
 * @enum {string}
 */
export declare const DateFormatEnum: {
    readonly Eu: "EU";
    readonly Us: "US";
    readonly Iso: "ISO";
};
export type DateFormatEnum = typeof DateFormatEnum[keyof typeof DateFormatEnum];
/**
 * * `24` - 24 hour * `12` - 12 hour
 * @export
 * @enum {string}
 */
export declare const DateTimeFormatEnum: {
    readonly _24: "24";
    readonly _12: "12";
};
export type DateTimeFormatEnum = typeof DateTimeFormatEnum[keyof typeof DateTimeFormatEnum];
/**
 * @type DecoratorValueProviderTypeCreateViewDecoration
 * @export
 */
export type DecoratorValueProviderTypeCreateViewDecoration = {
    value_provider_type: 'conditional_color';
} & GeneratedConditionalColorCreateViewDecoration | {
    value_provider_type: 'single_select_color';
} & GeneratedSingleSelectColorCreateViewDecoration;
/**
 * @type DecoratorValueProviderTypeViewDecoration
 * @export
 */
export type DecoratorValueProviderTypeViewDecoration = {
    value_provider_type: 'conditional_color';
} & GeneratedConditionalColorViewDecoration | {
    value_provider_type: 'single_select_color';
} & GeneratedSingleSelectColorViewDecoration;
/**
 *
 * @export
 * @interface DeleteApplication400Response
 */
export interface DeleteApplication400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteApplication400Response
     */
    'error'?: DeleteApplication400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteApplication400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteApplication400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly CannotDeleteAlreadyDeletedItem: "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
};
export type DeleteApplication400ResponseErrorEnum = typeof DeleteApplication400ResponseErrorEnum[keyof typeof DeleteApplication400ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteApplicationIntegration404Response
 */
export interface DeleteApplicationIntegration404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteApplicationIntegration404Response
     */
    'error'?: DeleteApplicationIntegration404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteApplicationIntegration404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteApplicationIntegration404ResponseErrorEnum: {
    readonly ErrorIntegrationDoesNotExist: "ERROR_INTEGRATION_DOES_NOT_EXIST";
};
export type DeleteApplicationIntegration404ResponseErrorEnum = typeof DeleteApplicationIntegration404ResponseErrorEnum[keyof typeof DeleteApplicationIntegration404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteApplicationUserSource404Response
 */
export interface DeleteApplicationUserSource404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteApplicationUserSource404Response
     */
    'error'?: DeleteApplicationUserSource404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteApplicationUserSource404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteApplicationUserSource404ResponseErrorEnum: {
    readonly ErrorUserSourceDoesNotExist: "ERROR_USER_SOURCE_DOES_NOT_EXIST";
};
export type DeleteApplicationUserSource404ResponseErrorEnum = typeof DeleteApplicationUserSource404ResponseErrorEnum[keyof typeof DeleteApplicationUserSource404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteBuilderDomain404Response
 */
export interface DeleteBuilderDomain404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteBuilderDomain404Response
     */
    'error'?: DeleteBuilderDomain404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteBuilderDomain404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteBuilderDomain404ResponseErrorEnum: {
    readonly ErrorDomainDoesNotExist: "ERROR_DOMAIN_DOES_NOT_EXIST";
};
export type DeleteBuilderDomain404ResponseErrorEnum = typeof DeleteBuilderDomain404ResponseErrorEnum[keyof typeof DeleteBuilderDomain404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteBuilderPageDataSource404Response
 */
export interface DeleteBuilderPageDataSource404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteBuilderPageDataSource404Response
     */
    'error'?: DeleteBuilderPageDataSource404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteBuilderPageDataSource404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteBuilderPageDataSource404ResponseErrorEnum: {
    readonly ErrorDataSourceDoesNotExist: "ERROR_DATA_SOURCE_DOES_NOT_EXIST";
};
export type DeleteBuilderPageDataSource404ResponseErrorEnum = typeof DeleteBuilderPageDataSource404ResponseErrorEnum[keyof typeof DeleteBuilderPageDataSource404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteBuilderPageElement404Response
 */
export interface DeleteBuilderPageElement404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteBuilderPageElement404Response
     */
    'error'?: DeleteBuilderPageElement404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteBuilderPageElement404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteBuilderPageElement404ResponseErrorEnum: {
    readonly ErrorElementDoesNotExist: "ERROR_ELEMENT_DOES_NOT_EXIST";
};
export type DeleteBuilderPageElement404ResponseErrorEnum = typeof DeleteBuilderPageElement404ResponseErrorEnum[keyof typeof DeleteBuilderPageElement404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteBuilderPageWorkflowAction404Response
 */
export interface DeleteBuilderPageWorkflowAction404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteBuilderPageWorkflowAction404Response
     */
    'error'?: DeleteBuilderPageWorkflowAction404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteBuilderPageWorkflowAction404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteBuilderPageWorkflowAction404ResponseErrorEnum: {
    readonly ErrorWorkflowActionDoesNotExist: "ERROR_WORKFLOW_ACTION_DOES_NOT_EXIST";
};
export type DeleteBuilderPageWorkflowAction404ResponseErrorEnum = typeof DeleteBuilderPageWorkflowAction404ResponseErrorEnum[keyof typeof DeleteBuilderPageWorkflowAction404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteDatabaseTableField400Response
 */
export interface DeleteDatabaseTableField400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteDatabaseTableField400Response
     */
    'error'?: DeleteDatabaseTableField400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteDatabaseTableField400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteDatabaseTableField400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly CannotDeletePrimaryField: "ERROR_CANNOT_DELETE_PRIMARY_FIELD";
    readonly CannotDeleteAlreadyDeletedItem: "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
};
export type DeleteDatabaseTableField400ResponseErrorEnum = typeof DeleteDatabaseTableField400ResponseErrorEnum[keyof typeof DeleteDatabaseTableField400ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteGroup400Response
 */
export interface DeleteGroup400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteGroup400Response
     */
    'error'?: DeleteGroup400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteGroup400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteGroup400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly UserInvalidGroupPermissions: "ERROR_USER_INVALID_GROUP_PERMISSIONS";
    readonly CannotDeleteAlreadyDeletedItem: "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
};
export type DeleteGroup400ResponseErrorEnum = typeof DeleteGroup400ResponseErrorEnum[keyof typeof DeleteGroup400ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteRowComment400Response
 */
export interface DeleteRowComment400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteRowComment400Response
     */
    'error'?: DeleteRowComment400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteRowComment400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteRowComment400ResponseErrorEnum: {
    readonly InGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly CommentAuthor: "ERROR_USER_NOT_COMMENT_AUTHOR";
};
export type DeleteRowComment400ResponseErrorEnum = typeof DeleteRowComment400ResponseErrorEnum[keyof typeof DeleteRowComment400ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteRowComment404Response
 */
export interface DeleteRowComment404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteRowComment404Response
     */
    'error'?: DeleteRowComment404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteRowComment404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteRowComment404ResponseErrorEnum: {
    readonly TableDoesNotExist: "ERROR_TABLE_DOES_NOT_EXIST";
    readonly RowCommentDoesNotExist: "ERROR_ROW_COMMENT_DOES_NOT_EXIST";
};
export type DeleteRowComment404ResponseErrorEnum = typeof DeleteRowComment404ResponseErrorEnum[keyof typeof DeleteRowComment404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteSnapshot400Response
 */
export interface DeleteSnapshot400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteSnapshot400Response
     */
    'error'?: DeleteSnapshot400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteSnapshot400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteSnapshot400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly ApplicationOperationNotSupported: "ERROR_APPLICATION_OPERATION_NOT_SUPPORTED";
    readonly SnapshotIsBeingRestored: "ERROR_SNAPSHOT_IS_BEING_RESTORED";
    readonly SnapshotIsBeingDeleted: "ERROR_SNAPSHOT_IS_BEING_DELETED";
    readonly SnapshotOperationLimitExceeded: "ERROR_SNAPSHOT_OPERATION_LIMIT_EXCEEDED";
};
export type DeleteSnapshot400ResponseErrorEnum = typeof DeleteSnapshot400ResponseErrorEnum[keyof typeof DeleteSnapshot400ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteSnapshot404Response
 */
export interface DeleteSnapshot404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteSnapshot404Response
     */
    'error'?: DeleteSnapshot404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteSnapshot404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteSnapshot404ResponseErrorEnum: {
    readonly ErrorSnapshotDoesNotExist: "ERROR_SNAPSHOT_DOES_NOT_EXIST";
};
export type DeleteSnapshot404ResponseErrorEnum = typeof DeleteSnapshot404ResponseErrorEnum[keyof typeof DeleteSnapshot404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DeleteSubject400Response
 */
export interface DeleteSubject400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DeleteSubject400Response
     */
    'error'?: DeleteSubject400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DeleteSubject400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DeleteSubject400ResponseErrorEnum: {
    readonly ErrorCannotDeleteAlreadyDeletedItem: "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
};
export type DeleteSubject400ResponseErrorEnum = typeof DeleteSubject400ResponseErrorEnum[keyof typeof DeleteSubject400ResponseErrorEnum];
/**
 *
 * @export
 * @interface DispatchBuilderPageDataSource404Response
 */
export interface DispatchBuilderPageDataSource404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DispatchBuilderPageDataSource404Response
     */
    'error'?: DispatchBuilderPageDataSource404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DispatchBuilderPageDataSource404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DispatchBuilderPageDataSource404ResponseErrorEnum: {
    readonly DataSourceDoesNotExist: "ERROR_DATA_SOURCE_DOES_NOT_EXIST";
    readonly DataSourceImproperlyConfigured: "ERROR_DATA_SOURCE_IMPROPERLY_CONFIGURED";
    readonly InDispatchContext: "ERROR_IN_DISPATCH_CONTEXT";
    readonly DataDoesNotExist: "ERROR_DATA_DOES_NOT_EXIST";
};
export type DispatchBuilderPageDataSource404ResponseErrorEnum = typeof DispatchBuilderPageDataSource404ResponseErrorEnum[keyof typeof DispatchBuilderPageDataSource404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DispatchBuilderPageDataSources404Response
 */
export interface DispatchBuilderPageDataSources404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DispatchBuilderPageDataSources404Response
     */
    'error'?: DispatchBuilderPageDataSources404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DispatchBuilderPageDataSources404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DispatchBuilderPageDataSources404ResponseErrorEnum: {
    readonly DataSourceImproperlyConfigured: "ERROR_DATA_SOURCE_IMPROPERLY_CONFIGURED";
    readonly InDispatchContext: "ERROR_IN_DISPATCH_CONTEXT";
    readonly DataDoesNotExist: "ERROR_DATA_DOES_NOT_EXIST";
    readonly PageDoesNotExist: "ERROR_PAGE_DOES_NOT_EXIST";
};
export type DispatchBuilderPageDataSources404ResponseErrorEnum = typeof DispatchBuilderPageDataSources404ResponseErrorEnum[keyof typeof DispatchBuilderPageDataSources404ResponseErrorEnum];
/**
 *
 * @export
 * @interface DispatchBuilderPageWorkflowAction400Response
 */
export interface DispatchBuilderPageWorkflowAction400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DispatchBuilderPageWorkflowAction400Response
     */
    'error'?: DispatchBuilderPageWorkflowAction400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DispatchBuilderPageWorkflowAction400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DispatchBuilderPageWorkflowAction400ResponseErrorEnum: {
    readonly ErrorWorkflowActionCannotBeDispatched: "ERROR_WORKFLOW_ACTION_CANNOT_BE_DISPATCHED";
};
export type DispatchBuilderPageWorkflowAction400ResponseErrorEnum = typeof DispatchBuilderPageWorkflowAction400ResponseErrorEnum[keyof typeof DispatchBuilderPageWorkflowAction400ResponseErrorEnum];
/**
 * @type DomainTypeCreateDomain
 * @export
 */
export type DomainTypeCreateDomain = {
    type: 'custom';
} & CustomDomainCreateDomain | {
    type: 'sub_domain';
} & SubDomainCreateDomain;
/**
 * @type DomainTypeDomain
 * @export
 */
export type DomainTypeDomain = {
    type: 'custom';
} & CustomDomainDomain | {
    type: 'sub_domain';
} & SubDomainDomain;
/**
 *
 * @export
 * @interface DuplicateApplicationAsync400Response
 */
export interface DuplicateApplicationAsync400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DuplicateApplicationAsync400Response
     */
    'error'?: DuplicateApplicationAsync400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DuplicateApplicationAsync400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DuplicateApplicationAsync400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly ApplicationNotInGroup: "ERROR_APPLICATION_NOT_IN_GROUP";
    readonly MaxJobCountExceeded: "ERROR_MAX_JOB_COUNT_EXCEEDED";
};
export type DuplicateApplicationAsync400ResponseErrorEnum = typeof DuplicateApplicationAsync400ResponseErrorEnum[keyof typeof DuplicateApplicationAsync400ResponseErrorEnum];
/**
 *
 * @export
 * @interface DuplicateApplicationJobCreateJob
 */
export interface DuplicateApplicationJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof DuplicateApplicationJobCreateJob
     */
    'type': Type8b6Enum;
    /**
     * The application ID to duplicate.
     * @type {number}
     * @memberof DuplicateApplicationJobCreateJob
     */
    'application_id': number;
}
/**
 *
 * @export
 * @interface DuplicateApplicationJobJob
 */
export interface DuplicateApplicationJobJob {
    /**
     *
     * @type {number}
     * @memberof DuplicateApplicationJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof DuplicateApplicationJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof DuplicateApplicationJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof DuplicateApplicationJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof DuplicateApplicationJobJob
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {ApplicationApplication}
     * @memberof DuplicateApplicationJobJob
     */
    'original_application': ApplicationApplication;
    /**
     *
     * @type {ApplicationApplication}
     * @memberof DuplicateApplicationJobJob
     */
    'duplicated_application': ApplicationApplication;
}
/**
 *
 * @export
 * @interface DuplicateElement
 */
export interface DuplicateElement {
    /**
     * The duplicated elements.
     * @type {Array<Element>}
     * @memberof DuplicateElement
     */
    'elements': Array<Element>;
    /**
     * The duplicated workflow actions
     * @type {Array<BuilderWorkflowAction>}
     * @memberof DuplicateElement
     */
    'workflow_actions': Array<BuilderWorkflowAction>;
}
/**
 *
 * @export
 * @interface DuplicateFieldJobCreateJob
 */
export interface DuplicateFieldJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof DuplicateFieldJobCreateJob
     */
    'type': Type8b6Enum;
    /**
     * The ID of the field to duplicate.
     * @type {number}
     * @memberof DuplicateFieldJobCreateJob
     */
    'field_id': number;
    /**
     * Whether to duplicate the data of the field.
     * @type {boolean}
     * @memberof DuplicateFieldJobCreateJob
     */
    'duplicate_data'?: boolean;
}
/**
 *
 * @export
 * @interface DuplicateFieldJobJob
 */
export interface DuplicateFieldJobJob {
    /**
     *
     * @type {number}
     * @memberof DuplicateFieldJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof DuplicateFieldJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof DuplicateFieldJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof DuplicateFieldJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof DuplicateFieldJobJob
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {Field}
     * @memberof DuplicateFieldJobJob
     */
    'original_field': Field;
    /**
     *
     * @type {FieldSerializerWithRelatedFields}
     * @memberof DuplicateFieldJobJob
     */
    'duplicated_field': FieldSerializerWithRelatedFields;
}
/**
 *
 * @export
 * @interface DuplicatePageJobCreateJob
 */
export interface DuplicatePageJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof DuplicatePageJobCreateJob
     */
    'type': Type8b6Enum;
    /**
     * The ID of the page to duplicate.
     * @type {number}
     * @memberof DuplicatePageJobCreateJob
     */
    'page_id': number;
}
/**
 *
 * @export
 * @interface DuplicatePageJobJob
 */
export interface DuplicatePageJobJob {
    /**
     *
     * @type {number}
     * @memberof DuplicatePageJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof DuplicatePageJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof DuplicatePageJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof DuplicatePageJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof DuplicatePageJobJob
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {Page}
     * @memberof DuplicatePageJobJob
     */
    'original_page': Page;
    /**
     *
     * @type {Page}
     * @memberof DuplicatePageJobJob
     */
    'duplicated_page': Page;
}
/**
 *
 * @export
 * @interface DuplicateTableField400Response
 */
export interface DuplicateTableField400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof DuplicateTableField400Response
     */
    'error'?: DuplicateTableField400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof DuplicateTableField400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const DuplicateTableField400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly MaxJobCountExceeded: "ERROR_MAX_JOB_COUNT_EXCEEDED";
};
export type DuplicateTableField400ResponseErrorEnum = typeof DuplicateTableField400ResponseErrorEnum[keyof typeof DuplicateTableField400ResponseErrorEnum];
/**
 *
 * @export
 * @interface DuplicateTableJobCreateJob
 */
export interface DuplicateTableJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof DuplicateTableJobCreateJob
     */
    'type': Type8b6Enum;
    /**
     * The ID of the table to duplicate.
     * @type {number}
     * @memberof DuplicateTableJobCreateJob
     */
    'table_id': number;
}
/**
 *
 * @export
 * @interface DuplicateTableJobJob
 */
export interface DuplicateTableJobJob {
    /**
     *
     * @type {number}
     * @memberof DuplicateTableJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof DuplicateTableJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof DuplicateTableJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof DuplicateTableJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof DuplicateTableJobJob
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {Table}
     * @memberof DuplicateTableJobJob
     */
    'original_table': Table;
    /**
     *
     * @type {Table}
     * @memberof DuplicateTableJobJob
     */
    'duplicated_table': Table;
}
/**
 *
 * @export
 * @interface DurationFieldCreateField
 */
export interface DurationFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof DurationFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof DurationFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof DurationFieldCreateField
     */
    'description'?: string | null;
    /**
     * The format of the duration.  * `h:mm` - hours:minutes * `h:mm:ss` - hours:minutes:seconds * `h:mm:ss.s` - hours:minutes:seconds:deciseconds * `h:mm:ss.ss` - hours:minutes:seconds:centiseconds * `h:mm:ss.sss` - hours:minutes:seconds:milliseconds * `d h` - days:hours * `d h:mm` - days:hours:minutes * `d h:mm:ss` - days:hours:minutes:seconds * `d h mm` - days:hours:minutes:with_spaces * `d h mm ss` - days:hours:minutes:seconds:with_spaces
     * @type {DurationFormatEnum}
     * @memberof DurationFieldCreateField
     */
    'duration_format'?: DurationFormatEnum;
}
/**
 *
 * @export
 * @interface DurationFieldField
 */
export interface DurationFieldField {
    /**
     *
     * @type {number}
     * @memberof DurationFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof DurationFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof DurationFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof DurationFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof DurationFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof DurationFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof DurationFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof DurationFieldField
     */
    'description'?: string | null;
    /**
     * The format of the duration.  * `h:mm` - hours:minutes * `h:mm:ss` - hours:minutes:seconds * `h:mm:ss.s` - hours:minutes:seconds:deciseconds * `h:mm:ss.ss` - hours:minutes:seconds:centiseconds * `h:mm:ss.sss` - hours:minutes:seconds:milliseconds * `d h` - days:hours * `d h:mm` - days:hours:minutes * `d h:mm:ss` - days:hours:minutes:seconds * `d h mm` - days:hours:minutes:with_spaces * `d h mm ss` - days:hours:minutes:seconds:with_spaces
     * @type {DurationFormatEnum}
     * @memberof DurationFieldField
     */
    'duration_format'?: DurationFormatEnum;
}
/**
 *
 * @export
 * @interface DurationFieldFieldSerializerWithRelatedFields
 */
export interface DurationFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     * The format of the duration.  * `h:mm` - hours:minutes * `h:mm:ss` - hours:minutes:seconds * `h:mm:ss.s` - hours:minutes:seconds:deciseconds * `h:mm:ss.ss` - hours:minutes:seconds:centiseconds * `h:mm:ss.sss` - hours:minutes:seconds:milliseconds * `d h` - days:hours * `d h:mm` - days:hours:minutes * `d h:mm:ss` - days:hours:minutes:seconds * `d h mm` - days:hours:minutes:with_spaces * `d h mm ss` - days:hours:minutes:seconds:with_spaces
     * @type {DurationFormatEnum}
     * @memberof DurationFieldFieldSerializerWithRelatedFields
     */
    'duration_format'?: DurationFormatEnum;
}
/**
 *
 * @export
 * @interface DurationFieldUpdateField
 */
export interface DurationFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof DurationFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof DurationFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof DurationFieldUpdateField
     */
    'description'?: string | null;
    /**
     * The format of the duration.  * `h:mm` - hours:minutes * `h:mm:ss` - hours:minutes:seconds * `h:mm:ss.s` - hours:minutes:seconds:deciseconds * `h:mm:ss.ss` - hours:minutes:seconds:centiseconds * `h:mm:ss.sss` - hours:minutes:seconds:milliseconds * `d h` - days:hours * `d h:mm` - days:hours:minutes * `d h:mm:ss` - days:hours:minutes:seconds * `d h mm` - days:hours:minutes:with_spaces * `d h mm ss` - days:hours:minutes:seconds:with_spaces
     * @type {DurationFormatEnum}
     * @memberof DurationFieldUpdateField
     */
    'duration_format'?: DurationFormatEnum;
}
/**
 * * `h:mm` - hours:minutes * `h:mm:ss` - hours:minutes:seconds * `h:mm:ss.s` - hours:minutes:seconds:deciseconds * `h:mm:ss.ss` - hours:minutes:seconds:centiseconds * `h:mm:ss.sss` - hours:minutes:seconds:milliseconds * `d h` - days:hours * `d h:mm` - days:hours:minutes * `d h:mm:ss` - days:hours:minutes:seconds * `d h mm` - days:hours:minutes:with_spaces * `d h mm ss` - days:hours:minutes:seconds:with_spaces
 * @export
 * @enum {string}
 */
export declare const DurationFormatEnum: {
    readonly Hmm: "h:mm";
    readonly Hmmss: "h:mm:ss";
    readonly HmmssS: "h:mm:ss.s";
    readonly HmmssSs: "h:mm:ss.ss";
    readonly HmmssSss: "h:mm:ss.sss";
    readonly DH: "d h";
    readonly DHmm: "d h:mm";
    readonly DHmmss: "d h:mm:ss";
    readonly DHMm: "d h mm";
    readonly DHMmSs: "d h mm ss";
};
export type DurationFormatEnum = typeof DurationFormatEnum[keyof typeof DurationFormatEnum];
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface Element
 */
export interface Element {
    /**
     *
     * @type {number}
     * @memberof Element
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof Element
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof Element
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof Element
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof Element
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof Element
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof Element
     */
    'visibility'?: VisibilityEnum;
    /**
     * The theme overrides for this element
     * @type {any}
     * @memberof Element
     */
    'styles'?: any;
    /**
     * Top border color.
     * @type {string}
     * @memberof Element
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof Element
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof Element
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof Element
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof Element
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof Element
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof Element
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof Element
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof Element
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof Element
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof Element
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof Element
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof Element
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof Element
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof Element
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof Element
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof Element
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof Element
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof Element
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof Element
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof Element
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof Element
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof Element
     */
    'roles'?: any;
}
/**
 * @type ElementTypeCreateElement
 * @export
 */
export type ElementTypeCreateElement = {
    type: 'auth_form';
} & AuthFormElementCreateElement | {
    type: 'button';
} & ButtonElementCreateElement | {
    type: 'checkbox';
} & CheckboxElementCreateElement | {
    type: 'choice';
} & ChoiceElementCreateElement | {
    type: 'column';
} & ColumnElementCreateElement | {
    type: 'form_container';
} & FormContainerElementCreateElement | {
    type: 'heading';
} & HeadingElementCreateElement | {
    type: 'iframe';
} & IFrameElementCreateElement | {
    type: 'image';
} & ImageElementCreateElement | {
    type: 'input_text';
} & InputTextElementCreateElement | {
    type: 'link';
} & LinkElementCreateElement | {
    type: 'repeat';
} & RepeatElementCreateElement | {
    type: 'table';
} & TableElementCreateElement | {
    type: 'text';
} & TextElementCreateElement;
/**
 * @type ElementTypeElement
 * @export
 */
export type ElementTypeElement = {
    type: 'auth_form';
} & AuthFormElementElement | {
    type: 'button';
} & ButtonElementElement | {
    type: 'checkbox';
} & CheckboxElementElement | {
    type: 'choice';
} & ChoiceElementElement | {
    type: 'column';
} & ColumnElementElement | {
    type: 'form_container';
} & FormContainerElementElement | {
    type: 'heading';
} & HeadingElementElement | {
    type: 'iframe';
} & IFrameElementElement | {
    type: 'image';
} & ImageElementElement | {
    type: 'input_text';
} & InputTextElementElement | {
    type: 'link';
} & LinkElementElement | {
    type: 'repeat';
} & RepeatElementElement | {
    type: 'table';
} & TableElementElement | {
    type: 'text';
} & TextElementElement;
/**
 * @type ElementTypePublicElement
 * @export
 */
export type ElementTypePublicElement = {
    type: 'auth_form';
} & AuthFormElementPublicElement | {
    type: 'button';
} & ButtonElementPublicElement | {
    type: 'checkbox';
} & CheckboxElementPublicElement | {
    type: 'choice';
} & ChoiceElementPublicElement | {
    type: 'column';
} & ColumnElementPublicElement | {
    type: 'form_container';
} & FormContainerElementPublicElement | {
    type: 'heading';
} & HeadingElementPublicElement | {
    type: 'iframe';
} & IFrameElementPublicElement | {
    type: 'image';
} & ImageElementPublicElement | {
    type: 'input_text';
} & InputTextElementPublicElement | {
    type: 'link';
} & LinkElementPublicElement | {
    type: 'repeat';
} & RepeatElementPublicElement | {
    type: 'table';
} & TableElementPublicElement | {
    type: 'text';
} & TextElementPublicElement;
/**
 *
 * @export
 * @interface EmailFieldCreateField
 */
export interface EmailFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof EmailFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof EmailFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof EmailFieldCreateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface EmailFieldField
 */
export interface EmailFieldField {
    /**
     *
     * @type {number}
     * @memberof EmailFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof EmailFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof EmailFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof EmailFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof EmailFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof EmailFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof EmailFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof EmailFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface EmailFieldFieldSerializerWithRelatedFields
 */
export interface EmailFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof EmailFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof EmailFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof EmailFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof EmailFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof EmailFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof EmailFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof EmailFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof EmailFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof EmailFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface EmailFieldUpdateField
 */
export interface EmailFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof EmailFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof EmailFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof EmailFieldUpdateField
     */
    'description'?: string | null;
}
/**
 * * `instant` - instant * `daily` - daily * `weekly` - weekly * `never` - never
 * @export
 * @enum {string}
 */
export declare const EmailNotificationFrequencyEnum: {
    readonly Instant: "instant";
    readonly Daily: "daily";
    readonly Weekly: "weekly";
    readonly Never: "never";
};
export type EmailNotificationFrequencyEnum = typeof EmailNotificationFrequencyEnum[keyof typeof EmailNotificationFrequencyEnum];
/**
 *
 * @export
 * @interface EmailTester400Response
 */
export interface EmailTester400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof EmailTester400Response
     */
    'error'?: EmailTester400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof EmailTester400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const EmailTester400ResponseErrorEnum: {
    readonly ErrorRequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
};
export type EmailTester400ResponseErrorEnum = typeof EmailTester400ResponseErrorEnum[keyof typeof EmailTester400ResponseErrorEnum];
/**
 * @type EmailTester400ResponseDetail
 * @export
 */
export type EmailTester400ResponseDetail = object | string;
/**
 *
 * @export
 * @interface EmailTesterRequest
 */
export interface EmailTesterRequest {
    /**
     *
     * @type {string}
     * @memberof EmailTesterRequest
     */
    'target_email': string;
}
/**
 *
 * @export
 * @interface EmailTesterResponse
 */
export interface EmailTesterResponse {
    /**
     * Whether or not the test email was sent successfully.
     * @type {boolean}
     * @memberof EmailTesterResponse
     */
    'succeeded': boolean;
    /**
     * The full stack trace and error message if the test email failed.
     * @type {string}
     * @memberof EmailTesterResponse
     */
    'error_stack'?: string | null;
    /**
     * The type of error that occurred if the test email failed.
     * @type {string}
     * @memberof EmailTesterResponse
     */
    'error_type'?: string | null;
    /**
     * A short message describing the error that occured if the test email failed
     * @type {string}
     * @memberof EmailTesterResponse
     */
    'error'?: string | null;
}
/**
 * * `no_verification` - no_verification * `recommended` - recommended * `enforced` - enforced
 * @export
 * @enum {string}
 */
export declare const EmailVerificationEnum: {
    readonly NoVerification: "no_verification";
    readonly Recommended: "recommended";
    readonly Enforced: "enforced";
};
export type EmailVerificationEnum = typeof EmailVerificationEnum[keyof typeof EmailVerificationEnum];
/**
 * * `rows.created` - rows.created * `row.created` - row.created * `rows.updated` - rows.updated * `row.updated` - row.updated * `rows.deleted` - rows.deleted * `row.deleted` - row.deleted
 * @export
 * @enum {string}
 */
export declare const EventTypeEnum: {
    readonly RowsCreated: "rows.created";
    readonly RowCreated: "row.created";
    readonly RowsUpdated: "rows.updated";
    readonly RowUpdated: "row.updated";
    readonly RowsDeleted: "rows.deleted";
    readonly RowDeleted: "row.deleted";
};
export type EventTypeEnum = typeof EventTypeEnum[keyof typeof EventTypeEnum];
/**
 * * `rows.created` - rows.created * `rows.updated` - rows.updated * `rows.deleted` - rows.deleted
 * @export
 * @enum {string}
 */
export declare const EventTypesEnum: {
    readonly Created: "rows.created";
    readonly Updated: "rows.updated";
    readonly Deleted: "rows.deleted";
};
export type EventTypesEnum = typeof EventTypesEnum[keyof typeof EventTypesEnum];
/**
 * * `rows.created` - rows.created * `row.created` - row.created * `rows.updated` - rows.updated * `row.updated` - row.updated * `rows.deleted` - rows.deleted * `row.deleted` - row.deleted
 * @export
 * @enum {string}
 */
export declare const Events29bEnum: {
    readonly RowsCreated: "rows.created";
    readonly RowCreated: "row.created";
    readonly RowsUpdated: "rows.updated";
    readonly RowUpdated: "row.updated";
    readonly RowsDeleted: "rows.deleted";
    readonly RowDeleted: "row.deleted";
};
export type Events29bEnum = typeof Events29bEnum[keyof typeof Events29bEnum];
/**
 *
 * @export
 * @interface ExampleBatchRowsRequest
 */
export interface ExampleBatchRowsRequest {
    /**
     *
     * @type {Array<ExampleRowRequestSerializerWithUserFieldNames>}
     * @memberof ExampleBatchRowsRequest
     */
    'items': Array<ExampleRowRequestSerializerWithUserFieldNames>;
}
/**
 *
 * @export
 * @interface ExampleBatchRowsResponse
 */
export interface ExampleBatchRowsResponse {
    /**
     *
     * @type {Array<ExampleRowResponseSerializerWithUserFieldNames>}
     * @memberof ExampleBatchRowsResponse
     */
    'items': Array<ExampleRowResponseSerializerWithUserFieldNames>;
}
/**
 *
 * @export
 * @interface ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
 */
export interface ExampleBatchUpdateRowRequestSerializerWithUserFieldNames {
    /**
     * The unique identifier of the row in the table.
     * @type {number}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'id': number;
    /**
     * This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_1'?: string | null;
    /**
     * This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_2'?: string | null;
    /**
     * This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_3'?: string | null;
    /**
     * This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_4'?: string | null;
    /**
     * This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_5'?: string | null;
    /**
     * This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {number}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_6'?: number;
    /**
     * This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {boolean}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_7'?: boolean;
    /**
     * This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_8'?: string | null;
    /**
     * This field represents the `duration` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. The provided value can be a string in one of the available formats or a number representing the duration in seconds. In any case, the value will be rounded to match the field\'s duration format.
     * @type {number}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_13'?: number | null;
    /**
     * This field represents the `link_row` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `array` containing the ids or the names of the related rows. A name is the value of the primary key of the related row. This field also accepts a string with names separated by a comma or an array of row names. You can also provide a unique row Id.The response contains a list of objects containing the `id` and the primary field\'s `value` as a string for display purposes.
     * @type {Array<any>}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_14'?: Array<any>;
    /**
     * This field represents the `file` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.
     * @type {Array<any>}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_15'?: Array<any> | null;
    /**
     * This field represents the `single_select` field. The number in field_16 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.
     * @type {number}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_16'?: number | null;
    /**
     * This field represents the `multiple_select` field. The number in field_17 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. You can also send a list of option names in which case the option are searched by name. The first one that matches is used. This field also accepts a string with names separated by a comma or an array of file names. The response represents chosen field, but also the value and color is exposed.
     * @type {Array<number | null>}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_17'?: Array<number | null>;
    /**
     * This field represents the `phone_number` field. The number in field_18 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_18'?: string | null;
    /**
     * This field represents the `multiple_collaborators` field. The number in field_23 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts a list of objects representing the chosen collaborators through the object\'s `id` property. The id is Baserow user id. The response objects also contains the collaborator name directly along with its id.
     * @type {Array<Collaborator>}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_23'?: Array<Collaborator>;
    /**
     * This field represents the `password` field. The number in field_26 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Allows setting a write only password value. Providing a string will set the password, `null` will unset it, `true` will be ignored. The response will respond with `true` is a password is set, but will never expose the password itself.
     * @type {string}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_26'?: string | null;
    /**
     * This field represents the `ai` field. The number in field_27 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Holds a text value that is generated by a generative AI model using a dynamic prompt.
     * @type {string}
     * @memberof ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_27'?: string | null;
}
/**
 *
 * @export
 * @interface ExampleRowRequest
 */
export interface ExampleRowRequest {
    /**
     * This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowRequest
     */
    'field_1'?: string | null;
    /**
     * This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowRequest
     */
    'field_2'?: string | null;
    /**
     * This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowRequest
     */
    'field_3'?: string | null;
    /**
     * This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowRequest
     */
    'field_4'?: string | null;
    /**
     * This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowRequest
     */
    'field_5'?: string | null;
    /**
     * This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field.
     * @type {number}
     * @memberof ExampleRowRequest
     */
    'field_6'?: number;
    /**
     * This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field.
     * @type {boolean}
     * @memberof ExampleRowRequest
     */
    'field_7'?: boolean;
    /**
     * This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowRequest
     */
    'field_8'?: string | null;
    /**
     * This field represents the `duration` field. The number in field_13 is in a normal request or response the id of the field. The provided value can be a string in one of the available formats or a number representing the duration in seconds. In any case, the value will be rounded to match the field\'s duration format.
     * @type {number}
     * @memberof ExampleRowRequest
     */
    'field_13'?: number | null;
    /**
     * This field represents the `link_row` field. The number in field_14 is in a normal request or response the id of the field. This field accepts an `array` containing the ids or the names of the related rows. A name is the value of the primary key of the related row. This field also accepts a string with names separated by a comma or an array of row names. You can also provide a unique row Id.The response contains a list of objects containing the `id` and the primary field\'s `value` as a string for display purposes.
     * @type {Array<any>}
     * @memberof ExampleRowRequest
     */
    'field_14'?: Array<any>;
    /**
     * This field represents the `file` field. The number in field_15 is in a normal request or response the id of the field. This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.
     * @type {Array<any>}
     * @memberof ExampleRowRequest
     */
    'field_15'?: Array<any> | null;
    /**
     * This field represents the `single_select` field. The number in field_16 is in a normal request or response the id of the field. This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.
     * @type {number}
     * @memberof ExampleRowRequest
     */
    'field_16'?: number | null;
    /**
     * This field represents the `multiple_select` field. The number in field_17 is in a normal request or response the id of the field. This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. You can also send a list of option names in which case the option are searched by name. The first one that matches is used. This field also accepts a string with names separated by a comma or an array of file names. The response represents chosen field, but also the value and color is exposed.
     * @type {Array<number | null>}
     * @memberof ExampleRowRequest
     */
    'field_17'?: Array<number | null>;
    /**
     * This field represents the `phone_number` field. The number in field_18 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowRequest
     */
    'field_18'?: string | null;
    /**
     * This field represents the `multiple_collaborators` field. The number in field_23 is in a normal request or response the id of the field. This field accepts a list of objects representing the chosen collaborators through the object\'s `id` property. The id is Baserow user id. The response objects also contains the collaborator name directly along with its id.
     * @type {Array<Collaborator>}
     * @memberof ExampleRowRequest
     */
    'field_23'?: Array<Collaborator>;
    /**
     * This field represents the `password` field. The number in field_26 is in a normal request or response the id of the field. Allows setting a write only password value. Providing a string will set the password, `null` will unset it, `true` will be ignored. The response will respond with `true` is a password is set, but will never expose the password itself.
     * @type {string}
     * @memberof ExampleRowRequest
     */
    'field_26'?: string | null;
    /**
     * This field represents the `ai` field. The number in field_27 is in a normal request or response the id of the field. Holds a text value that is generated by a generative AI model using a dynamic prompt.
     * @type {string}
     * @memberof ExampleRowRequest
     */
    'field_27'?: string | null;
}
/**
 *
 * @export
 * @interface ExampleRowRequestSerializerWithUserFieldNames
 */
export interface ExampleRowRequestSerializerWithUserFieldNames {
    /**
     * This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_1'?: string | null;
    /**
     * This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_2'?: string | null;
    /**
     * This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_3'?: string | null;
    /**
     * This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_4'?: string | null;
    /**
     * This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_5'?: string | null;
    /**
     * This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {number}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_6'?: number;
    /**
     * This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {boolean}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_7'?: boolean;
    /**
     * This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_8'?: string | null;
    /**
     * This field represents the `duration` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. The provided value can be a string in one of the available formats or a number representing the duration in seconds. In any case, the value will be rounded to match the field\'s duration format.
     * @type {number}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_13'?: number | null;
    /**
     * This field represents the `link_row` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `array` containing the ids or the names of the related rows. A name is the value of the primary key of the related row. This field also accepts a string with names separated by a comma or an array of row names. You can also provide a unique row Id.The response contains a list of objects containing the `id` and the primary field\'s `value` as a string for display purposes.
     * @type {Array<any>}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_14'?: Array<any>;
    /**
     * This field represents the `file` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.
     * @type {Array<any>}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_15'?: Array<any> | null;
    /**
     * This field represents the `single_select` field. The number in field_16 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.
     * @type {number}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_16'?: number | null;
    /**
     * This field represents the `multiple_select` field. The number in field_17 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. You can also send a list of option names in which case the option are searched by name. The first one that matches is used. This field also accepts a string with names separated by a comma or an array of file names. The response represents chosen field, but also the value and color is exposed.
     * @type {Array<number | null>}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_17'?: Array<number | null>;
    /**
     * This field represents the `phone_number` field. The number in field_18 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_18'?: string | null;
    /**
     * This field represents the `multiple_collaborators` field. The number in field_23 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts a list of objects representing the chosen collaborators through the object\'s `id` property. The id is Baserow user id. The response objects also contains the collaborator name directly along with its id.
     * @type {Array<Collaborator>}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_23'?: Array<Collaborator>;
    /**
     * This field represents the `password` field. The number in field_26 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Allows setting a write only password value. Providing a string will set the password, `null` will unset it, `true` will be ignored. The response will respond with `true` is a password is set, but will never expose the password itself.
     * @type {string}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_26'?: string | null;
    /**
     * This field represents the `ai` field. The number in field_27 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Holds a text value that is generated by a generative AI model using a dynamic prompt.
     * @type {string}
     * @memberof ExampleRowRequestSerializerWithUserFieldNames
     */
    'field_27'?: string | null;
}
/**
 *
 * @export
 * @interface ExampleRowResponse
 */
export interface ExampleRowResponse {
    /**
     * The unique identifier of the row in the table.
     * @type {number}
     * @memberof ExampleRowResponse
     */
    'id': number;
    /**
     * Indicates the position of the row, lowest first and highest last.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'order'?: string;
    /**
     * This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_1'?: string | null;
    /**
     * This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_2'?: string | null;
    /**
     * This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_3'?: string | null;
    /**
     * This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_4'?: string | null;
    /**
     * This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_5'?: string | null;
    /**
     * This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field.
     * @type {number}
     * @memberof ExampleRowResponse
     */
    'field_6'?: number;
    /**
     * This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field.
     * @type {boolean}
     * @memberof ExampleRowResponse
     */
    'field_7'?: boolean;
    /**
     * This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_8'?: string | null;
    /**
     * This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_9'?: string;
    /**
     * This field represents the `last_modified_by` field. The number in field_10 is in a normal request or response the id of the field.
     * @type {Collaborator}
     * @memberof ExampleRowResponse
     */
    'field_10'?: Collaborator;
    /**
     * This field represents the `created_on` field. The number in field_11 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_11'?: string;
    /**
     * This field represents the `created_by` field. The number in field_12 is in a normal request or response the id of the field.
     * @type {Collaborator}
     * @memberof ExampleRowResponse
     */
    'field_12'?: Collaborator;
    /**
     * This field represents the `duration` field. The number in field_13 is in a normal request or response the id of the field. The provided value can be a string in one of the available formats or a number representing the duration in seconds. In any case, the value will be rounded to match the field\'s duration format.
     * @type {number}
     * @memberof ExampleRowResponse
     */
    'field_13'?: number | null;
    /**
     * This field represents the `link_row` field. The number in field_14 is in a normal request or response the id of the field. This field accepts an `array` containing the ids or the names of the related rows. A name is the value of the primary key of the related row. This field also accepts a string with names separated by a comma or an array of row names. You can also provide a unique row Id.The response contains a list of objects containing the `id` and the primary field\'s `value` as a string for display purposes.
     * @type {Array<LinkRowValue>}
     * @memberof ExampleRowResponse
     */
    'field_14'?: Array<LinkRowValue>;
    /**
     * This field represents the `file` field. The number in field_15 is in a normal request or response the id of the field. This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.
     * @type {Array<FileFieldResponse>}
     * @memberof ExampleRowResponse
     */
    'field_15'?: Array<FileFieldResponse>;
    /**
     * This field represents the `single_select` field. The number in field_16 is in a normal request or response the id of the field. This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.
     * @type {SelectOption}
     * @memberof ExampleRowResponse
     */
    'field_16'?: SelectOption | null;
    /**
     * This field represents the `multiple_select` field. The number in field_17 is in a normal request or response the id of the field. This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. You can also send a list of option names in which case the option are searched by name. The first one that matches is used. This field also accepts a string with names separated by a comma or an array of file names. The response represents chosen field, but also the value and color is exposed.
     * @type {Array<SelectOption>}
     * @memberof ExampleRowResponse
     */
    'field_17'?: Array<SelectOption> | null;
    /**
     * This field represents the `phone_number` field. The number in field_18 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_18'?: string | null;
    /**
     * This field represents the `formula` field. The number in field_19 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_19'?: string | null;
    /**
     * This field represents the `count` field. The number in field_20 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_20'?: string | null;
    /**
     * This field represents the `rollup` field. The number in field_21 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_21'?: string | null;
    /**
     * This field represents the `lookup` field. The number in field_22 is in a normal request or response the id of the field.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_22'?: string | null;
    /**
     * This field represents the `multiple_collaborators` field. The number in field_23 is in a normal request or response the id of the field. This field accepts a list of objects representing the chosen collaborators through the object\'s `id` property. The id is Baserow user id. The response objects also contains the collaborator name directly along with its id.
     * @type {Array<Collaborator>}
     * @memberof ExampleRowResponse
     */
    'field_23'?: Array<Collaborator>;
    /**
     * This field represents the `uuid` field. The number in field_24 is in a normal request or response the id of the field. Contains a unique and persistent UUID for every row.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_24'?: string;
    /**
     * This field represents the `autonumber` field. The number in field_25 is in a normal request or response the id of the field. Contains a unique and persistent incremental integer number for every row.
     * @type {number}
     * @memberof ExampleRowResponse
     */
    'field_25'?: number;
    /**
     * This field represents the `password` field. The number in field_26 is in a normal request or response the id of the field. Allows setting a write only password value. Providing a string will set the password, `null` will unset it, `true` will be ignored. The response will respond with `true` is a password is set, but will never expose the password itself.
     * @type {boolean}
     * @memberof ExampleRowResponse
     */
    'field_26'?: boolean;
    /**
     * This field represents the `ai` field. The number in field_27 is in a normal request or response the id of the field. Holds a text value that is generated by a generative AI model using a dynamic prompt.
     * @type {string}
     * @memberof ExampleRowResponse
     */
    'field_27'?: string | null;
}
/**
 *
 * @export
 * @interface ExampleRowResponseSerializerWithUserFieldNames
 */
export interface ExampleRowResponseSerializerWithUserFieldNames {
    /**
     * The unique identifier of the row in the table.
     * @type {number}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'id': number;
    /**
     * Indicates the position of the row, lowest first and highest last.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'order'?: string;
    /**
     * This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_1'?: string | null;
    /**
     * This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_2'?: string | null;
    /**
     * This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_3'?: string | null;
    /**
     * This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_4'?: string | null;
    /**
     * This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_5'?: string | null;
    /**
     * This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {number}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_6'?: number;
    /**
     * This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {boolean}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_7'?: boolean;
    /**
     * This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_8'?: string | null;
    /**
     * This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_9'?: string;
    /**
     * This field represents the `last_modified_by` field. The number in field_10 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {Collaborator}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_10'?: Collaborator;
    /**
     * This field represents the `created_on` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_11'?: string;
    /**
     * This field represents the `created_by` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {Collaborator}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_12'?: Collaborator;
    /**
     * This field represents the `duration` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. The provided value can be a string in one of the available formats or a number representing the duration in seconds. In any case, the value will be rounded to match the field\'s duration format.
     * @type {number}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_13'?: number | null;
    /**
     * This field represents the `link_row` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `array` containing the ids or the names of the related rows. A name is the value of the primary key of the related row. This field also accepts a string with names separated by a comma or an array of row names. You can also provide a unique row Id.The response contains a list of objects containing the `id` and the primary field\'s `value` as a string for display purposes.
     * @type {Array<LinkRowValue>}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_14'?: Array<LinkRowValue>;
    /**
     * This field represents the `file` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.
     * @type {Array<FileFieldResponse>}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_15'?: Array<FileFieldResponse>;
    /**
     * This field represents the `single_select` field. The number in field_16 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.
     * @type {SelectOption}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_16'?: SelectOption | null;
    /**
     * This field represents the `multiple_select` field. The number in field_17 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. You can also send a list of option names in which case the option are searched by name. The first one that matches is used. This field also accepts a string with names separated by a comma or an array of file names. The response represents chosen field, but also the value and color is exposed.
     * @type {Array<SelectOption>}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_17'?: Array<SelectOption> | null;
    /**
     * This field represents the `phone_number` field. The number in field_18 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_18'?: string | null;
    /**
     * This field represents the `formula` field. The number in field_19 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_19'?: string | null;
    /**
     * This field represents the `count` field. The number in field_20 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_20'?: string | null;
    /**
     * This field represents the `rollup` field. The number in field_21 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_21'?: string | null;
    /**
     * This field represents the `lookup` field. The number in field_22 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_22'?: string | null;
    /**
     * This field represents the `multiple_collaborators` field. The number in field_23 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts a list of objects representing the chosen collaborators through the object\'s `id` property. The id is Baserow user id. The response objects also contains the collaborator name directly along with its id.
     * @type {Array<Collaborator>}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_23'?: Array<Collaborator>;
    /**
     * This field represents the `uuid` field. The number in field_24 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Contains a unique and persistent UUID for every row.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_24'?: string;
    /**
     * This field represents the `autonumber` field. The number in field_25 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Contains a unique and persistent incremental integer number for every row.
     * @type {number}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_25'?: number;
    /**
     * This field represents the `password` field. The number in field_26 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Allows setting a write only password value. Providing a string will set the password, `null` will unset it, `true` will be ignored. The response will respond with `true` is a password is set, but will never expose the password itself.
     * @type {boolean}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_26'?: boolean;
    /**
     * This field represents the `ai` field. The number in field_27 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Holds a text value that is generated by a generative AI model using a dynamic prompt.
     * @type {string}
     * @memberof ExampleRowResponseSerializerWithUserFieldNames
     */
    'field_27'?: string | null;
}
/**
 * @type Export
 * @export
 */
export type Export = {
    exporter_type: 'csv';
} & CsvExporterOptions | {
    exporter_type: 'json';
} & BaseExporterOptions | {
    exporter_type: 'xml';
} & BaseExporterOptions;
/**
 * * `utf-8` - utf-8 * `iso-8859-6` - iso-8859-6 * `windows-1256` - windows-1256 * `iso-8859-4` - iso-8859-4 * `windows-1257` - windows-1257 * `iso-8859-14` - iso-8859-14 * `iso-8859-2` - iso-8859-2 * `windows-1250` - windows-1250 * `gbk` - gbk * `gb18030` - gb18030 * `big5` - big5 * `koi8-r` - koi8-r * `koi8-u` - koi8-u * `iso-8859-5` - iso-8859-5 * `windows-1251` - windows-1251 * `x-mac-cyrillic` - mac-cyrillic * `iso-8859-7` - iso-8859-7 * `windows-1253` - windows-1253 * `iso-8859-8` - iso-8859-8 * `windows-1255` - windows-1255 * `euc-jp` - euc-jp * `iso-2022-jp` - iso-2022-jp * `shift-jis` - shift-jis * `euc-kr` - euc-kr * `macintosh` - macintosh * `iso-8859-10` - iso-8859-10 * `iso-8859-16` - iso-8859-16 * `windows-874` - cp874 * `windows-1254` - windows-1254 * `windows-1258` - windows-1258 * `iso-8859-1` - iso-8859-1 * `windows-1252` - windows-1252 * `iso-8859-3` - iso-8859-3
 * @export
 * @enum {string}
 */
export declare const ExportCharsetEnum: {
    readonly Utf8: "utf-8";
    readonly Iso88596: "iso-8859-6";
    readonly Windows1256: "windows-1256";
    readonly Iso88594: "iso-8859-4";
    readonly Windows1257: "windows-1257";
    readonly Iso885914: "iso-8859-14";
    readonly Iso88592: "iso-8859-2";
    readonly Windows1250: "windows-1250";
    readonly Gbk: "gbk";
    readonly Gb18030: "gb18030";
    readonly Big5: "big5";
    readonly Koi8R: "koi8-r";
    readonly Koi8U: "koi8-u";
    readonly Iso88595: "iso-8859-5";
    readonly Windows1251: "windows-1251";
    readonly XMacCyrillic: "x-mac-cyrillic";
    readonly Iso88597: "iso-8859-7";
    readonly Windows1253: "windows-1253";
    readonly Iso88598: "iso-8859-8";
    readonly Windows1255: "windows-1255";
    readonly EucJp: "euc-jp";
    readonly Iso2022Jp: "iso-2022-jp";
    readonly ShiftJis: "shift-jis";
    readonly EucKr: "euc-kr";
    readonly Macintosh: "macintosh";
    readonly Iso885910: "iso-8859-10";
    readonly Iso885916: "iso-8859-16";
    readonly Windows874: "windows-874";
    readonly Windows1254: "windows-1254";
    readonly Windows1258: "windows-1258";
    readonly Iso88591: "iso-8859-1";
    readonly Windows1252: "windows-1252";
    readonly Iso88593: "iso-8859-3";
};
export type ExportCharsetEnum = typeof ExportCharsetEnum[keyof typeof ExportCharsetEnum];
/**
 * When mixed in to a model serializer for an ExportJob this will add an url field with the actual usable url of the export job\'s file (if it has one).
 * @export
 * @interface ExportJob
 */
export interface ExportJob {
    /**
     *
     * @type {number}
     * @memberof ExportJob
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof ExportJob
     */
    'table'?: number | null;
    /**
     *
     * @type {number}
     * @memberof ExportJob
     */
    'view'?: number | null;
    /**
     *
     * @type {string}
     * @memberof ExportJob
     */
    'exporter_type': string;
    /**
     *
     * @type {StateEnum}
     * @memberof ExportJob
     */
    'state': StateEnum;
    /**
     * DEPRECATED: Use state instead
     * @type {string}
     * @memberof ExportJob
     */
    'status': string;
    /**
     *
     * @type {string}
     * @memberof ExportJob
     */
    'exported_file_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ExportJob
     */
    'created_at': string;
    /**
     *
     * @type {number}
     * @memberof ExportJob
     */
    'progress_percentage'?: number;
    /**
     *
     * @type {string}
     * @memberof ExportJob
     */
    'url': string;
}
/**
 *
 * @export
 * @interface ExportTable400Response
 */
export interface ExportTable400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ExportTable400Response
     */
    'error'?: ExportTable400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ExportTable400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ExportTable400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly TableOnlyExportUnsupported: "ERROR_TABLE_ONLY_EXPORT_UNSUPPORTED";
    readonly ViewUnsupportedForExportType: "ERROR_VIEW_UNSUPPORTED_FOR_EXPORT_TYPE";
    readonly ViewNotInTable: "ERROR_VIEW_NOT_IN_TABLE";
};
export type ExportTable400ResponseErrorEnum = typeof ExportTable400ResponseErrorEnum[keyof typeof ExportTable400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ExportTable404Response
 */
export interface ExportTable404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ExportTable404Response
     */
    'error'?: ExportTable404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ExportTable404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ExportTable404ResponseErrorEnum: {
    readonly TableDoesNotExist: "ERROR_TABLE_DOES_NOT_EXIST";
    readonly ViewDoesNotExist: "ERROR_VIEW_DOES_NOT_EXIST";
};
export type ExportTable404ResponseErrorEnum = typeof ExportTable404ResponseErrorEnum[keyof typeof ExportTable404ResponseErrorEnum];
/**
 * * `csv` - csv * `json` - json * `xml` - xml
 * @export
 * @enum {string}
 */
export declare const ExporterTypeEnum: {
    readonly Csv: "csv";
    readonly Json: "json";
    readonly Xml: "xml";
};
export type ExporterTypeEnum = typeof ExporterTypeEnum[keyof typeof ExporterTypeEnum];
/**
 *
 * @export
 * @interface FacebookAuthProviderModelAuthProvider
 */
export interface FacebookAuthProviderModelAuthProvider {
    /**
     *
     * @type {number}
     * @memberof FacebookAuthProviderModelAuthProvider
     */
    'id': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof FacebookAuthProviderModelAuthProvider
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof FacebookAuthProviderModelAuthProvider
     */
    'domain'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FacebookAuthProviderModelAuthProvider
     */
    'enabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FacebookAuthProviderModelAuthProvider
     */
    'name': string;
    /**
     * App ID, or consumer key
     * @type {string}
     * @memberof FacebookAuthProviderModelAuthProvider
     */
    'client_id': string;
    /**
     * API secret, client secret, or consumer secret
     * @type {string}
     * @memberof FacebookAuthProviderModelAuthProvider
     */
    'secret': string;
}
/**
 *
 * @export
 * @interface Field
 */
export interface Field {
    /**
     *
     * @type {number}
     * @memberof Field
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof Field
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof Field
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof Field
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof Field
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof Field
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof Field
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof Field
     */
    'description'?: string | null;
}
/**
 * @type FieldCreateField
 * @export
 */
export type FieldCreateField = {
    type: 'ai';
} & AIFieldCreateField | {
    type: 'autonumber';
} & AutonumberFieldCreateField | {
    type: 'boolean';
} & BooleanFieldCreateField | {
    type: 'count';
} & CountFieldCreateField | {
    type: 'created_by';
} & CreatedByFieldCreateField | {
    type: 'created_on';
} & CreatedOnFieldCreateField | {
    type: 'date';
} & DateFieldCreateField | {
    type: 'duration';
} & DurationFieldCreateField | {
    type: 'email';
} & EmailFieldCreateField | {
    type: 'file';
} & FileFieldCreateField | {
    type: 'formula';
} & FormulaFieldCreateField | {
    type: 'last_modified';
} & LastModifiedFieldCreateField | {
    type: 'last_modified_by';
} & LastModifiedByFieldCreateField | {
    type: 'link_row';
} & LinkRowFieldCreateField | {
    type: 'long_text';
} & LongTextFieldCreateField | {
    type: 'lookup';
} & LookupFieldCreateField | {
    type: 'multiple_collaborators';
} & MultipleCollaboratorsFieldCreateField | {
    type: 'multiple_select';
} & MultipleSelectFieldCreateField | {
    type: 'number';
} & NumberFieldCreateField | {
    type: 'password';
} & PasswordFieldCreateField | {
    type: 'phone_number';
} & PhoneNumberFieldCreateField | {
    type: 'rating';
} & RatingFieldCreateField | {
    type: 'rollup';
} & RollupFieldCreateField | {
    type: 'single_select';
} & SingleSelectFieldCreateField | {
    type: 'text';
} & TextFieldCreateField | {
    type: 'url';
} & URLFieldCreateField | {
    type: 'uuid';
} & UUIDFieldCreateField;
/**
 * @type FieldField
 * @export
 */
export type FieldField = {
    type: 'ai';
} & AIFieldField | {
    type: 'autonumber';
} & AutonumberFieldField | {
    type: 'boolean';
} & BooleanFieldField | {
    type: 'count';
} & CountFieldField | {
    type: 'created_by';
} & CreatedByFieldField | {
    type: 'created_on';
} & CreatedOnFieldField | {
    type: 'date';
} & DateFieldField | {
    type: 'duration';
} & DurationFieldField | {
    type: 'email';
} & EmailFieldField | {
    type: 'file';
} & FileFieldField | {
    type: 'formula';
} & FormulaFieldField | {
    type: 'last_modified';
} & LastModifiedFieldField | {
    type: 'last_modified_by';
} & LastModifiedByFieldField | {
    type: 'link_row';
} & LinkRowFieldField | {
    type: 'long_text';
} & LongTextFieldField | {
    type: 'lookup';
} & LookupFieldField | {
    type: 'multiple_collaborators';
} & MultipleCollaboratorsFieldField | {
    type: 'multiple_select';
} & MultipleSelectFieldField | {
    type: 'number';
} & NumberFieldField | {
    type: 'password';
} & PasswordFieldField | {
    type: 'phone_number';
} & PhoneNumberFieldField | {
    type: 'rating';
} & RatingFieldField | {
    type: 'rollup';
} & RollupFieldField | {
    type: 'single_select';
} & SingleSelectFieldField | {
    type: 'text';
} & TextFieldField | {
    type: 'url';
} & URLFieldField | {
    type: 'uuid';
} & UUIDFieldField;
/**
 * @type FieldFieldSerializerWithRelatedFields
 * @export
 */
export type FieldFieldSerializerWithRelatedFields = {
    type: 'ai';
} & AIFieldFieldSerializerWithRelatedFields | {
    type: 'autonumber';
} & AutonumberFieldFieldSerializerWithRelatedFields | {
    type: 'boolean';
} & BooleanFieldFieldSerializerWithRelatedFields | {
    type: 'count';
} & CountFieldFieldSerializerWithRelatedFields | {
    type: 'created_by';
} & CreatedByFieldFieldSerializerWithRelatedFields | {
    type: 'created_on';
} & CreatedOnFieldFieldSerializerWithRelatedFields | {
    type: 'date';
} & DateFieldFieldSerializerWithRelatedFields | {
    type: 'duration';
} & DurationFieldFieldSerializerWithRelatedFields | {
    type: 'email';
} & EmailFieldFieldSerializerWithRelatedFields | {
    type: 'file';
} & FileFieldFieldSerializerWithRelatedFields | {
    type: 'formula';
} & FormulaFieldFieldSerializerWithRelatedFields | {
    type: 'last_modified';
} & LastModifiedFieldFieldSerializerWithRelatedFields | {
    type: 'last_modified_by';
} & LastModifiedByFieldFieldSerializerWithRelatedFields | {
    type: 'link_row';
} & LinkRowFieldFieldSerializerWithRelatedFields | {
    type: 'long_text';
} & LongTextFieldFieldSerializerWithRelatedFields | {
    type: 'lookup';
} & LookupFieldFieldSerializerWithRelatedFields | {
    type: 'multiple_collaborators';
} & MultipleCollaboratorsFieldFieldSerializerWithRelatedFields | {
    type: 'multiple_select';
} & MultipleSelectFieldFieldSerializerWithRelatedFields | {
    type: 'number';
} & NumberFieldFieldSerializerWithRelatedFields | {
    type: 'password';
} & PasswordFieldFieldSerializerWithRelatedFields | {
    type: 'phone_number';
} & PhoneNumberFieldFieldSerializerWithRelatedFields | {
    type: 'rating';
} & RatingFieldFieldSerializerWithRelatedFields | {
    type: 'rollup';
} & RollupFieldFieldSerializerWithRelatedFields | {
    type: 'single_select';
} & SingleSelectFieldFieldSerializerWithRelatedFields | {
    type: 'text';
} & TextFieldFieldSerializerWithRelatedFields | {
    type: 'url';
} & URLFieldFieldSerializerWithRelatedFields | {
    type: 'uuid';
} & UUIDFieldFieldSerializerWithRelatedFields;
/**
 *
 * @export
 * @interface FieldSerializerWithRelatedFields
 */
export interface FieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof FieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof FieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof FieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof FieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof FieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof FieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof FieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof FieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof FieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface FileFieldCreateField
 */
export interface FileFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof FileFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof FileFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof FileFieldCreateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface FileFieldField
 */
export interface FileFieldField {
    /**
     *
     * @type {number}
     * @memberof FileFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof FileFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof FileFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof FileFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof FileFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof FileFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof FileFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof FileFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface FileFieldFieldSerializerWithRelatedFields
 */
export interface FileFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof FileFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof FileFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof FileFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof FileFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof FileFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof FileFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof FileFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof FileFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof FileFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface FileFieldResponse
 */
export interface FileFieldResponse {
    /**
     *
     * @type {string}
     * @memberof FileFieldResponse
     */
    'url': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof FileFieldResponse
     */
    'thumbnails': {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof FileFieldResponse
     */
    'visible_name': string;
    /**
     *
     * @type {string}
     * @memberof FileFieldResponse
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof FileFieldResponse
     */
    'size': number;
    /**
     *
     * @type {string}
     * @memberof FileFieldResponse
     */
    'mime_type': string;
    /**
     *
     * @type {boolean}
     * @memberof FileFieldResponse
     */
    'is_image': boolean;
    /**
     *
     * @type {number}
     * @memberof FileFieldResponse
     */
    'image_width': number;
    /**
     *
     * @type {number}
     * @memberof FileFieldResponse
     */
    'image_height': number;
    /**
     *
     * @type {string}
     * @memberof FileFieldResponse
     */
    'uploaded_at': string;
}
/**
 *
 * @export
 * @interface FileFieldUpdateField
 */
export interface FileFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof FileFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof FileFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof FileFieldUpdateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface FileImportJobCreateJob
 */
export interface FileImportJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof FileImportJobCreateJob
     */
    'type': Type8b6Enum;
}
/**
 *
 * @export
 * @interface FileImportJobJob
 */
export interface FileImportJobJob {
    /**
     *
     * @type {number}
     * @memberof FileImportJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof FileImportJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof FileImportJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof FileImportJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof FileImportJobJob
     */
    'human_readable_error'?: string;
    /**
     * Database id where the table will be created.
     * @type {number}
     * @memberof FileImportJobJob
     */
    'database_id': number;
    /**
     * The name of the new table.
     * @type {string}
     * @memberof FileImportJobJob
     */
    'name'?: string;
    /**
     * Table id where the data will be imported.
     * @type {number}
     * @memberof FileImportJobJob
     */
    'table_id'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FileImportJobJob
     */
    'first_row_header'?: boolean;
    /**
     * Import error report.
     * @type {Report}
     * @memberof FileImportJobJob
     */
    'report': Report;
}
/**
 * * `create_group` - create_group * `delete_group` - delete_group * `update_group` - update_group * `order_groups` - order_groups * `create_application` - create_application * `update_application` - update_application * `delete_application` - delete_application * `order_applications` - order_applications * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_group_invitation` - create_group_invitation * `delete_group_invitation` - delete_group_invitation * `accept_group_invitation` - accept_group_invitation * `reject_group_invitation` - reject_group_invitation * `update_group_invitation_permissions` - update_group_invitation_permissions * `leave_group` - leave_group * `create_initial_workspace` - create_initial_workspace * `create_snapshot` - create_snapshot * `delete_snapshot` - delete_snapshot * `restore_snapshot` - restore_snapshot * `empty_trash` - empty_trash * `restore_from_trash` - restore_from_trash * `create_user` - create_user * `update_user` - update_user * `schedule_user_deletion` - schedule_user_deletion * `cancel_user_deletion` - cancel_user_deletion * `sign_in_user` - sign_in_user * `change_user_password` - change_user_password * `send_reset_user_password` - send_reset_user_password * `reset_user_password` - reset_user_password * `send_verify_email` - send_verify_email * `verify_email` - verify_email * `create_db_token` - create_db_token * `update_db_token_name` - update_db_token_name * `update_db_token_permissions` - update_db_token_permissions * `rotate_db_token_key` - rotate_db_token_key * `delete_db_token_key` - delete_db_token_key * `create_webhook` - create_webhook * `delete_webhook` - delete_webhook * `update_webhook` - update_webhook * `export_table` - export_table * `import_database_from_airtable` - import_database_from_airtable * `create_table` - create_table * `delete_table` - delete_table * `order_tables` - order_tables * `update_table` - update_table * `duplicate_table` - duplicate_table * `create_row` - create_row * `create_rows` - create_rows * `import_rows` - import_rows * `delete_row` - delete_row * `delete_rows` - delete_rows * `move_row` - move_row * `update_row` - update_row * `update_rows` - update_rows * `create_view` - create_view * `duplicate_view` - duplicate_view * `delete_view` - delete_view * `order_views` - order_views * `update_view` - update_view * `create_view_filter` - create_view_filter * `update_view_filter` - update_view_filter * `delete_view_filter` - delete_view_filter * `create_view_sort` - create_view_sort * `update_view_sort` - update_view_sort * `delete_view_sort` - delete_view_sort * `create_view_group` - create_view_group * `update_view_group` - update_view_group * `delete_view_group` - delete_view_group * `rotate_view_slug` - rotate_view_slug * `update_view_field_options` - update_view_field_options * `create_decoration` - create_decoration * `update_decoration` - update_decoration * `delete_decoration` - delete_decoration * `create_view_filter_group` - create_view_filter_group * `update_view_filter_group` - update_view_filter_group * `delete_view_filter_group` - delete_view_filter_group * `create_field` - create_field * `delete_field` - delete_field * `update_field` - update_field * `duplicate_field` - duplicate_field * `change_primary_field` - change_primary_field * `generate_formula_with_ai` - generate_formula_with_ai * `create_row_comment` - create_row_comment * `delete_row_comment` - delete_row_comment * `update_row_comment` - update_row_comment * `rotate_calendar_ical_view_slug` - rotate_calendar_ical_view_slug * `create_team` - create_team * `update_team` - update_team * `delete_team` - delete_team * `create_team_subject` - create_team_subject * `delete_team_subject` - delete_team_subject * `batch_assign_role` - batch_assign_role
 * @export
 * @enum {string}
 */
export declare const FilterActionTypeEnum: {
    readonly CreateGroup: "create_group";
    readonly DeleteGroup: "delete_group";
    readonly UpdateGroup: "update_group";
    readonly OrderGroups: "order_groups";
    readonly CreateApplication: "create_application";
    readonly UpdateApplication: "update_application";
    readonly DeleteApplication: "delete_application";
    readonly OrderApplications: "order_applications";
    readonly DuplicateApplication: "duplicate_application";
    readonly InstallTemplate: "install_template";
    readonly CreateGroupInvitation: "create_group_invitation";
    readonly DeleteGroupInvitation: "delete_group_invitation";
    readonly AcceptGroupInvitation: "accept_group_invitation";
    readonly RejectGroupInvitation: "reject_group_invitation";
    readonly UpdateGroupInvitationPermissions: "update_group_invitation_permissions";
    readonly LeaveGroup: "leave_group";
    readonly CreateInitialWorkspace: "create_initial_workspace";
    readonly CreateSnapshot: "create_snapshot";
    readonly DeleteSnapshot: "delete_snapshot";
    readonly RestoreSnapshot: "restore_snapshot";
    readonly EmptyTrash: "empty_trash";
    readonly RestoreFromTrash: "restore_from_trash";
    readonly CreateUser: "create_user";
    readonly UpdateUser: "update_user";
    readonly ScheduleUserDeletion: "schedule_user_deletion";
    readonly CancelUserDeletion: "cancel_user_deletion";
    readonly SignInUser: "sign_in_user";
    readonly ChangeUserPassword: "change_user_password";
    readonly SendResetUserPassword: "send_reset_user_password";
    readonly ResetUserPassword: "reset_user_password";
    readonly SendVerifyEmail: "send_verify_email";
    readonly VerifyEmail: "verify_email";
    readonly CreateDbToken: "create_db_token";
    readonly UpdateDbTokenName: "update_db_token_name";
    readonly UpdateDbTokenPermissions: "update_db_token_permissions";
    readonly RotateDbTokenKey: "rotate_db_token_key";
    readonly DeleteDbTokenKey: "delete_db_token_key";
    readonly CreateWebhook: "create_webhook";
    readonly DeleteWebhook: "delete_webhook";
    readonly UpdateWebhook: "update_webhook";
    readonly ExportTable: "export_table";
    readonly ImportDatabaseFromAirtable: "import_database_from_airtable";
    readonly CreateTable: "create_table";
    readonly DeleteTable: "delete_table";
    readonly OrderTables: "order_tables";
    readonly UpdateTable: "update_table";
    readonly DuplicateTable: "duplicate_table";
    readonly CreateRow: "create_row";
    readonly CreateRows: "create_rows";
    readonly ImportRows: "import_rows";
    readonly DeleteRow: "delete_row";
    readonly DeleteRows: "delete_rows";
    readonly MoveRow: "move_row";
    readonly UpdateRow: "update_row";
    readonly UpdateRows: "update_rows";
    readonly CreateView: "create_view";
    readonly DuplicateView: "duplicate_view";
    readonly DeleteView: "delete_view";
    readonly OrderViews: "order_views";
    readonly UpdateView: "update_view";
    readonly CreateViewFilter: "create_view_filter";
    readonly UpdateViewFilter: "update_view_filter";
    readonly DeleteViewFilter: "delete_view_filter";
    readonly CreateViewSort: "create_view_sort";
    readonly UpdateViewSort: "update_view_sort";
    readonly DeleteViewSort: "delete_view_sort";
    readonly CreateViewGroup: "create_view_group";
    readonly UpdateViewGroup: "update_view_group";
    readonly DeleteViewGroup: "delete_view_group";
    readonly RotateViewSlug: "rotate_view_slug";
    readonly UpdateViewFieldOptions: "update_view_field_options";
    readonly CreateDecoration: "create_decoration";
    readonly UpdateDecoration: "update_decoration";
    readonly DeleteDecoration: "delete_decoration";
    readonly CreateViewFilterGroup: "create_view_filter_group";
    readonly UpdateViewFilterGroup: "update_view_filter_group";
    readonly DeleteViewFilterGroup: "delete_view_filter_group";
    readonly CreateField: "create_field";
    readonly DeleteField: "delete_field";
    readonly UpdateField: "update_field";
    readonly DuplicateField: "duplicate_field";
    readonly ChangePrimaryField: "change_primary_field";
    readonly GenerateFormulaWithAi: "generate_formula_with_ai";
    readonly CreateRowComment: "create_row_comment";
    readonly DeleteRowComment: "delete_row_comment";
    readonly UpdateRowComment: "update_row_comment";
    readonly RotateCalendarIcalViewSlug: "rotate_calendar_ical_view_slug";
    readonly CreateTeam: "create_team";
    readonly UpdateTeam: "update_team";
    readonly DeleteTeam: "delete_team";
    readonly CreateTeamSubject: "create_team_subject";
    readonly DeleteTeamSubject: "delete_team_subject";
    readonly BatchAssignRole: "batch_assign_role";
};
export type FilterActionTypeEnum = typeof FilterActionTypeEnum[keyof typeof FilterActionTypeEnum];
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface FormContainerElementCreateElement
 */
export interface FormContainerElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof FormContainerElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof FormContainerElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof FormContainerElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof FormContainerElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof FormContainerElementCreateElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof FormContainerElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof FormContainerElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof FormContainerElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof FormContainerElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof FormContainerElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof FormContainerElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof FormContainerElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof FormContainerElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof FormContainerElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof FormContainerElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {string}
     * @memberof FormContainerElementCreateElement
     */
    'submit_button_label'?: string;
    /**
     * Whether to reset the form to using its initial values after a successful form submission.
     * @type {boolean}
     * @memberof FormContainerElementCreateElement
     */
    'reset_initial_values_post_submission'?: boolean;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface FormContainerElementElement
 */
export interface FormContainerElementElement {
    /**
     *
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof FormContainerElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof FormContainerElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof FormContainerElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof FormContainerElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof FormContainerElementElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof FormContainerElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof FormContainerElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof FormContainerElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof FormContainerElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof FormContainerElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof FormContainerElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof FormContainerElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof FormContainerElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof FormContainerElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof FormContainerElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof FormContainerElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof FormContainerElementElement
     */
    'roles'?: any;
    /**
     *
     * @type {string}
     * @memberof FormContainerElementElement
     */
    'submit_button_label'?: string;
    /**
     * Whether to reset the form to using its initial values after a successful form submission.
     * @type {boolean}
     * @memberof FormContainerElementElement
     */
    'reset_initial_values_post_submission'?: boolean;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface FormContainerElementPublicElement
 */
export interface FormContainerElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof FormContainerElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof FormContainerElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof FormContainerElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof FormContainerElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof FormContainerElementPublicElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof FormContainerElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof FormContainerElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof FormContainerElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof FormContainerElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof FormContainerElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof FormContainerElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof FormContainerElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof FormContainerElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof FormContainerElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof FormContainerElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof FormContainerElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof FormContainerElementPublicElement
     */
    'roles'?: any;
    /**
     *
     * @type {string}
     * @memberof FormContainerElementPublicElement
     */
    'submit_button_label'?: string;
    /**
     * Whether to reset the form to using its initial values after a successful form submission.
     * @type {boolean}
     * @memberof FormContainerElementPublicElement
     */
    'reset_initial_values_post_submission'?: boolean;
}
/**
 *
 * @export
 * @interface FormContainerElementUpdateElement
 */
export interface FormContainerElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof FormContainerElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof FormContainerElementUpdateElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof FormContainerElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof FormContainerElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof FormContainerElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof FormContainerElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof FormContainerElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof FormContainerElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof FormContainerElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof FormContainerElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof FormContainerElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof FormContainerElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof FormContainerElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof FormContainerElementUpdateElement
     */
    'roles'?: any;
    /**
     *
     * @type {string}
     * @memberof FormContainerElementUpdateElement
     */
    'submit_button_label'?: string;
    /**
     * Whether to reset the form to using its initial values after a successful form submission.
     * @type {boolean}
     * @memberof FormContainerElementUpdateElement
     */
    'reset_initial_values_post_submission'?: boolean;
}
/**
 *
 * @export
 * @interface FormViewCreateView
 */
export interface FormViewCreateView {
    /**
     *
     * @type {string}
     * @memberof FormViewCreateView
     */
    'name': string;
    /**
     *
     * @type {ViewTypesEnum}
     * @memberof FormViewCreateView
     */
    'type': ViewTypesEnum;
    /**
     *
     * @type {OwnershipTypeEnum}
     * @memberof FormViewCreateView
     */
    'ownership_type'?: OwnershipTypeEnum;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof FormViewCreateView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof FormViewCreateView
     */
    'filters_disabled'?: boolean;
    /**
     * The title that is displayed at the beginning of the form.
     * @type {string}
     * @memberof FormViewCreateView
     */
    'title'?: string;
    /**
     * The description that is displayed at the beginning of the form.
     * @type {string}
     * @memberof FormViewCreateView
     */
    'description'?: string;
    /**
     * Configurable mode of the form.  * `form` - form * `survey` - survey
     * @type {Mode51eEnum}
     * @memberof FormViewCreateView
     */
    'mode'?: Mode51eEnum;
    /**
     * The cover image that must be displayed at the top of the form.
     * @type {UserFile}
     * @memberof FormViewCreateView
     */
    'cover_image'?: UserFile | null;
    /**
     * The logo image that must be displayed at the top of the form.
     * @type {UserFile}
     * @memberof FormViewCreateView
     */
    'logo_image'?: UserFile | null;
    /**
     * The text displayed on the submit button.
     * @type {string}
     * @memberof FormViewCreateView
     */
    'submit_text'?: string;
    /**
     * The action that must be performed after the visitor has filled out the form.  * `MESSAGE` - Message * `REDIRECT` - Redirect
     * @type {SubmitActionEnum}
     * @memberof FormViewCreateView
     */
    'submit_action'?: SubmitActionEnum;
    /**
     * If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.
     * @type {string}
     * @memberof FormViewCreateView
     */
    'submit_action_message'?: string;
    /**
     * If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
     * @type {string}
     * @memberof FormViewCreateView
     */
    'submit_action_redirect_url'?: string;
    /**
     * A boolean indicating if the current user should be notified when the form is submitted.
     * @type {boolean}
     * @memberof FormViewCreateView
     */
    'receive_notification_on_submit': boolean;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof FormViewCreateView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof FormViewCreateView
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface FormViewFieldOptions
 */
export interface FormViewFieldOptions {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: FormViewFieldOptions; }}
     * @memberof FormViewFieldOptions
     */
    'field_options': {
        [key: string]: FormViewFieldOptions;
    };
}
/**
 *
 * @export
 * @interface FormViewFieldOptionsCondition
 */
export interface FormViewFieldOptionsCondition {
    /**
     *
     * @type {number}
     * @memberof FormViewFieldOptionsCondition
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof FormViewFieldOptionsCondition
     */
    'field': number;
    /**
     * Indicates how the field\'s value must be compared to the filter\'s value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
     * @type {string}
     * @memberof FormViewFieldOptionsCondition
     */
    'type': string;
    /**
     * The filter value that must be compared to the field\'s value.
     * @type {string}
     * @memberof FormViewFieldOptionsCondition
     */
    'value'?: string;
    /**
     *
     * @type {number}
     * @memberof FormViewFieldOptionsCondition
     */
    'group'?: number | null;
}
/**
 *
 * @export
 * @interface FormViewFieldOptionsConditionGroup
 */
export interface FormViewFieldOptionsConditionGroup {
    /**
     *
     * @type {number}
     * @memberof FormViewFieldOptionsConditionGroup
     */
    'id': number;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR) in the group to be shown.  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof FormViewFieldOptionsConditionGroup
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     *
     * @type {number}
     * @memberof FormViewFieldOptionsConditionGroup
     */
    'parent_group'?: number | null;
}
/**
 *
 * @export
 * @interface FormViewSubmitted
 */
export interface FormViewSubmitted {
    /**
     * The action that must be performed after the visitor has filled out the form.  * `MESSAGE` - Message * `REDIRECT` - Redirect
     * @type {SubmitActionEnum}
     * @memberof FormViewSubmitted
     */
    'submit_action'?: SubmitActionEnum;
    /**
     * If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.
     * @type {string}
     * @memberof FormViewSubmitted
     */
    'submit_action_message'?: string;
    /**
     * If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
     * @type {string}
     * @memberof FormViewSubmitted
     */
    'submit_action_redirect_url'?: string;
    /**
     *
     * @type {number}
     * @memberof FormViewSubmitted
     */
    'row_id': number;
}
/**
 *
 * @export
 * @interface FormViewUpdate
 */
export interface FormViewUpdate {
    /**
     *
     * @type {string}
     * @memberof FormViewUpdate
     */
    'name'?: string;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof FormViewUpdate
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof FormViewUpdate
     */
    'filters_disabled'?: boolean;
    /**
     * The new password or an empty string to remove any previous password from the view and make it publicly accessible again.
     * @type {string}
     * @memberof FormViewUpdate
     */
    'public_view_password'?: string;
    /**
     * Indicates how the access to the view is determined. By default, views are collaborative and shared for all users that have access to the table.
     * @type {string}
     * @memberof FormViewUpdate
     */
    'ownership_type'?: string;
    /**
     * The title that is displayed at the beginning of the form.
     * @type {string}
     * @memberof FormViewUpdate
     */
    'title'?: string;
    /**
     * The description that is displayed at the beginning of the form.
     * @type {string}
     * @memberof FormViewUpdate
     */
    'description'?: string;
    /**
     * Configurable mode of the form.  * `form` - form * `survey` - survey
     * @type {Mode51eEnum}
     * @memberof FormViewUpdate
     */
    'mode'?: Mode51eEnum;
    /**
     * The cover image that must be displayed at the top of the form.
     * @type {UserFile}
     * @memberof FormViewUpdate
     */
    'cover_image'?: UserFile | null;
    /**
     * The logo image that must be displayed at the top of the form.
     * @type {UserFile}
     * @memberof FormViewUpdate
     */
    'logo_image'?: UserFile | null;
    /**
     * The text displayed on the submit button.
     * @type {string}
     * @memberof FormViewUpdate
     */
    'submit_text'?: string;
    /**
     * The action that must be performed after the visitor has filled out the form.  * `MESSAGE` - Message * `REDIRECT` - Redirect
     * @type {SubmitActionEnum}
     * @memberof FormViewUpdate
     */
    'submit_action'?: SubmitActionEnum;
    /**
     * If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.
     * @type {string}
     * @memberof FormViewUpdate
     */
    'submit_action_message'?: string;
    /**
     * If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
     * @type {string}
     * @memberof FormViewUpdate
     */
    'submit_action_redirect_url'?: string;
    /**
     * A boolean indicating if the current user should be notified when the form is submitted.
     * @type {boolean}
     * @memberof FormViewUpdate
     */
    'receive_notification_on_submit': boolean;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof FormViewUpdate
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof FormViewUpdate
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface FormViewView
 */
export interface FormViewView {
    /**
     *
     * @type {number}
     * @memberof FormViewView
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof FormViewView
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof FormViewView
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof FormViewView
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof FormViewView
     */
    'type': string;
    /**
     *
     * @type {Table}
     * @memberof FormViewView
     */
    'table': Table;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof FormViewView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     *
     * @type {Array<ViewFilter>}
     * @memberof FormViewView
     */
    'filters'?: Array<ViewFilter>;
    /**
     *
     * @type {Array<ViewFilterGroup>}
     * @memberof FormViewView
     */
    'filter_groups'?: Array<ViewFilterGroup>;
    /**
     *
     * @type {Array<ViewSort>}
     * @memberof FormViewView
     */
    'sortings'?: Array<ViewSort>;
    /**
     *
     * @type {Array<ViewGroupBy>}
     * @memberof FormViewView
     */
    'group_bys'?: Array<ViewGroupBy>;
    /**
     *
     * @type {Array<ViewDecoration>}
     * @memberof FormViewView
     */
    'decorations'?: Array<ViewDecoration>;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof FormViewView
     */
    'filters_disabled'?: boolean;
    /**
     * Indicates whether the public view is password protected or not.  :return: True if the public view is password protected, False otherwise.
     * @type {boolean}
     * @memberof FormViewView
     */
    'public_view_has_password': boolean;
    /**
     *
     * @type {boolean}
     * @memberof FormViewView
     */
    'show_logo'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FormViewView
     */
    'ownership_type': string;
    /**
     *
     * @type {number}
     * @memberof FormViewView
     */
    'owned_by_id'?: number;
    /**
     * The title that is displayed at the beginning of the form.
     * @type {string}
     * @memberof FormViewView
     */
    'title'?: string;
    /**
     * The description that is displayed at the beginning of the form.
     * @type {string}
     * @memberof FormViewView
     */
    'description'?: string;
    /**
     * Configurable mode of the form.  * `form` - form * `survey` - survey
     * @type {Mode51eEnum}
     * @memberof FormViewView
     */
    'mode'?: Mode51eEnum;
    /**
     * The cover image that must be displayed at the top of the form.
     * @type {UserFile}
     * @memberof FormViewView
     */
    'cover_image'?: UserFile | null;
    /**
     * The logo image that must be displayed at the top of the form.
     * @type {UserFile}
     * @memberof FormViewView
     */
    'logo_image'?: UserFile | null;
    /**
     * The text displayed on the submit button.
     * @type {string}
     * @memberof FormViewView
     */
    'submit_text'?: string;
    /**
     * The action that must be performed after the visitor has filled out the form.  * `MESSAGE` - Message * `REDIRECT` - Redirect
     * @type {SubmitActionEnum}
     * @memberof FormViewView
     */
    'submit_action'?: SubmitActionEnum;
    /**
     * If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.
     * @type {string}
     * @memberof FormViewView
     */
    'submit_action_message'?: string;
    /**
     * If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
     * @type {string}
     * @memberof FormViewView
     */
    'submit_action_redirect_url'?: string;
    /**
     * A boolean indicating if the current user should be notified when the form is submitted.
     * @type {boolean}
     * @memberof FormViewView
     */
    'receive_notification_on_submit': boolean;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof FormViewView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof FormViewView
     */
    'slug': string;
}
/**
 * * `plain` - Plain * `markdown` - Markdown
 * @export
 * @enum {string}
 */
export declare const FormatEnum: {
    readonly Plain: "plain";
    readonly Markdown: "markdown";
};
export type FormatEnum = typeof FormatEnum[keyof typeof FormatEnum];
/**
 *
 * @export
 * @interface FormulaFieldCreateField
 */
export interface FormulaFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof FormulaFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof FormulaFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof FormulaFieldCreateField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof FormulaFieldCreateField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof FormulaFieldCreateField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof FormulaFieldCreateField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof FormulaFieldCreateField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof FormulaFieldCreateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof FormulaFieldCreateField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof FormulaFieldCreateField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof FormulaFieldCreateField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof FormulaFieldCreateField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldCreateField
     */
    'error': string;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldCreateField
     */
    'formula': string;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof FormulaFieldCreateField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface FormulaFieldField
 */
export interface FormulaFieldField {
    /**
     *
     * @type {number}
     * @memberof FormulaFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof FormulaFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof FormulaFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof FormulaFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof FormulaFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof FormulaFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof FormulaFieldField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof FormulaFieldField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof FormulaFieldField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof FormulaFieldField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof FormulaFieldField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof FormulaFieldField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof FormulaFieldField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof FormulaFieldField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof FormulaFieldField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof FormulaFieldField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldField
     */
    'error': string;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldField
     */
    'formula': string;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof FormulaFieldField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface FormulaFieldFieldSerializerWithRelatedFields
 */
export interface FormulaFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'error': string;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'formula': string;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof FormulaFieldFieldSerializerWithRelatedFields
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface FormulaFieldUpdateField
 */
export interface FormulaFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof FormulaFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof FormulaFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof FormulaFieldUpdateField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof FormulaFieldUpdateField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof FormulaFieldUpdateField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof FormulaFieldUpdateField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof FormulaFieldUpdateField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof FormulaFieldUpdateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof FormulaFieldUpdateField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof FormulaFieldUpdateField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof FormulaFieldUpdateField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof FormulaFieldUpdateField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldUpdateField
     */
    'error': string;
    /**
     *
     * @type {string}
     * @memberof FormulaFieldUpdateField
     */
    'formula': string;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof FormulaFieldUpdateField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 * * `invalid` - invalid * `text` - text * `char` - char * `button` - button * `link` - link * `date_interval` - date_interval * `duration` - duration * `date` - date * `boolean` - boolean * `number` - number * `array` - array * `single_select` - single_select * `multiple_select` - multiple_select * `single_file` - single_file * `url` - url
 * @export
 * @enum {string}
 */
export declare const FormulaTypeEnum: {
    readonly Invalid: "invalid";
    readonly Text: "text";
    readonly Char: "char";
    readonly Button: "button";
    readonly Link: "link";
    readonly DateInterval: "date_interval";
    readonly Duration: "duration";
    readonly Date: "date";
    readonly Boolean: "boolean";
    readonly Number: "number";
    readonly Array: "array";
    readonly SingleSelect: "single_select";
    readonly MultipleSelect: "multiple_select";
    readonly SingleFile: "single_file";
    readonly Url: "url";
};
export type FormulaTypeEnum = typeof FormulaTypeEnum[keyof typeof FormulaTypeEnum];
/**
 *
 * @export
 * @interface FullHealthCheck
 */
export interface FullHealthCheck {
    /**
     * False if any of the critical service health checks are failing, true otherwise.
     * @type {boolean}
     * @memberof FullHealthCheck
     */
    'passing': boolean;
    /**
     * An object keyed by the name of the health check and the value being the result.
     * @type {{ [key: string]: string; }}
     * @memberof FullHealthCheck
     */
    'checks': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface GalleryViewCreateView
 */
export interface GalleryViewCreateView {
    /**
     *
     * @type {string}
     * @memberof GalleryViewCreateView
     */
    'name': string;
    /**
     *
     * @type {ViewTypesEnum}
     * @memberof GalleryViewCreateView
     */
    'type': ViewTypesEnum;
    /**
     *
     * @type {OwnershipTypeEnum}
     * @memberof GalleryViewCreateView
     */
    'ownership_type'?: OwnershipTypeEnum;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof GalleryViewCreateView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof GalleryViewCreateView
     */
    'filters_disabled'?: boolean;
    /**
     * References a file field of which the first image must be shown as card cover image.
     * @type {number}
     * @memberof GalleryViewCreateView
     */
    'card_cover_image_field'?: number | null;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof GalleryViewCreateView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof GalleryViewCreateView
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface GalleryViewFieldOptions
 */
export interface GalleryViewFieldOptions {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: GalleryViewFieldOptions; }}
     * @memberof GalleryViewFieldOptions
     */
    'field_options': {
        [key: string]: GalleryViewFieldOptions;
    };
}
/**
 *
 * @export
 * @interface GalleryViewUpdate
 */
export interface GalleryViewUpdate {
    /**
     *
     * @type {string}
     * @memberof GalleryViewUpdate
     */
    'name'?: string;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof GalleryViewUpdate
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof GalleryViewUpdate
     */
    'filters_disabled'?: boolean;
    /**
     * The new password or an empty string to remove any previous password from the view and make it publicly accessible again.
     * @type {string}
     * @memberof GalleryViewUpdate
     */
    'public_view_password'?: string;
    /**
     * Indicates how the access to the view is determined. By default, views are collaborative and shared for all users that have access to the table.
     * @type {string}
     * @memberof GalleryViewUpdate
     */
    'ownership_type'?: string;
    /**
     * References a file field of which the first image must be shown as card cover image.
     * @type {number}
     * @memberof GalleryViewUpdate
     */
    'card_cover_image_field'?: number | null;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof GalleryViewUpdate
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof GalleryViewUpdate
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface GalleryViewView
 */
export interface GalleryViewView {
    /**
     *
     * @type {number}
     * @memberof GalleryViewView
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof GalleryViewView
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof GalleryViewView
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof GalleryViewView
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof GalleryViewView
     */
    'type': string;
    /**
     *
     * @type {Table}
     * @memberof GalleryViewView
     */
    'table': Table;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof GalleryViewView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     *
     * @type {Array<ViewFilter>}
     * @memberof GalleryViewView
     */
    'filters'?: Array<ViewFilter>;
    /**
     *
     * @type {Array<ViewFilterGroup>}
     * @memberof GalleryViewView
     */
    'filter_groups'?: Array<ViewFilterGroup>;
    /**
     *
     * @type {Array<ViewSort>}
     * @memberof GalleryViewView
     */
    'sortings'?: Array<ViewSort>;
    /**
     *
     * @type {Array<ViewGroupBy>}
     * @memberof GalleryViewView
     */
    'group_bys'?: Array<ViewGroupBy>;
    /**
     *
     * @type {Array<ViewDecoration>}
     * @memberof GalleryViewView
     */
    'decorations'?: Array<ViewDecoration>;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof GalleryViewView
     */
    'filters_disabled'?: boolean;
    /**
     * Indicates whether the public view is password protected or not.  :return: True if the public view is password protected, False otherwise.
     * @type {boolean}
     * @memberof GalleryViewView
     */
    'public_view_has_password': boolean;
    /**
     *
     * @type {boolean}
     * @memberof GalleryViewView
     */
    'show_logo'?: boolean;
    /**
     *
     * @type {string}
     * @memberof GalleryViewView
     */
    'ownership_type': string;
    /**
     *
     * @type {number}
     * @memberof GalleryViewView
     */
    'owned_by_id'?: number;
    /**
     * References a file field of which the first image must be shown as card cover image.
     * @type {number}
     * @memberof GalleryViewView
     */
    'card_cover_image_field'?: number | null;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof GalleryViewView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof GalleryViewView
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface GenerateFormulaWithAIRequest
 */
export interface GenerateFormulaWithAIRequest {
    /**
     * The AI model type that must be used when generating the formula.
     * @type {string}
     * @memberof GenerateFormulaWithAIRequest
     */
    'ai_type': string;
    /**
     * The AI model that must be used when generating the formula.
     * @type {string}
     * @memberof GenerateFormulaWithAIRequest
     */
    'ai_model': string;
    /**
     * The human readable input used to generate the formula.
     * @type {string}
     * @memberof GenerateFormulaWithAIRequest
     */
    'ai_prompt': string;
}
/**
 *
 * @export
 * @interface GenerateFormulaWithAIResponse
 */
export interface GenerateFormulaWithAIResponse {
    /**
     * The formula generated by the AI.
     * @type {string}
     * @memberof GenerateFormulaWithAIResponse
     */
    'formula': string;
}
/**
 *
 * @export
 * @interface GenerateFormulaWithAi400Response
 */
export interface GenerateFormulaWithAi400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GenerateFormulaWithAi400Response
     */
    'error'?: GenerateFormulaWithAi400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GenerateFormulaWithAi400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GenerateFormulaWithAi400ResponseErrorEnum: {
    readonly GenerativeAiDoesNotExist: "ERROR_GENERATIVE_AI_DOES_NOT_EXIST";
    readonly ModelDoesNotBelongToType: "ERROR_MODEL_DOES_NOT_BELONG_TO_TYPE";
    readonly OutputParser: "ERROR_OUTPUT_PARSER";
    readonly GenerativeAiPrompt: "ERROR_GENERATIVE_AI_PROMPT";
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
};
export type GenerateFormulaWithAi400ResponseErrorEnum = typeof GenerateFormulaWithAi400ResponseErrorEnum[keyof typeof GenerateFormulaWithAi400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GenerateTableAiFieldValue400Response
 */
export interface GenerateTableAiFieldValue400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GenerateTableAiFieldValue400Response
     */
    'error'?: GenerateTableAiFieldValue400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GenerateTableAiFieldValue400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GenerateTableAiFieldValue400ResponseErrorEnum: {
    readonly GenerativeAiDoesNotExist: "ERROR_GENERATIVE_AI_DOES_NOT_EXIST";
    readonly ModelDoesNotBelongToType: "ERROR_MODEL_DOES_NOT_BELONG_TO_TYPE";
};
export type GenerateTableAiFieldValue400ResponseErrorEnum = typeof GenerateTableAiFieldValue400ResponseErrorEnum[keyof typeof GenerateTableAiFieldValue400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GenerateTableAiFieldValue404Response
 */
export interface GenerateTableAiFieldValue404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GenerateTableAiFieldValue404Response
     */
    'error'?: GenerateTableAiFieldValue404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GenerateTableAiFieldValue404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GenerateTableAiFieldValue404ResponseErrorEnum: {
    readonly FieldDoesNotExist: "ERROR_FIELD_DOES_NOT_EXIST";
    readonly RowDoesNotExist: "ERROR_ROW_DOES_NOT_EXIST";
};
export type GenerateTableAiFieldValue404ResponseErrorEnum = typeof GenerateTableAiFieldValue404ResponseErrorEnum[keyof typeof GenerateTableAiFieldValue404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GeneratedConditionalColorCreateViewDecoration
 */
export interface GeneratedConditionalColorCreateViewDecoration {
    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.  * `left_border_color` - left_border_color * `background_color` - background_color
     * @type {Type9c4Enum}
     * @memberof GeneratedConditionalColorCreateViewDecoration
     */
    'type': Type9c4Enum;
    /**
     *
     * @type {GeneratedConditionalColorCreateViewDecorationValueProviderType}
     * @memberof GeneratedConditionalColorCreateViewDecoration
     */
    'value_provider_type'?: GeneratedConditionalColorCreateViewDecorationValueProviderType;
    /**
     * The configuration of the value provider
     * @type {ConditionalColorValueProviderConfColors}
     * @memberof GeneratedConditionalColorCreateViewDecoration
     */
    'value_provider_conf'?: ConditionalColorValueProviderConfColors;
    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     * @type {number}
     * @memberof GeneratedConditionalColorCreateViewDecoration
     */
    'order'?: number;
}
/**
 * @type GeneratedConditionalColorCreateViewDecorationValueProviderType
 * The value provider type that gives the value to the decorator.  * `` -  * `single_select_color` - single_select_color * `conditional_color` - conditional_color
 * @export
 */
export type GeneratedConditionalColorCreateViewDecorationValueProviderType = BlankEnum | ValueProviderTypeEnum;
/**
 *
 * @export
 * @interface GeneratedConditionalColorUpdateViewDecoration
 */
export interface GeneratedConditionalColorUpdateViewDecoration {
    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.  * `left_border_color` - left_border_color * `background_color` - background_color
     * @type {Type9c4Enum}
     * @memberof GeneratedConditionalColorUpdateViewDecoration
     */
    'type'?: Type9c4Enum;
    /**
     *
     * @type {GeneratedConditionalColorUpdateViewDecorationValueProviderType}
     * @memberof GeneratedConditionalColorUpdateViewDecoration
     */
    'value_provider_type'?: GeneratedConditionalColorUpdateViewDecorationValueProviderType;
    /**
     * The configuration of the value provider
     * @type {ConditionalColorValueProviderConfColors}
     * @memberof GeneratedConditionalColorUpdateViewDecoration
     */
    'value_provider_conf'?: ConditionalColorValueProviderConfColors;
    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     * @type {number}
     * @memberof GeneratedConditionalColorUpdateViewDecoration
     */
    'order'?: number;
}
/**
 * @type GeneratedConditionalColorUpdateViewDecorationValueProviderType
 * The value provider type that gives the value to the decorator.  * `` -  * `single_select_color` - single_select_color * `conditional_color` - conditional_color
 * @export
 */
export type GeneratedConditionalColorUpdateViewDecorationValueProviderType = BlankEnum | ValueProviderTypeEnum;
/**
 *
 * @export
 * @interface GeneratedConditionalColorViewDecoration
 */
export interface GeneratedConditionalColorViewDecoration {
    /**
     *
     * @type {number}
     * @memberof GeneratedConditionalColorViewDecoration
     */
    'id': number;
    /**
     * The view to which the decoration applies. Each view can have his own decorations.
     * @type {number}
     * @memberof GeneratedConditionalColorViewDecoration
     */
    'view'?: number;
    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.
     * @type {string}
     * @memberof GeneratedConditionalColorViewDecoration
     */
    'type'?: string;
    /**
     * The value provider type that gives the value to the decorator.
     * @type {string}
     * @memberof GeneratedConditionalColorViewDecoration
     */
    'value_provider_type'?: string;
    /**
     * The configuration of the value provider
     * @type {ConditionalColorValueProviderConfColors}
     * @memberof GeneratedConditionalColorViewDecoration
     */
    'value_provider_conf'?: ConditionalColorValueProviderConfColors;
    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     * @type {number}
     * @memberof GeneratedConditionalColorViewDecoration
     */
    'order'?: number;
}
/**
 *
 * @export
 * @interface GeneratedSingleSelectColorCreateViewDecoration
 */
export interface GeneratedSingleSelectColorCreateViewDecoration {
    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.  * `left_border_color` - left_border_color * `background_color` - background_color
     * @type {Type9c4Enum}
     * @memberof GeneratedSingleSelectColorCreateViewDecoration
     */
    'type': Type9c4Enum;
    /**
     *
     * @type {GeneratedConditionalColorCreateViewDecorationValueProviderType}
     * @memberof GeneratedSingleSelectColorCreateViewDecoration
     */
    'value_provider_type'?: GeneratedConditionalColorCreateViewDecorationValueProviderType;
    /**
     * The configuration of the value provider
     * @type {SelectColorValueProviderConf}
     * @memberof GeneratedSingleSelectColorCreateViewDecoration
     */
    'value_provider_conf'?: SelectColorValueProviderConf;
    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     * @type {number}
     * @memberof GeneratedSingleSelectColorCreateViewDecoration
     */
    'order'?: number;
}
/**
 *
 * @export
 * @interface GeneratedSingleSelectColorUpdateViewDecoration
 */
export interface GeneratedSingleSelectColorUpdateViewDecoration {
    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.  * `left_border_color` - left_border_color * `background_color` - background_color
     * @type {Type9c4Enum}
     * @memberof GeneratedSingleSelectColorUpdateViewDecoration
     */
    'type'?: Type9c4Enum;
    /**
     *
     * @type {GeneratedConditionalColorUpdateViewDecorationValueProviderType}
     * @memberof GeneratedSingleSelectColorUpdateViewDecoration
     */
    'value_provider_type'?: GeneratedConditionalColorUpdateViewDecorationValueProviderType;
    /**
     * The configuration of the value provider
     * @type {SelectColorValueProviderConf}
     * @memberof GeneratedSingleSelectColorUpdateViewDecoration
     */
    'value_provider_conf'?: SelectColorValueProviderConf;
    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     * @type {number}
     * @memberof GeneratedSingleSelectColorUpdateViewDecoration
     */
    'order'?: number;
}
/**
 *
 * @export
 * @interface GeneratedSingleSelectColorViewDecoration
 */
export interface GeneratedSingleSelectColorViewDecoration {
    /**
     *
     * @type {number}
     * @memberof GeneratedSingleSelectColorViewDecoration
     */
    'id': number;
    /**
     * The view to which the decoration applies. Each view can have his own decorations.
     * @type {number}
     * @memberof GeneratedSingleSelectColorViewDecoration
     */
    'view'?: number;
    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.
     * @type {string}
     * @memberof GeneratedSingleSelectColorViewDecoration
     */
    'type'?: string;
    /**
     * The value provider type that gives the value to the decorator.
     * @type {string}
     * @memberof GeneratedSingleSelectColorViewDecoration
     */
    'value_provider_type'?: string;
    /**
     * The configuration of the value provider
     * @type {SelectColorValueProviderConf}
     * @memberof GeneratedSingleSelectColorViewDecoration
     */
    'value_provider_conf'?: SelectColorValueProviderConf;
    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     * @type {number}
     * @memberof GeneratedSingleSelectColorViewDecoration
     */
    'order'?: number;
}
/**
 *
 * @export
 * @interface GenerativeAISettings
 */
export interface GenerativeAISettings {
    /**
     *
     * @type {OpenAISettings}
     * @memberof GenerativeAISettings
     */
    'openai'?: OpenAISettings;
    /**
     *
     * @type {OllamaSettings}
     * @memberof GenerativeAISettings
     */
    'ollama'?: OllamaSettings;
}
/**
 *
 * @export
 * @interface GetAdjacentDatabaseTableRow404Response
 */
export interface GetAdjacentDatabaseTableRow404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetAdjacentDatabaseTableRow404Response
     */
    'error'?: GetAdjacentDatabaseTableRow404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetAdjacentDatabaseTableRow404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetAdjacentDatabaseTableRow404ResponseErrorEnum: {
    readonly TableDoesNotExist: "ERROR_TABLE_DOES_NOT_EXIST";
    readonly RowDoesNotExist: "ERROR_ROW_DOES_NOT_EXIST";
    readonly ViewDoesNotExist: "ERROR_VIEW_DOES_NOT_EXIST";
};
export type GetAdjacentDatabaseTableRow404ResponseErrorEnum = typeof GetAdjacentDatabaseTableRow404ResponseErrorEnum[keyof typeof GetAdjacentDatabaseTableRow404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetAuthProvider404Response
 */
export interface GetAuthProvider404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetAuthProvider404Response
     */
    'error'?: GetAuthProvider404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetAuthProvider404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetAuthProvider404ResponseErrorEnum: {
    readonly ErrorAuthProviderDoesNotExist: "ERROR_AUTH_PROVIDER_DOES_NOT_EXIST";
};
export type GetAuthProvider404ResponseErrorEnum = typeof GetAuthProvider404ResponseErrorEnum[keyof typeof GetAuthProvider404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableField404Response
 */
export interface GetDatabaseTableField404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableField404Response
     */
    'error'?: GetDatabaseTableField404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableField404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableField404ResponseErrorEnum: {
    readonly ErrorFieldDoesNotExist: "ERROR_FIELD_DOES_NOT_EXIST";
};
export type GetDatabaseTableField404ResponseErrorEnum = typeof GetDatabaseTableField404ResponseErrorEnum[keyof typeof GetDatabaseTableField404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableGridViewFieldAggregation200Response
 */
export interface GetDatabaseTableGridViewFieldAggregation200Response {
    /**
     *
     * @type {GetDatabaseTableGridViewFieldAggregation200ResponseValue}
     * @memberof GetDatabaseTableGridViewFieldAggregation200Response
     */
    'value': GetDatabaseTableGridViewFieldAggregation200ResponseValue;
    /**
     * The total value count. Only returned if `include=total` is specified as GET parameter.
     * @type {number}
     * @memberof GetDatabaseTableGridViewFieldAggregation200Response
     */
    'total'?: number;
}
/**
 *
 * @export
 * @interface GetDatabaseTableGridViewFieldAggregation200ResponseValue
 */
export interface GetDatabaseTableGridViewFieldAggregation200ResponseValue {
}
/**
 *
 * @export
 * @interface GetDatabaseTableGridViewFieldAggregation400Response
 */
export interface GetDatabaseTableGridViewFieldAggregation400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableGridViewFieldAggregation400Response
     */
    'error'?: GetDatabaseTableGridViewFieldAggregation400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableGridViewFieldAggregation400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableGridViewFieldAggregation400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly AggregationTypeDoesNotExist: "ERROR_AGGREGATION_TYPE_DOES_NOT_EXIST";
    readonly FieldNotInTable: "ERROR_FIELD_NOT_IN_TABLE";
};
export type GetDatabaseTableGridViewFieldAggregation400ResponseErrorEnum = typeof GetDatabaseTableGridViewFieldAggregation400ResponseErrorEnum[keyof typeof GetDatabaseTableGridViewFieldAggregation400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableGridViewFieldAggregation404Response
 */
export interface GetDatabaseTableGridViewFieldAggregation404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableGridViewFieldAggregation404Response
     */
    'error'?: GetDatabaseTableGridViewFieldAggregation404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableGridViewFieldAggregation404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableGridViewFieldAggregation404ResponseErrorEnum: {
    readonly FieldDoesNotExist: "ERROR_FIELD_DOES_NOT_EXIST";
    readonly GridDoesNotExist: "ERROR_GRID_DOES_NOT_EXIST";
};
export type GetDatabaseTableGridViewFieldAggregation404ResponseErrorEnum = typeof GetDatabaseTableGridViewFieldAggregation404ResponseErrorEnum[keyof typeof GetDatabaseTableGridViewFieldAggregation404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTablePublicGridViewFieldAggregations200Response
 */
export interface GetDatabaseTablePublicGridViewFieldAggregations200Response {
    /**
     *
     * @type {GetDatabaseTablePublicGridViewFieldAggregations200ResponseFieldId}
     * @memberof GetDatabaseTablePublicGridViewFieldAggregations200Response
     */
    'field_{id}'?: GetDatabaseTablePublicGridViewFieldAggregations200ResponseFieldId;
    /**
     * The total value count. Only returned if `include=total` is specified as GET parameter.
     * @type {number}
     * @memberof GetDatabaseTablePublicGridViewFieldAggregations200Response
     */
    'total'?: number;
}
/**
 *
 * @export
 * @interface GetDatabaseTablePublicGridViewFieldAggregations200ResponseFieldId
 */
export interface GetDatabaseTablePublicGridViewFieldAggregations200ResponseFieldId {
}
/**
 *
 * @export
 * @interface GetDatabaseTablePublicGridViewFieldAggregations400Response
 */
export interface GetDatabaseTablePublicGridViewFieldAggregations400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTablePublicGridViewFieldAggregations400Response
     */
    'error'?: GetDatabaseTablePublicGridViewFieldAggregations400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTablePublicGridViewFieldAggregations400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTablePublicGridViewFieldAggregations400ResponseErrorEnum: {
    readonly FilterFieldNotFound: "ERROR_FILTER_FIELD_NOT_FOUND";
    readonly ViewFilterTypeDoesNotExist: "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST";
    readonly ViewFilterTypeUnsupportedField: "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
    readonly FiltersParamValidationError: "ERROR_FILTERS_PARAM_VALIDATION_ERROR";
};
export type GetDatabaseTablePublicGridViewFieldAggregations400ResponseErrorEnum = typeof GetDatabaseTablePublicGridViewFieldAggregations400ResponseErrorEnum[keyof typeof GetDatabaseTablePublicGridViewFieldAggregations400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTablePublicGridViewFieldAggregations404Response
 */
export interface GetDatabaseTablePublicGridViewFieldAggregations404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTablePublicGridViewFieldAggregations404Response
     */
    'error'?: GetDatabaseTablePublicGridViewFieldAggregations404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTablePublicGridViewFieldAggregations404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTablePublicGridViewFieldAggregations404ResponseErrorEnum: {
    readonly ErrorGridDoesNotExist: "ERROR_GRID_DOES_NOT_EXIST";
};
export type GetDatabaseTablePublicGridViewFieldAggregations404ResponseErrorEnum = typeof GetDatabaseTablePublicGridViewFieldAggregations404ResponseErrorEnum[keyof typeof GetDatabaseTablePublicGridViewFieldAggregations404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableViewDecoration404Response
 */
export interface GetDatabaseTableViewDecoration404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableViewDecoration404Response
     */
    'error'?: GetDatabaseTableViewDecoration404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableViewDecoration404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableViewDecoration404ResponseErrorEnum: {
    readonly ErrorViewDecorationDoesNotExist: "ERROR_VIEW_DECORATION_DOES_NOT_EXIST";
};
export type GetDatabaseTableViewDecoration404ResponseErrorEnum = typeof GetDatabaseTableViewDecoration404ResponseErrorEnum[keyof typeof GetDatabaseTableViewDecoration404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableViewFieldOptions400Response
 */
export interface GetDatabaseTableViewFieldOptions400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableViewFieldOptions400Response
     */
    'error'?: GetDatabaseTableViewFieldOptions400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableViewFieldOptions400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableViewFieldOptions400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly ViewDoesNotSupportFieldOptions: "ERROR_VIEW_DOES_NOT_SUPPORT_FIELD_OPTIONS";
};
export type GetDatabaseTableViewFieldOptions400ResponseErrorEnum = typeof GetDatabaseTableViewFieldOptions400ResponseErrorEnum[keyof typeof GetDatabaseTableViewFieldOptions400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableViewFilter404Response
 */
export interface GetDatabaseTableViewFilter404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableViewFilter404Response
     */
    'error'?: GetDatabaseTableViewFilter404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableViewFilter404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableViewFilter404ResponseErrorEnum: {
    readonly ErrorViewFilterDoesNotExist: "ERROR_VIEW_FILTER_DOES_NOT_EXIST";
};
export type GetDatabaseTableViewFilter404ResponseErrorEnum = typeof GetDatabaseTableViewFilter404ResponseErrorEnum[keyof typeof GetDatabaseTableViewFilter404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableViewFilterGroup404Response
 */
export interface GetDatabaseTableViewFilterGroup404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableViewFilterGroup404Response
     */
    'error'?: GetDatabaseTableViewFilterGroup404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableViewFilterGroup404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableViewFilterGroup404ResponseErrorEnum: {
    readonly ErrorViewFilterGroupDoesNotExist: "ERROR_VIEW_FILTER_GROUP_DOES_NOT_EXIST";
};
export type GetDatabaseTableViewFilterGroup404ResponseErrorEnum = typeof GetDatabaseTableViewFilterGroup404ResponseErrorEnum[keyof typeof GetDatabaseTableViewFilterGroup404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableViewGroup404Response
 */
export interface GetDatabaseTableViewGroup404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableViewGroup404Response
     */
    'error'?: GetDatabaseTableViewGroup404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableViewGroup404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableViewGroup404ResponseErrorEnum: {
    readonly ErrorViewGroupByDoesNotExist: "ERROR_VIEW_GROUP_BY_DOES_NOT_EXIST";
};
export type GetDatabaseTableViewGroup404ResponseErrorEnum = typeof GetDatabaseTableViewGroup404ResponseErrorEnum[keyof typeof GetDatabaseTableViewGroup404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableViewSort404Response
 */
export interface GetDatabaseTableViewSort404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableViewSort404Response
     */
    'error'?: GetDatabaseTableViewSort404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableViewSort404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableViewSort404ResponseErrorEnum: {
    readonly ErrorViewSortDoesNotExist: "ERROR_VIEW_SORT_DOES_NOT_EXIST";
};
export type GetDatabaseTableViewSort404ResponseErrorEnum = typeof GetDatabaseTableViewSort404ResponseErrorEnum[keyof typeof GetDatabaseTableViewSort404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseTableWebhook404Response
 */
export interface GetDatabaseTableWebhook404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseTableWebhook404Response
     */
    'error'?: GetDatabaseTableWebhook404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseTableWebhook404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseTableWebhook404ResponseErrorEnum: {
    readonly ErrorTableWebhookDoesNotExist: "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST";
};
export type GetDatabaseTableWebhook404ResponseErrorEnum = typeof GetDatabaseTableWebhook404ResponseErrorEnum[keyof typeof GetDatabaseTableWebhook404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetDatabaseToken404Response
 */
export interface GetDatabaseToken404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetDatabaseToken404Response
     */
    'error'?: GetDatabaseToken404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetDatabaseToken404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetDatabaseToken404ResponseErrorEnum: {
    readonly ErrorTokenDoesNotExist: "ERROR_TOKEN_DOES_NOT_EXIST";
};
export type GetDatabaseToken404ResponseErrorEnum = typeof GetDatabaseToken404ResponseErrorEnum[keyof typeof GetDatabaseToken404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetExportJob404Response
 */
export interface GetExportJob404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetExportJob404Response
     */
    'error'?: GetExportJob404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetExportJob404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetExportJob404ResponseErrorEnum: {
    readonly ErrorExportJobDoesNotExist: "ERROR_EXPORT_JOB_DOES_NOT_EXIST";
};
export type GetExportJob404ResponseErrorEnum = typeof GetExportJob404ResponseErrorEnum[keyof typeof GetExportJob404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetGroupInvitation400Response
 */
export interface GetGroupInvitation400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetGroupInvitation400Response
     */
    'error'?: GetGroupInvitation400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetGroupInvitation400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetGroupInvitation400ResponseErrorEnum: {
    readonly NotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly InvalidGroupPermissions: "ERROR_USER_INVALID_GROUP_PERMISSIONS";
};
export type GetGroupInvitation400ResponseErrorEnum = typeof GetGroupInvitation400ResponseErrorEnum[keyof typeof GetGroupInvitation400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetGroupInvitation404Response
 */
export interface GetGroupInvitation404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetGroupInvitation404Response
     */
    'error'?: GetGroupInvitation404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetGroupInvitation404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetGroupInvitation404ResponseErrorEnum: {
    readonly ErrorGroupInvitationDoesNotExist: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
};
export type GetGroupInvitation404ResponseErrorEnum = typeof GetGroupInvitation404ResponseErrorEnum[keyof typeof GetGroupInvitation404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetGroupInvitationByToken400Response
 */
export interface GetGroupInvitationByToken400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetGroupInvitationByToken400Response
     */
    'error'?: GetGroupInvitationByToken400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetGroupInvitationByToken400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetGroupInvitationByToken400ResponseErrorEnum: {
    readonly BadTokenSignature: "BAD_TOKEN_SIGNATURE";
};
export type GetGroupInvitationByToken400ResponseErrorEnum = typeof GetGroupInvitationByToken400ResponseErrorEnum[keyof typeof GetGroupInvitationByToken400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetJob404Response
 */
export interface GetJob404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetJob404Response
     */
    'error'?: GetJob404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetJob404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetJob404ResponseErrorEnum: {
    readonly ErrorJobDoesNotExist: "ERROR_JOB_DOES_NOT_EXIST";
};
export type GetJob404ResponseErrorEnum = typeof GetJob404ResponseErrorEnum[keyof typeof GetJob404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetMetaDatabaseTableFormView401Response
 */
export interface GetMetaDatabaseTableFormView401Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetMetaDatabaseTableFormView401Response
     */
    'error'?: GetMetaDatabaseTableFormView401ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetMetaDatabaseTableFormView401Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetMetaDatabaseTableFormView401ResponseErrorEnum: {
    readonly ErrorNoPermissionToPubliclySharedForm: "ERROR_NO_PERMISSION_TO_PUBLICLY_SHARED_FORM";
};
export type GetMetaDatabaseTableFormView401ResponseErrorEnum = typeof GetMetaDatabaseTableFormView401ResponseErrorEnum[keyof typeof GetMetaDatabaseTableFormView401ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetMetaDatabaseTableFormView404Response
 */
export interface GetMetaDatabaseTableFormView404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetMetaDatabaseTableFormView404Response
     */
    'error'?: GetMetaDatabaseTableFormView404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetMetaDatabaseTableFormView404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetMetaDatabaseTableFormView404ResponseErrorEnum: {
    readonly ErrorFormDoesNotExist: "ERROR_FORM_DOES_NOT_EXIST";
};
export type GetMetaDatabaseTableFormView404ResponseErrorEnum = typeof GetMetaDatabaseTableFormView404ResponseErrorEnum[keyof typeof GetMetaDatabaseTableFormView404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetPublicBuilderById404Response
 */
export interface GetPublicBuilderById404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetPublicBuilderById404Response
     */
    'error'?: GetPublicBuilderById404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetPublicBuilderById404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetPublicBuilderById404ResponseErrorEnum: {
    readonly ErrorBuilderDoesNotExist: "ERROR_BUILDER_DOES_NOT_EXIST";
};
export type GetPublicBuilderById404ResponseErrorEnum = typeof GetPublicBuilderById404ResponseErrorEnum[keyof typeof GetPublicBuilderById404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GetTeam404Response
 */
export interface GetTeam404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GetTeam404Response
     */
    'error'?: GetTeam404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GetTeam404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GetTeam404ResponseErrorEnum: {
    readonly ErrorTeamDoesNotExist: "ERROR_TEAM_DOES_NOT_EXIST";
};
export type GetTeam404ResponseErrorEnum = typeof GetTeam404ResponseErrorEnum[keyof typeof GetTeam404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GitHubAuthProviderModelAuthProvider
 */
export interface GitHubAuthProviderModelAuthProvider {
    /**
     *
     * @type {number}
     * @memberof GitHubAuthProviderModelAuthProvider
     */
    'id': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof GitHubAuthProviderModelAuthProvider
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof GitHubAuthProviderModelAuthProvider
     */
    'domain'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof GitHubAuthProviderModelAuthProvider
     */
    'enabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof GitHubAuthProviderModelAuthProvider
     */
    'name': string;
    /**
     * App ID, or consumer key
     * @type {string}
     * @memberof GitHubAuthProviderModelAuthProvider
     */
    'client_id': string;
    /**
     * API secret, client secret, or consumer secret
     * @type {string}
     * @memberof GitHubAuthProviderModelAuthProvider
     */
    'secret': string;
}
/**
 *
 * @export
 * @interface GitLabAuthProviderModelAuthProvider
 */
export interface GitLabAuthProviderModelAuthProvider {
    /**
     *
     * @type {number}
     * @memberof GitLabAuthProviderModelAuthProvider
     */
    'id': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof GitLabAuthProviderModelAuthProvider
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof GitLabAuthProviderModelAuthProvider
     */
    'domain'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof GitLabAuthProviderModelAuthProvider
     */
    'enabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof GitLabAuthProviderModelAuthProvider
     */
    'name': string;
    /**
     * Base URL of the authorization server
     * @type {string}
     * @memberof GitLabAuthProviderModelAuthProvider
     */
    'base_url': string;
    /**
     * App ID, or consumer key
     * @type {string}
     * @memberof GitLabAuthProviderModelAuthProvider
     */
    'client_id': string;
    /**
     * API secret, client secret, or consumer secret
     * @type {string}
     * @memberof GitLabAuthProviderModelAuthProvider
     */
    'secret': string;
}
/**
 *
 * @export
 * @interface GoogleAuthProviderModelAuthProvider
 */
export interface GoogleAuthProviderModelAuthProvider {
    /**
     *
     * @type {number}
     * @memberof GoogleAuthProviderModelAuthProvider
     */
    'id': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof GoogleAuthProviderModelAuthProvider
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof GoogleAuthProviderModelAuthProvider
     */
    'domain'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof GoogleAuthProviderModelAuthProvider
     */
    'enabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof GoogleAuthProviderModelAuthProvider
     */
    'name': string;
    /**
     * App ID, or consumer key
     * @type {string}
     * @memberof GoogleAuthProviderModelAuthProvider
     */
    'client_id': string;
    /**
     * API secret, client secret, or consumer secret
     * @type {string}
     * @memberof GoogleAuthProviderModelAuthProvider
     */
    'secret': string;
}
/**
 *
 * @export
 * @interface GridViewCreateView
 */
export interface GridViewCreateView {
    /**
     *
     * @type {string}
     * @memberof GridViewCreateView
     */
    'name': string;
    /**
     *
     * @type {ViewTypesEnum}
     * @memberof GridViewCreateView
     */
    'type': ViewTypesEnum;
    /**
     *
     * @type {OwnershipTypeEnum}
     * @memberof GridViewCreateView
     */
    'ownership_type'?: OwnershipTypeEnum;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof GridViewCreateView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof GridViewCreateView
     */
    'filters_disabled'?: boolean;
    /**
     *
     * @type {RowIdentifierTypeEnum}
     * @memberof GridViewCreateView
     */
    'row_identifier_type'?: RowIdentifierTypeEnum;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof GridViewCreateView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof GridViewCreateView
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface GridViewFieldOptions
 */
export interface GridViewFieldOptions {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: GridViewFieldOptions; }}
     * @memberof GridViewFieldOptions
     */
    'field_options': {
        [key: string]: GridViewFieldOptions;
    };
}
/**
 * @type GridViewFieldOptionsAggregationRawType
 * Indicates how to compute the raw aggregation value from database. This type must be registered in the backend prior to use it.  * `empty_count` - empty_count * `not_empty_count` - not_empty_count * `unique_count` - unique_count * `min` - min * `max` - max * `sum` - sum * `average` - average * `median` - median * `decile` - decile * `variance` - variance * `std_dev` - std_dev
 * @export
 */
export type GridViewFieldOptionsAggregationRawType = AggregationRawTypeEnum | BlankEnum;
/**
 *
 * @export
 * @interface GridViewFilter
 */
export interface GridViewFilter {
    /**
     * Only the fields related to the provided ids are added to the response. If None are provided all fields will be returned.
     * @type {Array<number>}
     * @memberof GridViewFilter
     */
    'field_ids'?: Array<number>;
    /**
     * Only rows related to the provided ids are added to the response.
     * @type {Array<number>}
     * @memberof GridViewFilter
     */
    'row_ids': Array<number>;
}
/**
 *
 * @export
 * @interface GridViewUpdate
 */
export interface GridViewUpdate {
    /**
     *
     * @type {string}
     * @memberof GridViewUpdate
     */
    'name'?: string;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof GridViewUpdate
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof GridViewUpdate
     */
    'filters_disabled'?: boolean;
    /**
     * The new password or an empty string to remove any previous password from the view and make it publicly accessible again.
     * @type {string}
     * @memberof GridViewUpdate
     */
    'public_view_password'?: string;
    /**
     * Indicates how the access to the view is determined. By default, views are collaborative and shared for all users that have access to the table.
     * @type {string}
     * @memberof GridViewUpdate
     */
    'ownership_type'?: string;
    /**
     *
     * @type {RowIdentifierTypeEnum}
     * @memberof GridViewUpdate
     */
    'row_identifier_type'?: RowIdentifierTypeEnum;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof GridViewUpdate
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof GridViewUpdate
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface GridViewView
 */
export interface GridViewView {
    /**
     *
     * @type {number}
     * @memberof GridViewView
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof GridViewView
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof GridViewView
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof GridViewView
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof GridViewView
     */
    'type': string;
    /**
     *
     * @type {Table}
     * @memberof GridViewView
     */
    'table': Table;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof GridViewView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     *
     * @type {Array<ViewFilter>}
     * @memberof GridViewView
     */
    'filters'?: Array<ViewFilter>;
    /**
     *
     * @type {Array<ViewFilterGroup>}
     * @memberof GridViewView
     */
    'filter_groups'?: Array<ViewFilterGroup>;
    /**
     *
     * @type {Array<ViewSort>}
     * @memberof GridViewView
     */
    'sortings'?: Array<ViewSort>;
    /**
     *
     * @type {Array<ViewGroupBy>}
     * @memberof GridViewView
     */
    'group_bys'?: Array<ViewGroupBy>;
    /**
     *
     * @type {Array<ViewDecoration>}
     * @memberof GridViewView
     */
    'decorations'?: Array<ViewDecoration>;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof GridViewView
     */
    'filters_disabled'?: boolean;
    /**
     * Indicates whether the public view is password protected or not.  :return: True if the public view is password protected, False otherwise.
     * @type {boolean}
     * @memberof GridViewView
     */
    'public_view_has_password': boolean;
    /**
     *
     * @type {boolean}
     * @memberof GridViewView
     */
    'show_logo'?: boolean;
    /**
     *
     * @type {string}
     * @memberof GridViewView
     */
    'ownership_type': string;
    /**
     *
     * @type {number}
     * @memberof GridViewView
     */
    'owned_by_id'?: number;
    /**
     *
     * @type {RowIdentifierTypeEnum}
     * @memberof GridViewView
     */
    'row_identifier_type'?: RowIdentifierTypeEnum;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof GridViewView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof GridViewView
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface GroupAssignRole400Response
 */
export interface GroupAssignRole400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupAssignRole400Response
     */
    'error'?: GroupAssignRole400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupAssignRole400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupAssignRole400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly CantAssignRoleExceptionToAdmin: "ERROR_CANT_ASSIGN_ROLE_EXCEPTION_TO_ADMIN";
};
export type GroupAssignRole400ResponseErrorEnum = typeof GroupAssignRole400ResponseErrorEnum[keyof typeof GroupAssignRole400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupAssignRole404Response
 */
export interface GroupAssignRole404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupAssignRole404Response
     */
    'error'?: GroupAssignRole404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupAssignRole404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupAssignRole404ResponseErrorEnum: {
    readonly ScopeDoesNotExist: "ERROR_SCOPE_DOES_NOT_EXIST";
    readonly GroupDoesNotExist: "ERROR_GROUP_DOES_NOT_EXIST";
    readonly ObjectScopeTypeDoesNotExist: "ERROR_OBJECT_SCOPE_TYPE_DOES_NOT_EXIST";
    readonly SubjectTypeDoesNotExist: "ERROR_SUBJECT_TYPE_DOES_NOT_EXIST";
    readonly RoleDoesNotExist: "ERROR_ROLE_DOES_NOT_EXIST";
};
export type GroupAssignRole404ResponseErrorEnum = typeof GroupAssignRole404ResponseErrorEnum[keyof typeof GroupAssignRole404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupBatchAssignRole400Response
 */
export interface GroupBatchAssignRole400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupBatchAssignRole400Response
     */
    'error'?: GroupBatchAssignRole400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupBatchAssignRole400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupBatchAssignRole400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly DuplicateRoleAssignments: "ERROR_DUPLICATE_ROLE_ASSIGNMENTS";
    readonly CantAssignRoleExceptionToAdmin: "ERROR_CANT_ASSIGN_ROLE_EXCEPTION_TO_ADMIN";
};
export type GroupBatchAssignRole400ResponseErrorEnum = typeof GroupBatchAssignRole400ResponseErrorEnum[keyof typeof GroupBatchAssignRole400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupCreateTeam400Response
 */
export interface GroupCreateTeam400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupCreateTeam400Response
     */
    'error'?: GroupCreateTeam400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupCreateTeam400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupCreateTeam400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly SubjectBadRequest: "ERROR_SUBJECT_BAD_REQUEST";
    readonly TeamNameNotUnique: "ERROR_TEAM_NAME_NOT_UNIQUE";
    readonly SubjectNotInGroup: "ERROR_SUBJECT_NOT_IN_GROUP";
    readonly SubjectTypeUnsupported: "ERROR_SUBJECT_TYPE_UNSUPPORTED";
};
export type GroupCreateTeam400ResponseErrorEnum = typeof GroupCreateTeam400ResponseErrorEnum[keyof typeof GroupCreateTeam400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupCreateTeam404Response
 */
export interface GroupCreateTeam404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupCreateTeam404Response
     */
    'error'?: GroupCreateTeam404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupCreateTeam404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupCreateTeam404ResponseErrorEnum: {
    readonly GroupDoesNotExist: "ERROR_GROUP_DOES_NOT_EXIST";
    readonly SubjectDoesNotExist: "ERROR_SUBJECT_DOES_NOT_EXIST";
    readonly RoleDoesNotExist: "ERROR_ROLE_DOES_NOT_EXIST";
};
export type GroupCreateTeam404ResponseErrorEnum = typeof GroupCreateTeam404ResponseErrorEnum[keyof typeof GroupCreateTeam404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupGetContents400Response
 */
export interface GroupGetContents400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupGetContents400Response
     */
    'error'?: GroupGetContents400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupGetContents400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupGetContents400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly ApplicationNotInGroup: "ERROR_APPLICATION_NOT_IN_GROUP";
    readonly GroupDoesNotExist: "ERROR_GROUP_DOES_NOT_EXIST";
    readonly ApplicationDoesNotExist: "ERROR_APPLICATION_DOES_NOT_EXIST";
};
export type GroupGetContents400ResponseErrorEnum = typeof GroupGetContents400ResponseErrorEnum[keyof typeof GroupGetContents400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupInstallTemplate400Response
 */
export interface GroupInstallTemplate400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupInstallTemplate400Response
     */
    'error'?: GroupInstallTemplate400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupInstallTemplate400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupInstallTemplate400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly TemplateFileDoesNotExist: "ERROR_TEMPLATE_FILE_DOES_NOT_EXIST";
};
export type GroupInstallTemplate400ResponseErrorEnum = typeof GroupInstallTemplate400ResponseErrorEnum[keyof typeof GroupInstallTemplate400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupInstallTemplate404Response
 */
export interface GroupInstallTemplate404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupInstallTemplate404Response
     */
    'error'?: GroupInstallTemplate404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupInstallTemplate404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupInstallTemplate404ResponseErrorEnum: {
    readonly GroupDoesNotExist: "ERROR_GROUP_DOES_NOT_EXIST";
    readonly TemplateDoesNotExist: "ERROR_TEMPLATE_DOES_NOT_EXIST";
};
export type GroupInstallTemplate404ResponseErrorEnum = typeof GroupInstallTemplate404ResponseErrorEnum[keyof typeof GroupInstallTemplate404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupInstallTemplateAsync400Response
 */
export interface GroupInstallTemplateAsync400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupInstallTemplateAsync400Response
     */
    'error'?: GroupInstallTemplateAsync400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupInstallTemplateAsync400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupInstallTemplateAsync400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly TemplateFileDoesNotExist: "ERROR_TEMPLATE_FILE_DOES_NOT_EXIST";
    readonly MaxJobCountExceeded: "ERROR_MAX_JOB_COUNT_EXCEEDED";
};
export type GroupInstallTemplateAsync400ResponseErrorEnum = typeof GroupInstallTemplateAsync400ResponseErrorEnum[keyof typeof GroupInstallTemplateAsync400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupListRoleAssignments404Response
 */
export interface GroupListRoleAssignments404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupListRoleAssignments404Response
     */
    'error'?: GroupListRoleAssignments404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupListRoleAssignments404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupListRoleAssignments404ResponseErrorEnum: {
    readonly ScopeDoesNotExist: "ERROR_SCOPE_DOES_NOT_EXIST";
    readonly GroupDoesNotExist: "ERROR_GROUP_DOES_NOT_EXIST";
    readonly ObjectScopeTypeDoesNotExist: "ERROR_OBJECT_SCOPE_TYPE_DOES_NOT_EXIST";
};
export type GroupListRoleAssignments404ResponseErrorEnum = typeof GroupListRoleAssignments404ResponseErrorEnum[keyof typeof GroupListRoleAssignments404ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupOrderApplications400Response
 */
export interface GroupOrderApplications400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupOrderApplications400Response
     */
    'error'?: GroupOrderApplications400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupOrderApplications400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupOrderApplications400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly ApplicationNotInGroup: "ERROR_APPLICATION_NOT_IN_GROUP";
};
export type GroupOrderApplications400ResponseErrorEnum = typeof GroupOrderApplications400ResponseErrorEnum[keyof typeof GroupOrderApplications400ResponseErrorEnum];
/**
 *
 * @export
 * @interface GroupPermissions404Response
 */
export interface GroupPermissions404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof GroupPermissions404Response
     */
    'error'?: GroupPermissions404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof GroupPermissions404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const GroupPermissions404ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly GroupDoesNotExist: "ERROR_GROUP_DOES_NOT_EXIST";
};
export type GroupPermissions404ResponseErrorEnum = typeof GroupPermissions404ResponseErrorEnum[keyof typeof GroupPermissions404ResponseErrorEnum];
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface HeadingElementCreateElement
 */
export interface HeadingElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof HeadingElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof HeadingElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof HeadingElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof HeadingElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {TypographyConfigBlock}
     * @memberof HeadingElementCreateElement
     */
    'styles'?: TypographyConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof HeadingElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof HeadingElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof HeadingElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof HeadingElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof HeadingElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof HeadingElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof HeadingElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof HeadingElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof HeadingElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The value of the element. Must be an formula.
     * @type {string}
     * @memberof HeadingElementCreateElement
     */
    'value'?: string;
    /**
     * The level of the heading from 1 to 6.
     * @type {number}
     * @memberof HeadingElementCreateElement
     */
    'level'?: number;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface HeadingElementElement
 */
export interface HeadingElementElement {
    /**
     *
     * @type {number}
     * @memberof HeadingElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof HeadingElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof HeadingElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof HeadingElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof HeadingElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof HeadingElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {TypographyConfigBlock}
     * @memberof HeadingElementElement
     */
    'styles'?: TypographyConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof HeadingElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof HeadingElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof HeadingElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof HeadingElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof HeadingElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof HeadingElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof HeadingElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof HeadingElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof HeadingElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof HeadingElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof HeadingElementElement
     */
    'roles'?: any;
    /**
     * The value of the element. Must be an formula.
     * @type {string}
     * @memberof HeadingElementElement
     */
    'value'?: string;
    /**
     * The level of the heading from 1 to 6.
     * @type {number}
     * @memberof HeadingElementElement
     */
    'level'?: number;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface HeadingElementPublicElement
 */
export interface HeadingElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof HeadingElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof HeadingElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof HeadingElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof HeadingElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {TypographyConfigBlock}
     * @memberof HeadingElementPublicElement
     */
    'styles'?: TypographyConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof HeadingElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof HeadingElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof HeadingElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof HeadingElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof HeadingElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof HeadingElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof HeadingElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof HeadingElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof HeadingElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof HeadingElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof HeadingElementPublicElement
     */
    'roles'?: any;
    /**
     * The value of the element. Must be an formula.
     * @type {string}
     * @memberof HeadingElementPublicElement
     */
    'value'?: string;
    /**
     * The level of the heading from 1 to 6.
     * @type {number}
     * @memberof HeadingElementPublicElement
     */
    'level'?: number;
}
/**
 *
 * @export
 * @interface HeadingElementUpdateElement
 */
export interface HeadingElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof HeadingElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {TypographyConfigBlock}
     * @memberof HeadingElementUpdateElement
     */
    'styles'?: TypographyConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof HeadingElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof HeadingElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof HeadingElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof HeadingElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof HeadingElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof HeadingElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof HeadingElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof HeadingElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof HeadingElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof HeadingElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof HeadingElementUpdateElement
     */
    'roles'?: any;
    /**
     * The value of the element. Must be an formula.
     * @type {string}
     * @memberof HeadingElementUpdateElement
     */
    'value'?: string;
    /**
     * The level of the heading from 1 to 6.
     * @type {number}
     * @memberof HeadingElementUpdateElement
     */
    'level'?: number;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface IFrameElementCreateElement
 */
export interface IFrameElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof IFrameElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof IFrameElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof IFrameElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof IFrameElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     * The theme overrides for this element
     * @type {any}
     * @memberof IFrameElementCreateElement
     */
    'styles'?: any;
    /**
     * Top border color.
     * @type {string}
     * @memberof IFrameElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof IFrameElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof IFrameElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof IFrameElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof IFrameElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof IFrameElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof IFrameElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof IFrameElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof IFrameElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {SourceTypeEnum}
     * @memberof IFrameElementCreateElement
     */
    'source_type'?: SourceTypeEnum;
    /**
     * A link to the page to embed
     * @type {string}
     * @memberof IFrameElementCreateElement
     */
    'url'?: string;
    /**
     * Inline HTML to embed
     * @type {string}
     * @memberof IFrameElementCreateElement
     */
    'embed'?: string;
    /**
     * Height in pixels of the iframe
     * @type {number}
     * @memberof IFrameElementCreateElement
     */
    'height'?: number;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface IFrameElementElement
 */
export interface IFrameElementElement {
    /**
     *
     * @type {number}
     * @memberof IFrameElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof IFrameElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof IFrameElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof IFrameElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof IFrameElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof IFrameElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     * The theme overrides for this element
     * @type {any}
     * @memberof IFrameElementElement
     */
    'styles'?: any;
    /**
     * Top border color.
     * @type {string}
     * @memberof IFrameElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof IFrameElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof IFrameElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof IFrameElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof IFrameElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof IFrameElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof IFrameElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof IFrameElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof IFrameElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof IFrameElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof IFrameElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof IFrameElementElement
     */
    'roles'?: any;
    /**
     *
     * @type {SourceTypeEnum}
     * @memberof IFrameElementElement
     */
    'source_type'?: SourceTypeEnum;
    /**
     * A link to the page to embed
     * @type {string}
     * @memberof IFrameElementElement
     */
    'url'?: string;
    /**
     * Inline HTML to embed
     * @type {string}
     * @memberof IFrameElementElement
     */
    'embed'?: string;
    /**
     * Height in pixels of the iframe
     * @type {number}
     * @memberof IFrameElementElement
     */
    'height'?: number;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface IFrameElementPublicElement
 */
export interface IFrameElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof IFrameElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     * The theme overrides for this element
     * @type {any}
     * @memberof IFrameElementPublicElement
     */
    'styles'?: any;
    /**
     * Top border color.
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof IFrameElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof IFrameElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof IFrameElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof IFrameElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof IFrameElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof IFrameElementPublicElement
     */
    'roles'?: any;
    /**
     *
     * @type {SourceTypeEnum}
     * @memberof IFrameElementPublicElement
     */
    'source_type'?: SourceTypeEnum;
    /**
     * A link to the page to embed
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'url'?: string;
    /**
     * Inline HTML to embed
     * @type {string}
     * @memberof IFrameElementPublicElement
     */
    'embed'?: string;
    /**
     * Height in pixels of the iframe
     * @type {number}
     * @memberof IFrameElementPublicElement
     */
    'height'?: number;
}
/**
 *
 * @export
 * @interface IFrameElementUpdateElement
 */
export interface IFrameElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof IFrameElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     * The theme overrides for this element
     * @type {any}
     * @memberof IFrameElementUpdateElement
     */
    'styles'?: any;
    /**
     * Top border color.
     * @type {string}
     * @memberof IFrameElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof IFrameElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof IFrameElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof IFrameElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof IFrameElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof IFrameElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof IFrameElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof IFrameElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof IFrameElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof IFrameElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof IFrameElementUpdateElement
     */
    'roles'?: any;
    /**
     *
     * @type {SourceTypeEnum}
     * @memberof IFrameElementUpdateElement
     */
    'source_type'?: SourceTypeEnum;
    /**
     * A link to the page to embed
     * @type {string}
     * @memberof IFrameElementUpdateElement
     */
    'url'?: string;
    /**
     * Inline HTML to embed
     * @type {string}
     * @memberof IFrameElementUpdateElement
     */
    'embed'?: string;
    /**
     * Height in pixels of the iframe
     * @type {number}
     * @memberof IFrameElementUpdateElement
     */
    'height'?: number;
}
/**
 * * `create_group` - create_group * `delete_group` - delete_group * `update_group` - update_group * `order_groups` - order_groups * `create_application` - create_application * `update_application` - update_application * `delete_application` - delete_application * `order_applications` - order_applications * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_group_invitation` - create_group_invitation * `delete_group_invitation` - delete_group_invitation * `accept_group_invitation` - accept_group_invitation * `reject_group_invitation` - reject_group_invitation * `update_group_invitation_permissions` - update_group_invitation_permissions * `leave_group` - leave_group * `create_initial_workspace` - create_initial_workspace * `create_snapshot` - create_snapshot * `delete_snapshot` - delete_snapshot * `restore_snapshot` - restore_snapshot * `empty_trash` - empty_trash * `restore_from_trash` - restore_from_trash * `create_user` - create_user * `update_user` - update_user * `schedule_user_deletion` - schedule_user_deletion * `cancel_user_deletion` - cancel_user_deletion * `sign_in_user` - sign_in_user * `change_user_password` - change_user_password * `send_reset_user_password` - send_reset_user_password * `reset_user_password` - reset_user_password * `send_verify_email` - send_verify_email * `verify_email` - verify_email * `create_db_token` - create_db_token * `update_db_token_name` - update_db_token_name * `update_db_token_permissions` - update_db_token_permissions * `rotate_db_token_key` - rotate_db_token_key * `delete_db_token_key` - delete_db_token_key * `create_webhook` - create_webhook * `delete_webhook` - delete_webhook * `update_webhook` - update_webhook * `export_table` - export_table * `import_database_from_airtable` - import_database_from_airtable * `create_table` - create_table * `delete_table` - delete_table * `order_tables` - order_tables * `update_table` - update_table * `duplicate_table` - duplicate_table * `create_row` - create_row * `create_rows` - create_rows * `import_rows` - import_rows * `delete_row` - delete_row * `delete_rows` - delete_rows * `move_row` - move_row * `update_row` - update_row * `update_rows` - update_rows * `create_view` - create_view * `duplicate_view` - duplicate_view * `delete_view` - delete_view * `order_views` - order_views * `update_view` - update_view * `create_view_filter` - create_view_filter * `update_view_filter` - update_view_filter * `delete_view_filter` - delete_view_filter * `create_view_sort` - create_view_sort * `update_view_sort` - update_view_sort * `delete_view_sort` - delete_view_sort * `create_view_group` - create_view_group * `update_view_group` - update_view_group * `delete_view_group` - delete_view_group * `rotate_view_slug` - rotate_view_slug * `update_view_field_options` - update_view_field_options * `create_decoration` - create_decoration * `update_decoration` - update_decoration * `delete_decoration` - delete_decoration * `create_view_filter_group` - create_view_filter_group * `update_view_filter_group` - update_view_filter_group * `delete_view_filter_group` - delete_view_filter_group * `create_field` - create_field * `delete_field` - delete_field * `update_field` - update_field * `duplicate_field` - duplicate_field * `change_primary_field` - change_primary_field * `generate_formula_with_ai` - generate_formula_with_ai * `create_row_comment` - create_row_comment * `delete_row_comment` - delete_row_comment * `update_row_comment` - update_row_comment * `rotate_calendar_ical_view_slug` - rotate_calendar_ical_view_slug * `create_team` - create_team * `update_team` - update_team * `delete_team` - delete_team * `create_team_subject` - create_team_subject * `delete_team_subject` - delete_team_subject * `batch_assign_role` - batch_assign_role
 * @export
 * @enum {string}
 */
export declare const IdEnum: {
    readonly CreateGroup: "create_group";
    readonly DeleteGroup: "delete_group";
    readonly UpdateGroup: "update_group";
    readonly OrderGroups: "order_groups";
    readonly CreateApplication: "create_application";
    readonly UpdateApplication: "update_application";
    readonly DeleteApplication: "delete_application";
    readonly OrderApplications: "order_applications";
    readonly DuplicateApplication: "duplicate_application";
    readonly InstallTemplate: "install_template";
    readonly CreateGroupInvitation: "create_group_invitation";
    readonly DeleteGroupInvitation: "delete_group_invitation";
    readonly AcceptGroupInvitation: "accept_group_invitation";
    readonly RejectGroupInvitation: "reject_group_invitation";
    readonly UpdateGroupInvitationPermissions: "update_group_invitation_permissions";
    readonly LeaveGroup: "leave_group";
    readonly CreateInitialWorkspace: "create_initial_workspace";
    readonly CreateSnapshot: "create_snapshot";
    readonly DeleteSnapshot: "delete_snapshot";
    readonly RestoreSnapshot: "restore_snapshot";
    readonly EmptyTrash: "empty_trash";
    readonly RestoreFromTrash: "restore_from_trash";
    readonly CreateUser: "create_user";
    readonly UpdateUser: "update_user";
    readonly ScheduleUserDeletion: "schedule_user_deletion";
    readonly CancelUserDeletion: "cancel_user_deletion";
    readonly SignInUser: "sign_in_user";
    readonly ChangeUserPassword: "change_user_password";
    readonly SendResetUserPassword: "send_reset_user_password";
    readonly ResetUserPassword: "reset_user_password";
    readonly SendVerifyEmail: "send_verify_email";
    readonly VerifyEmail: "verify_email";
    readonly CreateDbToken: "create_db_token";
    readonly UpdateDbTokenName: "update_db_token_name";
    readonly UpdateDbTokenPermissions: "update_db_token_permissions";
    readonly RotateDbTokenKey: "rotate_db_token_key";
    readonly DeleteDbTokenKey: "delete_db_token_key";
    readonly CreateWebhook: "create_webhook";
    readonly DeleteWebhook: "delete_webhook";
    readonly UpdateWebhook: "update_webhook";
    readonly ExportTable: "export_table";
    readonly ImportDatabaseFromAirtable: "import_database_from_airtable";
    readonly CreateTable: "create_table";
    readonly DeleteTable: "delete_table";
    readonly OrderTables: "order_tables";
    readonly UpdateTable: "update_table";
    readonly DuplicateTable: "duplicate_table";
    readonly CreateRow: "create_row";
    readonly CreateRows: "create_rows";
    readonly ImportRows: "import_rows";
    readonly DeleteRow: "delete_row";
    readonly DeleteRows: "delete_rows";
    readonly MoveRow: "move_row";
    readonly UpdateRow: "update_row";
    readonly UpdateRows: "update_rows";
    readonly CreateView: "create_view";
    readonly DuplicateView: "duplicate_view";
    readonly DeleteView: "delete_view";
    readonly OrderViews: "order_views";
    readonly UpdateView: "update_view";
    readonly CreateViewFilter: "create_view_filter";
    readonly UpdateViewFilter: "update_view_filter";
    readonly DeleteViewFilter: "delete_view_filter";
    readonly CreateViewSort: "create_view_sort";
    readonly UpdateViewSort: "update_view_sort";
    readonly DeleteViewSort: "delete_view_sort";
    readonly CreateViewGroup: "create_view_group";
    readonly UpdateViewGroup: "update_view_group";
    readonly DeleteViewGroup: "delete_view_group";
    readonly RotateViewSlug: "rotate_view_slug";
    readonly UpdateViewFieldOptions: "update_view_field_options";
    readonly CreateDecoration: "create_decoration";
    readonly UpdateDecoration: "update_decoration";
    readonly DeleteDecoration: "delete_decoration";
    readonly CreateViewFilterGroup: "create_view_filter_group";
    readonly UpdateViewFilterGroup: "update_view_filter_group";
    readonly DeleteViewFilterGroup: "delete_view_filter_group";
    readonly CreateField: "create_field";
    readonly DeleteField: "delete_field";
    readonly UpdateField: "update_field";
    readonly DuplicateField: "duplicate_field";
    readonly ChangePrimaryField: "change_primary_field";
    readonly GenerateFormulaWithAi: "generate_formula_with_ai";
    readonly CreateRowComment: "create_row_comment";
    readonly DeleteRowComment: "delete_row_comment";
    readonly UpdateRowComment: "update_row_comment";
    readonly RotateCalendarIcalViewSlug: "rotate_calendar_ical_view_slug";
    readonly CreateTeam: "create_team";
    readonly UpdateTeam: "update_team";
    readonly DeleteTeam: "delete_team";
    readonly CreateTeamSubject: "create_team_subject";
    readonly DeleteTeamSubject: "delete_team_subject";
    readonly BatchAssignRole: "batch_assign_role";
};
export type IdEnum = typeof IdEnum[keyof typeof IdEnum];
/**
 * Style overrides for this element.
 * @export
 * @interface ImageConfigBlock
 */
export interface ImageConfigBlock {
    /**
     * Styles overrides for image
     * @type {ImageThemeConfigBlock}
     * @memberof ImageConfigBlock
     */
    'image'?: ImageThemeConfigBlock;
}
/**
 * * `cover` - Cover * `contain` - Contain * `full-width` - Full Width
 * @export
 * @enum {string}
 */
export declare const ImageConstraintEnum: {
    readonly Cover: "cover";
    readonly Contain: "contain";
    readonly FullWidth: "full-width";
};
export type ImageConstraintEnum = typeof ImageConstraintEnum[keyof typeof ImageConstraintEnum];
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface ImageElementCreateElement
 */
export interface ImageElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof ImageElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof ImageElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ImageElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ImageElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ImageConfigBlock}
     * @memberof ImageElementCreateElement
     */
    'styles'?: ImageConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ImageElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ImageElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ImageElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ImageElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ImageElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ImageElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ImageElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ImageElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ImageElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ImageElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {ImageSourceTypeEnum}
     * @memberof ImageElementCreateElement
     */
    'image_source_type'?: ImageSourceTypeEnum;
    /**
     * The image file
     * @type {UserFile}
     * @memberof ImageElementCreateElement
     */
    'image_file'?: UserFile | null;
    /**
     * A link to the image file
     * @type {string}
     * @memberof ImageElementCreateElement
     */
    'image_url'?: string;
    /**
     * Text that is displayed when the image can\'t load
     * @type {string}
     * @memberof ImageElementCreateElement
     */
    'alt_text'?: string;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface ImageElementElement
 */
export interface ImageElementElement {
    /**
     *
     * @type {number}
     * @memberof ImageElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof ImageElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof ImageElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof ImageElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof ImageElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ImageElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ImageElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ImageConfigBlock}
     * @memberof ImageElementElement
     */
    'styles'?: ImageConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ImageElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ImageElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ImageElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ImageElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ImageElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ImageElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ImageElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ImageElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ImageElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ImageElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ImageElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ImageElementElement
     */
    'roles'?: any;
    /**
     *
     * @type {ImageSourceTypeEnum}
     * @memberof ImageElementElement
     */
    'image_source_type'?: ImageSourceTypeEnum;
    /**
     *
     * @type {UserFile}
     * @memberof ImageElementElement
     */
    'image_file'?: UserFile;
    /**
     * A link to the image file
     * @type {string}
     * @memberof ImageElementElement
     */
    'image_url'?: string;
    /**
     * Text that is displayed when the image can\'t load
     * @type {string}
     * @memberof ImageElementElement
     */
    'alt_text'?: string;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface ImageElementPublicElement
 */
export interface ImageElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ImageElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ImageConfigBlock}
     * @memberof ImageElementPublicElement
     */
    'styles'?: ImageConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ImageElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ImageElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ImageElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ImageElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ImageElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ImageElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ImageElementPublicElement
     */
    'roles'?: any;
    /**
     *
     * @type {ImageSourceTypeEnum}
     * @memberof ImageElementPublicElement
     */
    'image_source_type'?: ImageSourceTypeEnum;
    /**
     *
     * @type {UserFile}
     * @memberof ImageElementPublicElement
     */
    'image_file'?: UserFile;
    /**
     * A link to the image file
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'image_url'?: string;
    /**
     * Text that is displayed when the image can\'t load
     * @type {string}
     * @memberof ImageElementPublicElement
     */
    'alt_text'?: string;
}
/**
 *
 * @export
 * @interface ImageElementUpdateElement
 */
export interface ImageElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof ImageElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ImageConfigBlock}
     * @memberof ImageElementUpdateElement
     */
    'styles'?: ImageConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof ImageElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof ImageElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof ImageElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof ImageElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof ImageElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof ImageElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof ImageElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof ImageElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof ImageElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof ImageElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof ImageElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof ImageElementUpdateElement
     */
    'roles'?: any;
    /**
     *
     * @type {ImageSourceTypeEnum}
     * @memberof ImageElementUpdateElement
     */
    'image_source_type'?: ImageSourceTypeEnum;
    /**
     * The image file
     * @type {UserFile}
     * @memberof ImageElementUpdateElement
     */
    'image_file'?: UserFile | null;
    /**
     * A link to the image file
     * @type {string}
     * @memberof ImageElementUpdateElement
     */
    'image_url'?: string;
    /**
     * Text that is displayed when the image can\'t load
     * @type {string}
     * @memberof ImageElementUpdateElement
     */
    'alt_text'?: string;
}
/**
 * * `upload` - Upload * `url` - Url
 * @export
 * @enum {string}
 */
export declare const ImageSourceTypeEnum: {
    readonly Upload: "upload";
    readonly Url: "url";
};
export type ImageSourceTypeEnum = typeof ImageSourceTypeEnum[keyof typeof ImageSourceTypeEnum];
/**
 *
 * @export
 * @interface ImageThemeConfigBlock
 */
export interface ImageThemeConfigBlock {
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof ImageThemeConfigBlock
     */
    'image_alignment'?: TableCellAlignmentEnum;
    /**
     * The max-width for this image element.
     * @type {number}
     * @memberof ImageThemeConfigBlock
     */
    'image_max_width'?: number;
    /**
     * The image max height
     * @type {number}
     * @memberof ImageThemeConfigBlock
     */
    'image_max_height'?: number;
    /**
     * The image constraint to apply to this image  * `cover` - Cover * `contain` - Contain * `full-width` - Full Width
     * @type {ImageConstraintEnum}
     * @memberof ImageThemeConfigBlock
     */
    'image_constraint'?: ImageConstraintEnum;
}
/**
 * Style overrides for this element.
 * @export
 * @interface InputConfigBlock
 */
export interface InputConfigBlock {
    /**
     * Styles overrides for input
     * @type {InputThemeConfigBlock}
     * @memberof InputConfigBlock
     */
    'input'?: InputThemeConfigBlock;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface InputTextElementCreateElement
 */
export interface InputTextElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof InputTextElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof InputTextElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof InputTextElementCreateElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof InputTextElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof InputTextElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof InputTextElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof InputTextElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The text label for this input
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'label'?: string;
    /**
     * This text input\'s default value.
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof InputTextElementCreateElement
     */
    'required'?: boolean;
    /**
     * Optionally set the validation type to use when applying form data.  * `any` - Any * `email` - Email * `integer` - Integer
     * @type {ValidationTypeEnum}
     * @memberof InputTextElementCreateElement
     */
    'validation_type'?: ValidationTypeEnum;
    /**
     * The placeholder text which should be applied to the element.
     * @type {string}
     * @memberof InputTextElementCreateElement
     */
    'placeholder'?: string;
    /**
     * Whether this text input is multiline.
     * @type {boolean}
     * @memberof InputTextElementCreateElement
     */
    'is_multiline'?: boolean;
    /**
     * Number of rows displayed by the rendered input element
     * @type {number}
     * @memberof InputTextElementCreateElement
     */
    'rows'?: number;
    /**
     * The type of the input, not applicable for multiline inputs.  * `text` - Text * `password` - Password
     * @type {InputTypeEnum}
     * @memberof InputTextElementCreateElement
     */
    'input_type'?: InputTypeEnum;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface InputTextElementElement
 */
export interface InputTextElementElement {
    /**
     *
     * @type {number}
     * @memberof InputTextElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof InputTextElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof InputTextElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof InputTextElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof InputTextElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof InputTextElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof InputTextElementElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof InputTextElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof InputTextElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof InputTextElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof InputTextElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof InputTextElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof InputTextElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof InputTextElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof InputTextElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof InputTextElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof InputTextElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof InputTextElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof InputTextElementElement
     */
    'roles'?: any;
    /**
     * The text label for this input
     * @type {string}
     * @memberof InputTextElementElement
     */
    'label'?: string;
    /**
     * This text input\'s default value.
     * @type {string}
     * @memberof InputTextElementElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof InputTextElementElement
     */
    'required'?: boolean;
    /**
     * Optionally set the validation type to use when applying form data.  * `any` - Any * `email` - Email * `integer` - Integer
     * @type {ValidationTypeEnum}
     * @memberof InputTextElementElement
     */
    'validation_type'?: ValidationTypeEnum;
    /**
     * The placeholder text which should be applied to the element.
     * @type {string}
     * @memberof InputTextElementElement
     */
    'placeholder'?: string;
    /**
     * Whether this text input is multiline.
     * @type {boolean}
     * @memberof InputTextElementElement
     */
    'is_multiline'?: boolean;
    /**
     * Number of rows displayed by the rendered input element
     * @type {number}
     * @memberof InputTextElementElement
     */
    'rows'?: number;
    /**
     * The type of the input, not applicable for multiline inputs.  * `text` - Text * `password` - Password
     * @type {InputTypeEnum}
     * @memberof InputTextElementElement
     */
    'input_type'?: InputTypeEnum;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface InputTextElementPublicElement
 */
export interface InputTextElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof InputTextElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof InputTextElementPublicElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof InputTextElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof InputTextElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof InputTextElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof InputTextElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof InputTextElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof InputTextElementPublicElement
     */
    'roles'?: any;
    /**
     * The text label for this input
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'label'?: string;
    /**
     * This text input\'s default value.
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof InputTextElementPublicElement
     */
    'required'?: boolean;
    /**
     * Optionally set the validation type to use when applying form data.  * `any` - Any * `email` - Email * `integer` - Integer
     * @type {ValidationTypeEnum}
     * @memberof InputTextElementPublicElement
     */
    'validation_type'?: ValidationTypeEnum;
    /**
     * The placeholder text which should be applied to the element.
     * @type {string}
     * @memberof InputTextElementPublicElement
     */
    'placeholder'?: string;
    /**
     * Whether this text input is multiline.
     * @type {boolean}
     * @memberof InputTextElementPublicElement
     */
    'is_multiline'?: boolean;
    /**
     * Number of rows displayed by the rendered input element
     * @type {number}
     * @memberof InputTextElementPublicElement
     */
    'rows'?: number;
    /**
     * The type of the input, not applicable for multiline inputs.  * `text` - Text * `password` - Password
     * @type {InputTypeEnum}
     * @memberof InputTextElementPublicElement
     */
    'input_type'?: InputTypeEnum;
}
/**
 *
 * @export
 * @interface InputTextElementUpdateElement
 */
export interface InputTextElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof InputTextElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {InputConfigBlock}
     * @memberof InputTextElementUpdateElement
     */
    'styles'?: InputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof InputTextElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof InputTextElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof InputTextElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof InputTextElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof InputTextElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof InputTextElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof InputTextElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof InputTextElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof InputTextElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof InputTextElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof InputTextElementUpdateElement
     */
    'roles'?: any;
    /**
     * The text label for this input
     * @type {string}
     * @memberof InputTextElementUpdateElement
     */
    'label'?: string;
    /**
     * This text input\'s default value.
     * @type {string}
     * @memberof InputTextElementUpdateElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof InputTextElementUpdateElement
     */
    'required'?: boolean;
    /**
     * Optionally set the validation type to use when applying form data.  * `any` - Any * `email` - Email * `integer` - Integer
     * @type {ValidationTypeEnum}
     * @memberof InputTextElementUpdateElement
     */
    'validation_type'?: ValidationTypeEnum;
    /**
     * The placeholder text which should be applied to the element.
     * @type {string}
     * @memberof InputTextElementUpdateElement
     */
    'placeholder'?: string;
    /**
     * Whether this text input is multiline.
     * @type {boolean}
     * @memberof InputTextElementUpdateElement
     */
    'is_multiline'?: boolean;
    /**
     * Number of rows displayed by the rendered input element
     * @type {number}
     * @memberof InputTextElementUpdateElement
     */
    'rows'?: number;
    /**
     * The type of the input, not applicable for multiline inputs.  * `text` - Text * `password` - Password
     * @type {InputTypeEnum}
     * @memberof InputTextElementUpdateElement
     */
    'input_type'?: InputTypeEnum;
}
/**
 *
 * @export
 * @interface InputThemeConfigBlock
 */
export interface InputThemeConfigBlock {
    /**
     * The font family of the label
     * @type {string}
     * @memberof InputThemeConfigBlock
     */
    'label_font_family'?: string;
    /**
     * The text color of the label
     * @type {string}
     * @memberof InputThemeConfigBlock
     */
    'label_text_color'?: string;
    /**
     * The font size of the label
     * @type {number}
     * @memberof InputThemeConfigBlock
     */
    'label_font_size'?: number;
    /**
     * The font family of the input
     * @type {string}
     * @memberof InputThemeConfigBlock
     */
    'input_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof InputThemeConfigBlock
     */
    'input_font_size'?: number;
    /**
     * The text color of the input
     * @type {string}
     * @memberof InputThemeConfigBlock
     */
    'input_text_color'?: string;
    /**
     * The background color of the input
     * @type {string}
     * @memberof InputThemeConfigBlock
     */
    'input_background_color'?: string;
    /**
     * The color of the input border
     * @type {string}
     * @memberof InputThemeConfigBlock
     */
    'input_border_color'?: string;
    /**
     * Input border size
     * @type {number}
     * @memberof InputThemeConfigBlock
     */
    'input_border_size'?: number;
    /**
     * Input border radius
     * @type {number}
     * @memberof InputThemeConfigBlock
     */
    'input_border_radius'?: number;
    /**
     * Input vertical padding
     * @type {number}
     * @memberof InputThemeConfigBlock
     */
    'input_vertical_padding'?: number;
    /**
     * Input horizontal padding
     * @type {number}
     * @memberof InputThemeConfigBlock
     */
    'input_horizontal_padding'?: number;
}
/**
 * * `text` - Text * `password` - Password
 * @export
 * @enum {string}
 */
export declare const InputTypeEnum: {
    readonly Text: "text";
    readonly Password: "password";
};
export type InputTypeEnum = typeof InputTypeEnum[keyof typeof InputTypeEnum];
/**
 *
 * @export
 * @interface InstallTemplateJobCreateJob
 */
export interface InstallTemplateJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof InstallTemplateJobCreateJob
     */
    'type': Type8b6Enum;
    /**
     * The ID of the group where the template will be installed.
     * @type {number}
     * @memberof InstallTemplateJobCreateJob
     */
    'group_id'?: number;
    /**
     * The ID of the workspace where the template will be installed.
     * @type {number}
     * @memberof InstallTemplateJobCreateJob
     */
    'workspace_id'?: number;
    /**
     * The template ID that will be installed.
     * @type {number}
     * @memberof InstallTemplateJobCreateJob
     */
    'template_id': number;
}
/**
 *
 * @export
 * @interface InstallTemplateJobJob
 */
export interface InstallTemplateJobJob {
    /**
     *
     * @type {number}
     * @memberof InstallTemplateJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof InstallTemplateJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof InstallTemplateJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof InstallTemplateJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof InstallTemplateJobJob
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {Workspace}
     * @memberof InstallTemplateJobJob
     */
    'workspace': Workspace;
    /**
     *
     * @type {Template}
     * @memberof InstallTemplateJobJob
     */
    'template': Template;
    /**
     *
     * @type {any}
     * @memberof InstallTemplateJobJob
     */
    'installed_applications': any;
    /**
     *
     * @type {Workspace}
     * @memberof InstallTemplateJobJob
     */
    'group': Workspace;
}
/**
 *
 * @export
 * @interface InstanceId
 */
export interface InstanceId {
    /**
     *
     * @type {string}
     * @memberof InstanceId
     */
    'instance_id': string;
}
/**
 * @type IntegrationCreateIntegration
 * @export
 */
export type IntegrationCreateIntegration = {
    type: 'local_baserow';
} & LocalBaserowIntegrationCreateIntegration;
/**
 * @type IntegrationIntegration
 * @export
 */
export type IntegrationIntegration = {
    type: 'local_baserow';
} & LocalBaserowIntegrationIntegration;
/**
 * @type IntegrationService
 * @export
 */
export type IntegrationService = {
    type: 'local_baserow_delete_row';
} & LocalBaserowDeleteRow | {
    type: 'local_baserow_get_row';
} & LocalBaserowGetRow | {
    type: 'local_baserow_list_rows';
} & LocalBaserowListRows | {
    type: 'local_baserow_upsert_row';
} & LocalBaserowUpsertRow;
/**
 * @type IntegrationServiceCreateDataSource
 * @export
 */
export type IntegrationServiceCreateDataSource = {
    type: 'local_baserow_delete_row';
} & LocalBaserowDeleteRowCreateDataSource | {
    type: 'local_baserow_get_row';
} & LocalBaserowGetRowCreateDataSource | {
    type: 'local_baserow_list_rows';
} & LocalBaserowListRowsCreateDataSource | {
    type: 'local_baserow_upsert_row';
} & LocalBaserowUpsertRowCreateDataSource;
/**
 * @type IntegrationServiceDataSource
 * @export
 */
export type IntegrationServiceDataSource = {
    type: 'local_baserow_delete_row';
} & LocalBaserowDeleteRowDataSource | {
    type: 'local_baserow_get_row';
} & LocalBaserowGetRowDataSource | {
    type: 'local_baserow_list_rows';
} & LocalBaserowListRowsDataSource | {
    type: 'local_baserow_upsert_row';
} & LocalBaserowUpsertRowDataSource;
/**
 * @type IntegrationServicePublicDataSource
 * @export
 */
export type IntegrationServicePublicDataSource = {
    type: 'local_baserow_delete_row';
} & LocalBaserowDeleteRowPublicDataSource | {
    type: 'local_baserow_get_row';
} & LocalBaserowGetRowPublicDataSource | {
    type: 'local_baserow_list_rows';
} & LocalBaserowListRowsPublicDataSource | {
    type: 'local_baserow_upsert_row';
} & LocalBaserowUpsertRowPublicDataSource;
/**
 * @type IntegrationServiceService
 * @export
 */
export type IntegrationServiceService = {
    type: 'local_baserow_delete_row';
} & LocalBaserowDeleteRowService | {
    type: 'local_baserow_get_row';
} & LocalBaserowGetRowService | {
    type: 'local_baserow_list_rows';
} & LocalBaserowListRowsService | {
    type: 'local_baserow_upsert_row';
} & LocalBaserowUpsertRowService;
/**
 *
 * @export
 * @interface Job
 */
export interface Job {
    /**
     *
     * @type {number}
     * @memberof Job
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof Job
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof Job
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof Job
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof Job
     */
    'human_readable_error'?: string;
}
/**
 * @type JobTypeCreateJob
 * @export
 */
export type JobTypeCreateJob = {
    type: 'airtable';
} & AirtableImportJobCreateJob | {
    type: 'audit_log_export';
} & AuditLogExportJobCreateJob | {
    type: 'create_snapshot';
} & CreateSnapshotJobCreateJob | {
    type: 'duplicate_application';
} & DuplicateApplicationJobCreateJob | {
    type: 'duplicate_field';
} & DuplicateFieldJobCreateJob | {
    type: 'duplicate_page';
} & DuplicatePageJobCreateJob | {
    type: 'duplicate_table';
} & DuplicateTableJobCreateJob | {
    type: 'file_import';
} & FileImportJobCreateJob | {
    type: 'install_template';
} & InstallTemplateJobCreateJob | {
    type: 'publish_domain';
} & PublishDomainJobCreateJob | {
    type: 'restore_snapshot';
} & RestoreSnapshotJobCreateJob;
/**
 * @type JobTypeJob
 * @export
 */
export type JobTypeJob = {
    type: 'airtable';
} & AirtableImportJobJob | {
    type: 'audit_log_export';
} & AuditLogExportJobJob | {
    type: 'create_snapshot';
} & CreateSnapshotJobJob | {
    type: 'duplicate_application';
} & DuplicateApplicationJobJob | {
    type: 'duplicate_field';
} & DuplicateFieldJobJob | {
    type: 'duplicate_page';
} & DuplicatePageJobJob | {
    type: 'duplicate_table';
} & DuplicateTableJobJob | {
    type: 'file_import';
} & FileImportJobJob | {
    type: 'install_template';
} & InstallTemplateJobJob | {
    type: 'publish_domain';
} & PublishDomainJobJob | {
    type: 'restore_snapshot';
} & RestoreSnapshotJobJob;
/**
 *
 * @export
 * @interface KanbanViewCreateView
 */
export interface KanbanViewCreateView {
    /**
     *
     * @type {string}
     * @memberof KanbanViewCreateView
     */
    'name': string;
    /**
     *
     * @type {ViewTypesEnum}
     * @memberof KanbanViewCreateView
     */
    'type': ViewTypesEnum;
    /**
     *
     * @type {OwnershipTypeEnum}
     * @memberof KanbanViewCreateView
     */
    'ownership_type'?: OwnershipTypeEnum;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof KanbanViewCreateView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof KanbanViewCreateView
     */
    'filters_disabled'?: boolean;
    /**
     *
     * @type {number}
     * @memberof KanbanViewCreateView
     */
    'single_select_field'?: number | null;
    /**
     * References a file field of which the first image must be shown as card cover image.
     * @type {number}
     * @memberof KanbanViewCreateView
     */
    'card_cover_image_field'?: number | null;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof KanbanViewCreateView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof KanbanViewCreateView
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface KanbanViewExampleResponse
 */
export interface KanbanViewExampleResponse {
    /**
     * Every select option related to the view\'s single select field can have its own entry like this.
     * @type {{ [key: string]: KanbanViewExampleResponseStack; }}
     * @memberof KanbanViewExampleResponse
     */
    'rows': {
        [key: string]: KanbanViewExampleResponseStack;
    };
    /**
     *
     * @type {Array<KanbanViewFieldOptions>}
     * @memberof KanbanViewExampleResponse
     */
    'field_options': Array<KanbanViewFieldOptions>;
    /**
     * An object keyed by row id with a value being an object containing additional metadata about that row. A row might not have metadata and will not be present as a key if so.
     * @type {{ [key: string]: RowMetadata; }}
     * @memberof KanbanViewExampleResponse
     */
    'row_metadata'?: {
        [key: string]: RowMetadata;
    };
}
/**
 *
 * @export
 * @interface KanbanViewExampleResponseStack
 */
export interface KanbanViewExampleResponseStack {
    /**
     * The total count of rows that are included in this group.
     * @type {number}
     * @memberof KanbanViewExampleResponseStack
     */
    'count': number;
    /**
     * All the rows that belong in this group related with the provided `limit` and `offset`.
     * @type {Array<ExampleRowResponse>}
     * @memberof KanbanViewExampleResponseStack
     */
    'results': Array<ExampleRowResponse>;
}
/**
 *
 * @export
 * @interface KanbanViewFieldOptions
 */
export interface KanbanViewFieldOptions {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: KanbanViewFieldOptions; }}
     * @memberof KanbanViewFieldOptions
     */
    'field_options': {
        [key: string]: KanbanViewFieldOptions;
    };
}
/**
 *
 * @export
 * @interface KanbanViewUpdate
 */
export interface KanbanViewUpdate {
    /**
     *
     * @type {string}
     * @memberof KanbanViewUpdate
     */
    'name'?: string;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof KanbanViewUpdate
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof KanbanViewUpdate
     */
    'filters_disabled'?: boolean;
    /**
     * The new password or an empty string to remove any previous password from the view and make it publicly accessible again.
     * @type {string}
     * @memberof KanbanViewUpdate
     */
    'public_view_password'?: string;
    /**
     * Indicates how the access to the view is determined. By default, views are collaborative and shared for all users that have access to the table.
     * @type {string}
     * @memberof KanbanViewUpdate
     */
    'ownership_type'?: string;
    /**
     *
     * @type {number}
     * @memberof KanbanViewUpdate
     */
    'single_select_field'?: number | null;
    /**
     * References a file field of which the first image must be shown as card cover image.
     * @type {number}
     * @memberof KanbanViewUpdate
     */
    'card_cover_image_field'?: number | null;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof KanbanViewUpdate
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof KanbanViewUpdate
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface KanbanViewView
 */
export interface KanbanViewView {
    /**
     *
     * @type {number}
     * @memberof KanbanViewView
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof KanbanViewView
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof KanbanViewView
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof KanbanViewView
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof KanbanViewView
     */
    'type': string;
    /**
     *
     * @type {Table}
     * @memberof KanbanViewView
     */
    'table': Table;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof KanbanViewView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     *
     * @type {Array<ViewFilter>}
     * @memberof KanbanViewView
     */
    'filters'?: Array<ViewFilter>;
    /**
     *
     * @type {Array<ViewFilterGroup>}
     * @memberof KanbanViewView
     */
    'filter_groups'?: Array<ViewFilterGroup>;
    /**
     *
     * @type {Array<ViewSort>}
     * @memberof KanbanViewView
     */
    'sortings'?: Array<ViewSort>;
    /**
     *
     * @type {Array<ViewGroupBy>}
     * @memberof KanbanViewView
     */
    'group_bys'?: Array<ViewGroupBy>;
    /**
     *
     * @type {Array<ViewDecoration>}
     * @memberof KanbanViewView
     */
    'decorations'?: Array<ViewDecoration>;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof KanbanViewView
     */
    'filters_disabled'?: boolean;
    /**
     * Indicates whether the public view is password protected or not.  :return: True if the public view is password protected, False otherwise.
     * @type {boolean}
     * @memberof KanbanViewView
     */
    'public_view_has_password': boolean;
    /**
     *
     * @type {boolean}
     * @memberof KanbanViewView
     */
    'show_logo'?: boolean;
    /**
     *
     * @type {string}
     * @memberof KanbanViewView
     */
    'ownership_type': string;
    /**
     *
     * @type {number}
     * @memberof KanbanViewView
     */
    'owned_by_id'?: number;
    /**
     *
     * @type {number}
     * @memberof KanbanViewView
     */
    'single_select_field'?: number | null;
    /**
     * References a file field of which the first image must be shown as card cover image.
     * @type {number}
     * @memberof KanbanViewView
     */
    'card_cover_image_field'?: number | null;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof KanbanViewView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof KanbanViewView
     */
    'slug': string;
}
/**
 *
 * @export
 * @interface LastModifiedByFieldCreateField
 */
export interface LastModifiedByFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof LastModifiedByFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LastModifiedByFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LastModifiedByFieldCreateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface LastModifiedByFieldField
 */
export interface LastModifiedByFieldField {
    /**
     *
     * @type {number}
     * @memberof LastModifiedByFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LastModifiedByFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LastModifiedByFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LastModifiedByFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LastModifiedByFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LastModifiedByFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LastModifiedByFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LastModifiedByFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface LastModifiedByFieldFieldSerializerWithRelatedFields
 */
export interface LastModifiedByFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof LastModifiedByFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LastModifiedByFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LastModifiedByFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LastModifiedByFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LastModifiedByFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LastModifiedByFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LastModifiedByFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LastModifiedByFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof LastModifiedByFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface LastModifiedByFieldUpdateField
 */
export interface LastModifiedByFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof LastModifiedByFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LastModifiedByFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LastModifiedByFieldUpdateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface LastModifiedFieldCreateField
 */
export interface LastModifiedFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof LastModifiedFieldCreateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LastModifiedFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LastModifiedFieldCreateField
     */
    'description'?: string | null;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof LastModifiedFieldCreateField
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof LastModifiedFieldCreateField
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof LastModifiedFieldCreateField
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof LastModifiedFieldCreateField
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof LastModifiedFieldCreateField
     */
    'date_force_timezone'?: string | null;
    /**
     * (\'A UTC offset in minutes to add to all the field datetimes values.\',)
     * @type {number}
     * @memberof LastModifiedFieldCreateField
     */
    'date_force_timezone_offset'?: number | null;
}
/**
 *
 * @export
 * @interface LastModifiedFieldField
 */
export interface LastModifiedFieldField {
    /**
     *
     * @type {number}
     * @memberof LastModifiedFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LastModifiedFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LastModifiedFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LastModifiedFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LastModifiedFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LastModifiedFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LastModifiedFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LastModifiedFieldField
     */
    'description'?: string | null;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof LastModifiedFieldField
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof LastModifiedFieldField
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof LastModifiedFieldField
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof LastModifiedFieldField
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof LastModifiedFieldField
     */
    'date_force_timezone'?: string | null;
}
/**
 *
 * @export
 * @interface LastModifiedFieldFieldSerializerWithRelatedFields
 */
export interface LastModifiedFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'name'?: string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof LastModifiedFieldFieldSerializerWithRelatedFields
     */
    'date_force_timezone'?: string | null;
}
/**
 *
 * @export
 * @interface LastModifiedFieldUpdateField
 */
export interface LastModifiedFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof LastModifiedFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LastModifiedFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LastModifiedFieldUpdateField
     */
    'description'?: string | null;
    /**
     * EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
     * @type {DateFormatEnum}
     * @memberof LastModifiedFieldUpdateField
     */
    'date_format'?: DateFormatEnum;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof LastModifiedFieldUpdateField
     */
    'date_include_time'?: boolean;
    /**
     * 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
     * @type {DateTimeFormatEnum}
     * @memberof LastModifiedFieldUpdateField
     */
    'date_time_format'?: DateTimeFormatEnum;
    /**
     * Indicates if the timezone should be shown.
     * @type {boolean}
     * @memberof LastModifiedFieldUpdateField
     */
    'date_show_tzinfo'?: boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof LastModifiedFieldUpdateField
     */
    'date_force_timezone'?: string | null;
    /**
     * (\'A UTC offset in minutes to add to all the field datetimes values.\',)
     * @type {number}
     * @memberof LastModifiedFieldUpdateField
     */
    'date_force_timezone_offset'?: number | null;
}
/**
 *
 * @export
 * @interface LeaveGroup400Response
 */
export interface LeaveGroup400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof LeaveGroup400Response
     */
    'error'?: LeaveGroup400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof LeaveGroup400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const LeaveGroup400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly GroupUserIsLastAdmin: "ERROR_GROUP_USER_IS_LAST_ADMIN";
};
export type LeaveGroup400ResponseErrorEnum = typeof LeaveGroup400ResponseErrorEnum[keyof typeof LeaveGroup400ResponseErrorEnum];
/**
 *
 * @export
 * @interface License
 */
export interface License {
    /**
     *
     * @type {number}
     * @memberof License
     */
    'id': number;
    /**
     * Unique identifier of the license.
     * @type {string}
     * @memberof License
     */
    'license_id': string;
    /**
     * Indicates if the backend deems the license valid.
     * @type {boolean}
     * @memberof License
     */
    'is_active': boolean;
    /**
     *
     * @type {string}
     * @memberof License
     */
    'last_check'?: string | null;
    /**
     * From which timestamp the license becomes active.
     * @type {string}
     * @memberof License
     */
    'valid_from': string;
    /**
     * Until which timestamp the license is active.
     * @type {string}
     * @memberof License
     */
    'valid_through': string;
    /**
     * The amount of free users that are currently using the license.
     * @type {number}
     * @memberof License
     */
    'free_users_count': number;
    /**
     * The amount of users that are currently using the license.
     * @type {number}
     * @memberof License
     */
    'seats_taken': number;
    /**
     * The maximum amount of users that can use the license.
     * @type {number}
     * @memberof License
     */
    'seats': number;
    /**
     * The product code that indicates what the license unlocks.
     * @type {string}
     * @memberof License
     */
    'product_code': string;
    /**
     * The date when the license was issued. It could be that a new license is issued with the same `license_id` because it was updated. In that case, the one that has been issued last should be used.
     * @type {string}
     * @memberof License
     */
    'issued_on': string;
    /**
     * Indicates to which email address the license has been issued.
     * @type {string}
     * @memberof License
     */
    'issued_to_email': string;
    /**
     * Indicates to whom the license has been issued.
     * @type {string}
     * @memberof License
     */
    'issued_to_name': string;
}
/**
 *
 * @export
 * @interface LicenseUser
 */
export interface LicenseUser {
    /**
     *
     * @type {number}
     * @memberof LicenseUser
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof LicenseUser
     */
    'first_name'?: string;
    /**
     *
     * @type {string}
     * @memberof LicenseUser
     */
    'email'?: string;
}
/**
 *
 * @export
 * @interface LicenseUserLookup
 */
export interface LicenseUserLookup {
    /**
     *
     * @type {number}
     * @memberof LicenseUserLookup
     */
    'id': number;
    /**
     * The name and the email address of the user.
     * @type {string}
     * @memberof LicenseUserLookup
     */
    'value': string;
}
/**
 *
 * @export
 * @interface LicenseWithUsers
 */
export interface LicenseWithUsers {
    /**
     *
     * @type {number}
     * @memberof LicenseWithUsers
     */
    'id': number;
    /**
     * Unique identifier of the license.
     * @type {string}
     * @memberof LicenseWithUsers
     */
    'license_id': string;
    /**
     * Indicates if the backend deems the license valid.
     * @type {boolean}
     * @memberof LicenseWithUsers
     */
    'is_active': boolean;
    /**
     *
     * @type {string}
     * @memberof LicenseWithUsers
     */
    'last_check'?: string | null;
    /**
     * From which timestamp the license becomes active.
     * @type {string}
     * @memberof LicenseWithUsers
     */
    'valid_from': string;
    /**
     * Until which timestamp the license is active.
     * @type {string}
     * @memberof LicenseWithUsers
     */
    'valid_through': string;
    /**
     * The amount of free users that are currently using the license.
     * @type {number}
     * @memberof LicenseWithUsers
     */
    'free_users_count': number;
    /**
     * The amount of users that are currently using the license.
     * @type {number}
     * @memberof LicenseWithUsers
     */
    'seats_taken': number;
    /**
     * The maximum amount of users that can use the license.
     * @type {number}
     * @memberof LicenseWithUsers
     */
    'seats': number;
    /**
     * The product code that indicates what the license unlocks.
     * @type {string}
     * @memberof LicenseWithUsers
     */
    'product_code': string;
    /**
     * The date when the license was issued. It could be that a new license is issued with the same `license_id` because it was updated. In that case, the one that has been issued last should be used.
     * @type {string}
     * @memberof LicenseWithUsers
     */
    'issued_on': string;
    /**
     * Indicates to which email address the license has been issued.
     * @type {string}
     * @memberof LicenseWithUsers
     */
    'issued_to_email': string;
    /**
     * Indicates to whom the license has been issued.
     * @type {string}
     * @memberof LicenseWithUsers
     */
    'issued_to_name': string;
    /**
     *
     * @type {Array<LicenseUser>}
     * @memberof LicenseWithUsers
     */
    'users': Array<LicenseUser>;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface LinkElementCreateElement
 */
export interface LinkElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof LinkElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof LinkElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof LinkElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof LinkElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonLinkConfigBlock}
     * @memberof LinkElementCreateElement
     */
    'styles'?: ButtonLinkConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof LinkElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof LinkElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof LinkElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof LinkElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof LinkElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof LinkElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof LinkElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof LinkElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof LinkElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The navigation type.  * `page` - Page * `custom` - Custom
     * @type {NavigationTypeEnum}
     * @memberof LinkElementCreateElement
     */
    'navigation_type'?: NavigationTypeEnum;
    /**
     * (\'Destination page id for this link. If null then we use the navigate_to_url property instead.\',)
     * @type {number}
     * @memberof LinkElementCreateElement
     */
    'navigate_to_page_id'?: number | null;
    /**
     * If no page is selected, this indicate the destination of the link.
     * @type {string}
     * @memberof LinkElementCreateElement
     */
    'navigate_to_url'?: string;
    /**
     * The parameters for each parameters of the selected page if any.
     * @type {Array<PageParameterValue>}
     * @memberof LinkElementCreateElement
     */
    'page_parameters'?: Array<PageParameterValue>;
    /**
     * The target of the link when we click on it.  * `self` - Self * `blank` - Blank
     * @type {TargetEnum}
     * @memberof LinkElementCreateElement
     */
    'target'?: TargetEnum;
    /**
     * The value of the element. Must be an formula.
     * @type {string}
     * @memberof LinkElementCreateElement
     */
    'value'?: string;
    /**
     * The variant of the link.  * `link` - Link * `button` - Button
     * @type {VariantEnum}
     * @memberof LinkElementCreateElement
     */
    'variant'?: VariantEnum;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface LinkElementElement
 */
export interface LinkElementElement {
    /**
     *
     * @type {number}
     * @memberof LinkElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LinkElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof LinkElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof LinkElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof LinkElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof LinkElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof LinkElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonLinkConfigBlock}
     * @memberof LinkElementElement
     */
    'styles'?: ButtonLinkConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof LinkElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof LinkElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof LinkElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof LinkElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof LinkElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof LinkElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof LinkElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof LinkElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof LinkElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof LinkElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof LinkElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof LinkElementElement
     */
    'roles'?: any;
    /**
     * The navigation type.  * `page` - Page * `custom` - Custom
     * @type {NavigationTypeEnum}
     * @memberof LinkElementElement
     */
    'navigation_type'?: NavigationTypeEnum;
    /**
     * (\'Destination page id for this link. If null then we use the navigate_to_url property instead.\',)
     * @type {number}
     * @memberof LinkElementElement
     */
    'navigate_to_page_id'?: number | null;
    /**
     * If no page is selected, this indicate the destination of the link.
     * @type {string}
     * @memberof LinkElementElement
     */
    'navigate_to_url'?: string;
    /**
     * The parameters for each parameters of the selected page if any.
     * @type {Array<PageParameterValue>}
     * @memberof LinkElementElement
     */
    'page_parameters'?: Array<PageParameterValue>;
    /**
     * The target of the link when we click on it.  * `self` - Self * `blank` - Blank
     * @type {TargetEnum}
     * @memberof LinkElementElement
     */
    'target'?: TargetEnum;
    /**
     * The value of the element. Must be an formula.
     * @type {string}
     * @memberof LinkElementElement
     */
    'value'?: string;
    /**
     * The variant of the link.  * `link` - Link * `button` - Button
     * @type {VariantEnum}
     * @memberof LinkElementElement
     */
    'variant'?: VariantEnum;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface LinkElementPublicElement
 */
export interface LinkElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof LinkElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonLinkConfigBlock}
     * @memberof LinkElementPublicElement
     */
    'styles'?: ButtonLinkConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof LinkElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof LinkElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof LinkElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof LinkElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof LinkElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof LinkElementPublicElement
     */
    'roles'?: any;
    /**
     * The navigation type.  * `page` - Page * `custom` - Custom
     * @type {NavigationTypeEnum}
     * @memberof LinkElementPublicElement
     */
    'navigation_type'?: NavigationTypeEnum;
    /**
     * (\'Destination page id for this link. If null then we use the navigate_to_url property instead.\',)
     * @type {number}
     * @memberof LinkElementPublicElement
     */
    'navigate_to_page_id'?: number | null;
    /**
     * If no page is selected, this indicate the destination of the link.
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'navigate_to_url'?: string;
    /**
     * The parameters for each parameters of the selected page if any.
     * @type {Array<PageParameterValue>}
     * @memberof LinkElementPublicElement
     */
    'page_parameters'?: Array<PageParameterValue>;
    /**
     * The target of the link when we click on it.  * `self` - Self * `blank` - Blank
     * @type {TargetEnum}
     * @memberof LinkElementPublicElement
     */
    'target'?: TargetEnum;
    /**
     * The value of the element. Must be an formula.
     * @type {string}
     * @memberof LinkElementPublicElement
     */
    'value'?: string;
    /**
     * The variant of the link.  * `link` - Link * `button` - Button
     * @type {VariantEnum}
     * @memberof LinkElementPublicElement
     */
    'variant'?: VariantEnum;
}
/**
 *
 * @export
 * @interface LinkElementUpdateElement
 */
export interface LinkElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof LinkElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonLinkConfigBlock}
     * @memberof LinkElementUpdateElement
     */
    'styles'?: ButtonLinkConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof LinkElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof LinkElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof LinkElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof LinkElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof LinkElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof LinkElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof LinkElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof LinkElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof LinkElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof LinkElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof LinkElementUpdateElement
     */
    'roles'?: any;
    /**
     * The navigation type.  * `page` - Page * `custom` - Custom
     * @type {NavigationTypeEnum}
     * @memberof LinkElementUpdateElement
     */
    'navigation_type'?: NavigationTypeEnum;
    /**
     * (\'Destination page id for this link. If null then we use the navigate_to_url property instead.\',)
     * @type {number}
     * @memberof LinkElementUpdateElement
     */
    'navigate_to_page_id'?: number | null;
    /**
     * If no page is selected, this indicate the destination of the link.
     * @type {string}
     * @memberof LinkElementUpdateElement
     */
    'navigate_to_url'?: string;
    /**
     * The parameters for each parameters of the selected page if any.
     * @type {Array<PageParameterValue>}
     * @memberof LinkElementUpdateElement
     */
    'page_parameters'?: Array<PageParameterValue>;
    /**
     * The target of the link when we click on it.  * `self` - Self * `blank` - Blank
     * @type {TargetEnum}
     * @memberof LinkElementUpdateElement
     */
    'target'?: TargetEnum;
    /**
     * The value of the element. Must be an formula.
     * @type {string}
     * @memberof LinkElementUpdateElement
     */
    'value'?: string;
    /**
     * The variant of the link.  * `link` - Link * `button` - Button
     * @type {VariantEnum}
     * @memberof LinkElementUpdateElement
     */
    'variant'?: VariantEnum;
}
/**
 *
 * @export
 * @interface LinkRowFieldCreateField
 */
export interface LinkRowFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof LinkRowFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LinkRowFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LinkRowFieldCreateField
     */
    'description'?: string | null;
    /**
     * The id of the linked table.
     * @type {number}
     * @memberof LinkRowFieldCreateField
     */
    'link_row_table_id'?: number | null;
    /**
     * (Deprecated) The id of the linked table.
     * @type {number}
     * @memberof LinkRowFieldCreateField
     */
    'link_row_table'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof LinkRowFieldCreateField
     */
    'has_related_field'?: boolean;
    /**
     * The ID of the view in the related table where row selection must be limited to.
     * @type {number}
     * @memberof LinkRowFieldCreateField
     */
    'link_row_limit_selection_view_id'?: number | null;
}
/**
 *
 * @export
 * @interface LinkRowFieldField
 */
export interface LinkRowFieldField {
    /**
     *
     * @type {number}
     * @memberof LinkRowFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LinkRowFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LinkRowFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LinkRowFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LinkRowFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LinkRowFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LinkRowFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LinkRowFieldField
     */
    'description'?: string | null;
    /**
     * The id of the linked table.
     * @type {number}
     * @memberof LinkRowFieldField
     */
    'link_row_table_id'?: number | null;
    /**
     * The id of the related field.
     * @type {number}
     * @memberof LinkRowFieldField
     */
    'link_row_related_field_id': number | null;
    /**
     * (Deprecated) The id of the linked table.
     * @type {number}
     * @memberof LinkRowFieldField
     */
    'link_row_table'?: number | null;
    /**
     * (Deprecated) The id of the related field.
     * @type {number}
     * @memberof LinkRowFieldField
     */
    'link_row_related_field': number;
    /**
     * The ID of the view in the related table where row selection must be limited to.
     * @type {number}
     * @memberof LinkRowFieldField
     */
    'link_row_limit_selection_view_id'?: number | null;
}
/**
 *
 * @export
 * @interface LinkRowFieldFieldSerializerWithRelatedFields
 */
export interface LinkRowFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     * The id of the linked table.
     * @type {number}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'link_row_table_id'?: number | null;
    /**
     * The id of the related field.
     * @type {number}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'link_row_related_field_id': number | null;
    /**
     * (Deprecated) The id of the linked table.
     * @type {number}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'link_row_table'?: number | null;
    /**
     * (Deprecated) The id of the related field.
     * @type {number}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'link_row_related_field': number;
    /**
     * The ID of the view in the related table where row selection must be limited to.
     * @type {number}
     * @memberof LinkRowFieldFieldSerializerWithRelatedFields
     */
    'link_row_limit_selection_view_id'?: number | null;
}
/**
 *
 * @export
 * @interface LinkRowFieldUpdateField
 */
export interface LinkRowFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof LinkRowFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LinkRowFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LinkRowFieldUpdateField
     */
    'description'?: string | null;
    /**
     * The id of the linked table.
     * @type {number}
     * @memberof LinkRowFieldUpdateField
     */
    'link_row_table_id'?: number | null;
    /**
     * (Deprecated) The id of the linked table.
     * @type {number}
     * @memberof LinkRowFieldUpdateField
     */
    'link_row_table'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof LinkRowFieldUpdateField
     */
    'has_related_field'?: boolean;
    /**
     * The ID of the view in the related table where row selection must be limited to.
     * @type {number}
     * @memberof LinkRowFieldUpdateField
     */
    'link_row_limit_selection_view_id'?: number | null;
}
/**
 *
 * @export
 * @interface LinkRowValue
 */
export interface LinkRowValue {
    /**
     * The unique identifier of the row in the related table.
     * @type {number}
     * @memberof LinkRowValue
     */
    'id': number;
    /**
     * The primary field\'s value as a string of the row in the related table.
     * @type {string}
     * @memberof LinkRowValue
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface LinkThemeConfigBlock
 */
export interface LinkThemeConfigBlock {
    /**
     *
     * @type {string}
     * @memberof LinkThemeConfigBlock
     */
    'link_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof LinkThemeConfigBlock
     */
    'link_font_size'?: number;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof LinkThemeConfigBlock
     */
    'link_text_alignment'?: TableCellAlignmentEnum;
    /**
     * The text color of links
     * @type {string}
     * @memberof LinkThemeConfigBlock
     */
    'link_text_color'?: string;
    /**
     * The hover color of links when hovered
     * @type {string}
     * @memberof LinkThemeConfigBlock
     */
    'link_hover_text_color'?: string;
}
/**
 *
 * @export
 * @interface ListAllApplications400Response
 */
export interface ListAllApplications400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListAllApplications400Response
     */
    'error'?: ListAllApplications400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListAllApplications400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListAllApplications400ResponseErrorEnum: {
    readonly ErrorUserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
};
export type ListAllApplications400ResponseErrorEnum = typeof ListAllApplications400ResponseErrorEnum[keyof typeof ListAllApplications400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListApplicationIntegrations404Response
 */
export interface ListApplicationIntegrations404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListApplicationIntegrations404Response
     */
    'error'?: ListApplicationIntegrations404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListApplicationIntegrations404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListApplicationIntegrations404ResponseErrorEnum: {
    readonly ErrorApplicationDoesNotExist: "ERROR_APPLICATION_DOES_NOT_EXIST";
};
export type ListApplicationIntegrations404ResponseErrorEnum = typeof ListApplicationIntegrations404ResponseErrorEnum[keyof typeof ListApplicationIntegrations404ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListDatabaseTableCalendarViewRows400Response
 */
export interface ListDatabaseTableCalendarViewRows400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListDatabaseTableCalendarViewRows400Response
     */
    'error'?: ListDatabaseTableCalendarViewRows400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListDatabaseTableCalendarViewRows400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListDatabaseTableCalendarViewRows400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly CalendarViewHasNoDateField: "ERROR_CALENDAR_VIEW_HAS_NO_DATE_FIELD";
    readonly FeatureNotAvailable: "ERROR_FEATURE_NOT_AVAILABLE";
};
export type ListDatabaseTableCalendarViewRows400ResponseErrorEnum = typeof ListDatabaseTableCalendarViewRows400ResponseErrorEnum[keyof typeof ListDatabaseTableCalendarViewRows400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListDatabaseTableFields401Response
 */
export interface ListDatabaseTableFields401Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListDatabaseTableFields401Response
     */
    'error'?: ListDatabaseTableFields401ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListDatabaseTableFields401Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListDatabaseTableFields401ResponseErrorEnum: {
    readonly ErrorNoPermissionToTable: "ERROR_NO_PERMISSION_TO_TABLE";
};
export type ListDatabaseTableFields401ResponseErrorEnum = typeof ListDatabaseTableFields401ResponseErrorEnum[keyof typeof ListDatabaseTableFields401ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListDatabaseTableFields404Response
 */
export interface ListDatabaseTableFields404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListDatabaseTableFields404Response
     */
    'error'?: ListDatabaseTableFields404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListDatabaseTableFields404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListDatabaseTableFields404ResponseErrorEnum: {
    readonly ErrorTableDoesNotExist: "ERROR_TABLE_DOES_NOT_EXIST";
};
export type ListDatabaseTableFields404ResponseErrorEnum = typeof ListDatabaseTableFields404ResponseErrorEnum[keyof typeof ListDatabaseTableFields404ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListDatabaseTableGalleryViewRows400Response
 */
export interface ListDatabaseTableGalleryViewRows400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListDatabaseTableGalleryViewRows400Response
     */
    'error'?: ListDatabaseTableGalleryViewRows400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListDatabaseTableGalleryViewRows400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListDatabaseTableGalleryViewRows400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly FilterFieldNotFound: "ERROR_FILTER_FIELD_NOT_FOUND";
    readonly ViewFilterTypeDoesNotExist: "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST";
    readonly ViewFilterTypeUnsupportedField: "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
    readonly FiltersParamValidationError: "ERROR_FILTERS_PARAM_VALIDATION_ERROR";
    readonly OrderByFieldNotFound: "ERROR_ORDER_BY_FIELD_NOT_FOUND";
    readonly OrderByFieldNotPossible: "ERROR_ORDER_BY_FIELD_NOT_POSSIBLE";
};
export type ListDatabaseTableGalleryViewRows400ResponseErrorEnum = typeof ListDatabaseTableGalleryViewRows400ResponseErrorEnum[keyof typeof ListDatabaseTableGalleryViewRows400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListDatabaseTableGalleryViewRows404Response
 */
export interface ListDatabaseTableGalleryViewRows404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListDatabaseTableGalleryViewRows404Response
     */
    'error'?: ListDatabaseTableGalleryViewRows404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListDatabaseTableGalleryViewRows404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListDatabaseTableGalleryViewRows404ResponseErrorEnum: {
    readonly ErrorGalleryDoesNotExist: "ERROR_GALLERY_DOES_NOT_EXIST";
};
export type ListDatabaseTableGalleryViewRows404ResponseErrorEnum = typeof ListDatabaseTableGalleryViewRows404ResponseErrorEnum[keyof typeof ListDatabaseTableGalleryViewRows404ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListDatabaseTableKanbanViewRows400Response
 */
export interface ListDatabaseTableKanbanViewRows400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListDatabaseTableKanbanViewRows400Response
     */
    'error'?: ListDatabaseTableKanbanViewRows400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListDatabaseTableKanbanViewRows400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListDatabaseTableKanbanViewRows400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly KanbanViewHasNoSingleSelectField: "ERROR_KANBAN_VIEW_HAS_NO_SINGLE_SELECT_FIELD";
    readonly InvalidSelectOptionParameter: "ERROR_INVALID_SELECT_OPTION_PARAMETER";
    readonly FeatureNotAvailable: "ERROR_FEATURE_NOT_AVAILABLE";
    readonly FilterFieldNotFound: "ERROR_FILTER_FIELD_NOT_FOUND";
    readonly ViewFilterTypeDoesNotExist: "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST";
    readonly ViewFilterTypeUnsupportedField: "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
    readonly FiltersParamValidationError: "ERROR_FILTERS_PARAM_VALIDATION_ERROR";
};
export type ListDatabaseTableKanbanViewRows400ResponseErrorEnum = typeof ListDatabaseTableKanbanViewRows400ResponseErrorEnum[keyof typeof ListDatabaseTableKanbanViewRows400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListDatabaseTableRowNames200Response
 */
export interface ListDatabaseTableRowNames200Response {
    /**
     *
     * @type {ListDatabaseTableRowNames200ResponseTableId}
     * @memberof ListDatabaseTableRowNames200Response
     */
    '{table_id}*'?: ListDatabaseTableRowNames200ResponseTableId;
}
/**
 * An object containing the row names of table `table_id`.
 * @export
 * @interface ListDatabaseTableRowNames200ResponseTableId
 */
export interface ListDatabaseTableRowNames200ResponseTableId {
    /**
     * the name of the row with id `row_id` from table with id `table_id`.
     * @type {string}
     * @memberof ListDatabaseTableRowNames200ResponseTableId
     */
    '{row_id}*'?: string;
}
/**
 *
 * @export
 * @interface ListDatabaseTableRows400Response
 */
export interface ListDatabaseTableRows400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListDatabaseTableRows400Response
     */
    'error'?: ListDatabaseTableRows400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListDatabaseTableRows400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListDatabaseTableRows400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly PageSizeLimit: "ERROR_PAGE_SIZE_LIMIT";
    readonly InvalidPage: "ERROR_INVALID_PAGE";
    readonly OrderByFieldNotFound: "ERROR_ORDER_BY_FIELD_NOT_FOUND";
    readonly OrderByFieldNotPossible: "ERROR_ORDER_BY_FIELD_NOT_POSSIBLE";
    readonly FilterFieldNotFound: "ERROR_FILTER_FIELD_NOT_FOUND";
    readonly ViewFilterTypeDoesNotExist: "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST";
    readonly ViewFilterTypeUnsupportedField: "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
    readonly FiltersParamValidationError: "ERROR_FILTERS_PARAM_VALIDATION_ERROR";
};
export type ListDatabaseTableRows400ResponseErrorEnum = typeof ListDatabaseTableRows400ResponseErrorEnum[keyof typeof ListDatabaseTableRows400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListDatabaseTableRows404Response
 */
export interface ListDatabaseTableRows404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListDatabaseTableRows404Response
     */
    'error'?: ListDatabaseTableRows404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListDatabaseTableRows404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListDatabaseTableRows404ResponseErrorEnum: {
    readonly TableDoesNotExist: "ERROR_TABLE_DOES_NOT_EXIST";
    readonly FieldDoesNotExist: "ERROR_FIELD_DOES_NOT_EXIST";
    readonly ViewDoesNotExist: "ERROR_VIEW_DOES_NOT_EXIST";
};
export type ListDatabaseTableRows404ResponseErrorEnum = typeof ListDatabaseTableRows404ResponseErrorEnum[keyof typeof ListDatabaseTableRows404ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListGroupUsers400Response
 */
export interface ListGroupUsers400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListGroupUsers400Response
     */
    'error'?: ListGroupUsers400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListGroupUsers400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListGroupUsers400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly UserInvalidGroupPermissions: "ERROR_USER_INVALID_GROUP_PERMISSIONS";
    readonly InvalidSortDirection: "ERROR_INVALID_SORT_DIRECTION";
    readonly InvalidSortAttribute: "ERROR_INVALID_SORT_ATTRIBUTE";
};
export type ListGroupUsers400ResponseErrorEnum = typeof ListGroupUsers400ResponseErrorEnum[keyof typeof ListGroupUsers400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ListPublicBuilderPageDataSources404Response
 */
export interface ListPublicBuilderPageDataSources404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ListPublicBuilderPageDataSources404Response
     */
    'error'?: ListPublicBuilderPageDataSources404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ListPublicBuilderPageDataSources404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ListPublicBuilderPageDataSources404ResponseErrorEnum: {
    readonly ErrorPageDoesNotExist: "ERROR_PAGE_DOES_NOT_EXIST";
};
export type ListPublicBuilderPageDataSources404ResponseErrorEnum = typeof ListPublicBuilderPageDataSources404ResponseErrorEnum[keyof typeof ListPublicBuilderPageDataSources404ResponseErrorEnum];
/**
 * Mixin to a DRF serializer class to raise an exception if data with unknown fields is provided to the serializer.
 * @export
 * @interface ListWorkspaceUsersWithMemberData
 */
export interface ListWorkspaceUsersWithMemberData {
    /**
     *
     * @type {number}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'id': number;
    /**
     * User defined name.
     * @type {string}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'name': string;
    /**
     * User email.
     * @type {string}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'email': string;
    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     * @type {number}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'group': number;
    /**
     * The workspace that the user has access to.
     * @type {number}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'workspace': number;
    /**
     * The permissions that the user has within the workspace.
     * @type {string}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'permissions'?: string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'created_on': string;
    /**
     * The user that has access to the workspace.
     * @type {number}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'user_id': number;
    /**
     * True if user account is pending deletion.
     * @type {boolean}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'to_be_deleted': boolean;
    /**
     * Enterprise only: a list of team IDs and names, which this workspace user belongs to in this workspace.
     * @type {Array<WorkspaceUserEnterpriseTeam>}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'teams'?: Array<WorkspaceUserEnterpriseTeam>;
    /**
     * Enterprise or advanced only: the uid of the role that is assigned to this workspace user in this workspace.
     * @type {string}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'role_uid'?: string | null;
    /**
     * Enterprise or advanced only: the highest role uid assigned to this user in this workspace on anything, including roles from teams.
     * @type {string}
     * @memberof ListWorkspaceUsersWithMemberData
     */
    'highest_role_uid'?: string | null;
}
/**
 *
 * @export
 * @interface LocalBaserowContextData
 */
export interface LocalBaserowContextData {
    /**
     *
     * @type {Array<DatabaseApplication>}
     * @memberof LocalBaserowContextData
     */
    'databases': Array<DatabaseApplication>;
}
/**
 * Basic builder workflow action serializer
 * @export
 * @interface LocalBaserowCreateRowWorkflowActionBuilderWorkflowAction
 */
export interface LocalBaserowCreateRowWorkflowActionBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowCreateRowWorkflowActionBuilderWorkflowAction
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowCreateRowWorkflowActionBuilderWorkflowAction
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowCreateRowWorkflowActionBuilderWorkflowAction
     */
    'element_id': number | null;
    /**
     * The type of the workflow action
     * @type {string}
     * @memberof LocalBaserowCreateRowWorkflowActionBuilderWorkflowAction
     */
    'type': string;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof LocalBaserowCreateRowWorkflowActionBuilderWorkflowAction
     */
    'event': string;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationServiceService}
     * @memberof LocalBaserowCreateRowWorkflowActionBuilderWorkflowAction
     */
    'service': IntegrationServiceService;
}
/**
 *
 * @export
 * @interface LocalBaserowCreateRowWorkflowActionCreateBuilderWorkflowAction
 */
export interface LocalBaserowCreateRowWorkflowActionCreateBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowCreateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'id': number;
    /**
     * The id of the element the workflow action is associated with
     * @type {number}
     * @memberof LocalBaserowCreateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'element_id'?: number | null;
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof LocalBaserowCreateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'type': Type051Enum;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof LocalBaserowCreateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'event': string;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationService}
     * @memberof LocalBaserowCreateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'service'?: IntegrationService;
}
/**
 *
 * @export
 * @interface LocalBaserowCreateRowWorkflowActionUpdateBuilderWorkflowActions
 */
export interface LocalBaserowCreateRowWorkflowActionUpdateBuilderWorkflowActions {
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof LocalBaserowCreateRowWorkflowActionUpdateBuilderWorkflowActions
     */
    'type'?: Type051Enum;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationService}
     * @memberof LocalBaserowCreateRowWorkflowActionUpdateBuilderWorkflowActions
     */
    'service'?: IntegrationService;
}
/**
 *
 * @export
 * @interface LocalBaserowDeleteRow
 */
export interface LocalBaserowDeleteRow {
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowDeleteRow
     */
    'row_id'?: string;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRow
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRow
     */
    'integration_id'?: number | null;
}
/**
 * This serializer allow to set the type of a data_source and the data_source id before which we want to insert the new data_source.
 * @export
 * @interface LocalBaserowDeleteRowCreateDataSource
 */
export interface LocalBaserowDeleteRowCreateDataSource {
    /**
     * The type of the service.  * `local_baserow_get_row` - local_baserow_get_row * `local_baserow_list_rows` - local_baserow_list_rows * `local_baserow_upsert_row` - local_baserow_upsert_row * `local_baserow_delete_row` - local_baserow_delete_row
     * @type {TypeC66Enum}
     * @memberof LocalBaserowDeleteRowCreateDataSource
     */
    'type'?: TypeC66Enum;
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowDeleteRowCreateDataSource
     */
    'name'?: string | null;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowDeleteRowCreateDataSource
     */
    'page_id'?: number | null;
    /**
     * If provided, creates the data_source before the data_source with the given id.
     * @type {number}
     * @memberof LocalBaserowDeleteRowCreateDataSource
     */
    'before_id'?: number;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowCreateDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowCreateDataSource
     */
    'integration_id'?: number | null;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowDeleteRowCreateDataSource
     */
    'row_id'?: string;
}
/**
 * Basic data_source serializer mostly for returned values. This serializer flatten the service properties so that from an API POV the data_source object only exists.
 * @export
 * @interface LocalBaserowDeleteRowDataSource
 */
export interface LocalBaserowDeleteRowDataSource {
    /**
     * Data source id.
     * @type {number}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'id': number;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'integration_id'?: number | null;
    /**
     * The type of the data source.
     * @type {string}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'type': string;
    /**
     * The schema of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * The context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The schema context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'context_data_schema': {
        [key: string]: any;
    };
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'name': string;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'page_id': number;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'order': number;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'table_id'?: number | null;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowDeleteRowDataSource
     */
    'row_id'?: string;
}
/**
 * Basic data_source serializer mostly for returned values. This serializer flatten the service properties so that from an API POV the data_source object only exists.
 * @export
 * @interface LocalBaserowDeleteRowPublicDataSource
 */
export interface LocalBaserowDeleteRowPublicDataSource {
    /**
     * Data source id.
     * @type {number}
     * @memberof LocalBaserowDeleteRowPublicDataSource
     */
    'id': number;
    /**
     * The type of the data source.
     * @type {string}
     * @memberof LocalBaserowDeleteRowPublicDataSource
     */
    'type': string;
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowDeleteRowPublicDataSource
     */
    'name': string;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowDeleteRowPublicDataSource
     */
    'page_id': number;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LocalBaserowDeleteRowPublicDataSource
     */
    'order': number;
    /**
     * The context data of the data source.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowDeleteRowPublicDataSource
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowPublicDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowPublicDataSource
     */
    'integration_id'?: number | null;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowDeleteRowPublicDataSource
     */
    'row_id'?: string;
}
/**
 * Basic service serializer mostly for returned values.
 * @export
 * @interface LocalBaserowDeleteRowService
 */
export interface LocalBaserowDeleteRowService {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowDeleteRowService
     */
    'id': number;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowService
     */
    'integration_id'?: number | null;
    /**
     * The type of the service.
     * @type {string}
     * @memberof LocalBaserowDeleteRowService
     */
    'type': string;
    /**
     * The schema of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowDeleteRowService
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * The context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowDeleteRowService
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The schema context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowDeleteRowService
     */
    'context_data_schema': {
        [key: string]: any;
    };
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowService
     */
    'table_id'?: number | null;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowDeleteRowService
     */
    'row_id'?: string;
}
/**
 *
 * @export
 * @interface LocalBaserowDeleteRowUpdateDataSource
 */
export interface LocalBaserowDeleteRowUpdateDataSource {
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowUpdateDataSource
     */
    'integration_id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowDeleteRowUpdateDataSource
     */
    'name'?: string;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowDeleteRowUpdateDataSource
     */
    'table_id'?: number | null;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowDeleteRowUpdateDataSource
     */
    'row_id'?: string;
}
/**
 * Basic builder workflow action serializer
 * @export
 * @interface LocalBaserowDeleteRowWorkflowActionBuilderWorkflowAction
 */
export interface LocalBaserowDeleteRowWorkflowActionBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowDeleteRowWorkflowActionBuilderWorkflowAction
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowDeleteRowWorkflowActionBuilderWorkflowAction
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowDeleteRowWorkflowActionBuilderWorkflowAction
     */
    'element_id': number | null;
    /**
     * The type of the workflow action
     * @type {string}
     * @memberof LocalBaserowDeleteRowWorkflowActionBuilderWorkflowAction
     */
    'type': string;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof LocalBaserowDeleteRowWorkflowActionBuilderWorkflowAction
     */
    'event': string;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationServiceService}
     * @memberof LocalBaserowDeleteRowWorkflowActionBuilderWorkflowAction
     */
    'service': IntegrationServiceService;
}
/**
 *
 * @export
 * @interface LocalBaserowDeleteRowWorkflowActionCreateBuilderWorkflowAction
 */
export interface LocalBaserowDeleteRowWorkflowActionCreateBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowDeleteRowWorkflowActionCreateBuilderWorkflowAction
     */
    'id': number;
    /**
     * The id of the element the workflow action is associated with
     * @type {number}
     * @memberof LocalBaserowDeleteRowWorkflowActionCreateBuilderWorkflowAction
     */
    'element_id'?: number | null;
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof LocalBaserowDeleteRowWorkflowActionCreateBuilderWorkflowAction
     */
    'type': Type051Enum;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof LocalBaserowDeleteRowWorkflowActionCreateBuilderWorkflowAction
     */
    'event': string;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationService}
     * @memberof LocalBaserowDeleteRowWorkflowActionCreateBuilderWorkflowAction
     */
    'service'?: IntegrationService;
}
/**
 *
 * @export
 * @interface LocalBaserowDeleteRowWorkflowActionUpdateBuilderWorkflowActions
 */
export interface LocalBaserowDeleteRowWorkflowActionUpdateBuilderWorkflowActions {
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof LocalBaserowDeleteRowWorkflowActionUpdateBuilderWorkflowActions
     */
    'type'?: Type051Enum;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationService}
     * @memberof LocalBaserowDeleteRowWorkflowActionUpdateBuilderWorkflowActions
     */
    'service'?: IntegrationService;
}
/**
 *
 * @export
 * @interface LocalBaserowField
 */
export interface LocalBaserowField {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowField
     */
    'name': string;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LocalBaserowField
     */
    'type': string;
}
/**
 *
 * @export
 * @interface LocalBaserowGetRow
 */
export interface LocalBaserowGetRow {
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowGetRow
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowGetRow
     */
    'row_id'?: string;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRow
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRow
     */
    'integration_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRow
     */
    'view_id'?: number | null;
}
/**
 * This serializer allow to set the type of a data_source and the data_source id before which we want to insert the new data_source.
 * @export
 * @interface LocalBaserowGetRowCreateDataSource
 */
export interface LocalBaserowGetRowCreateDataSource {
    /**
     * The type of the service.  * `local_baserow_get_row` - local_baserow_get_row * `local_baserow_list_rows` - local_baserow_list_rows * `local_baserow_upsert_row` - local_baserow_upsert_row * `local_baserow_delete_row` - local_baserow_delete_row
     * @type {TypeC66Enum}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'type'?: TypeC66Enum;
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'name'?: string | null;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'page_id'?: number | null;
    /**
     * If provided, creates the data_source before the data_source with the given id.
     * @type {number}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'before_id'?: number;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'integration_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'search_query'?: string;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowGetRowCreateDataSource
     */
    'row_id'?: string;
}
/**
 * Basic data_source serializer mostly for returned values. This serializer flatten the service properties so that from an API POV the data_source object only exists.
 * @export
 * @interface LocalBaserowGetRowDataSource
 */
export interface LocalBaserowGetRowDataSource {
    /**
     * Data source id.
     * @type {number}
     * @memberof LocalBaserowGetRowDataSource
     */
    'id': number;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowDataSource
     */
    'integration_id'?: number | null;
    /**
     * The type of the data source.
     * @type {string}
     * @memberof LocalBaserowGetRowDataSource
     */
    'type': string;
    /**
     * The schema of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowGetRowDataSource
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * The context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowGetRowDataSource
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The schema context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowGetRowDataSource
     */
    'context_data_schema': {
        [key: string]: any;
    };
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowGetRowDataSource
     */
    'name': string;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowGetRowDataSource
     */
    'page_id': number;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LocalBaserowGetRowDataSource
     */
    'order': number;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowDataSource
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowGetRowDataSource
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowGetRowDataSource
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowGetRowDataSource
     */
    'search_query'?: string;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowGetRowDataSource
     */
    'row_id'?: string;
}
/**
 * Basic data_source serializer mostly for returned values. This serializer flatten the service properties so that from an API POV the data_source object only exists.
 * @export
 * @interface LocalBaserowGetRowPublicDataSource
 */
export interface LocalBaserowGetRowPublicDataSource {
    /**
     * Data source id.
     * @type {number}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'id': number;
    /**
     * The type of the data source.
     * @type {string}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'type': string;
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'name': string;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'page_id': number;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'order': number;
    /**
     * The context data of the data source.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'integration_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'search_query'?: string;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowGetRowPublicDataSource
     */
    'row_id'?: string;
}
/**
 * Basic service serializer mostly for returned values.
 * @export
 * @interface LocalBaserowGetRowService
 */
export interface LocalBaserowGetRowService {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowGetRowService
     */
    'id': number;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowService
     */
    'integration_id'?: number | null;
    /**
     * The type of the service.
     * @type {string}
     * @memberof LocalBaserowGetRowService
     */
    'type': string;
    /**
     * The schema of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowGetRowService
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * The context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowGetRowService
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The schema context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowGetRowService
     */
    'context_data_schema': {
        [key: string]: any;
    };
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowService
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowService
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowGetRowService
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowGetRowService
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowGetRowService
     */
    'search_query'?: string;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowGetRowService
     */
    'row_id'?: string;
}
/**
 *
 * @export
 * @interface LocalBaserowGetRowUpdateDataSource
 */
export interface LocalBaserowGetRowUpdateDataSource {
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowUpdateDataSource
     */
    'integration_id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowGetRowUpdateDataSource
     */
    'name'?: string;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowUpdateDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowGetRowUpdateDataSource
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowGetRowUpdateDataSource
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowGetRowUpdateDataSource
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowGetRowUpdateDataSource
     */
    'search_query'?: string;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowGetRowUpdateDataSource
     */
    'row_id'?: string;
}
/**
 * This serializer allow to set the type of an integration and the integration id before which we want to insert the new integration.
 * @export
 * @interface LocalBaserowIntegrationCreateIntegration
 */
export interface LocalBaserowIntegrationCreateIntegration {
    /**
     * If provided, creates the integration before the integration with the given id.
     * @type {number}
     * @memberof LocalBaserowIntegrationCreateIntegration
     */
    'before_id'?: number;
    /**
     * The type of the integration.  * `local_baserow` - local_baserow
     * @type {Type050Enum}
     * @memberof LocalBaserowIntegrationCreateIntegration
     */
    'type': Type050Enum;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowIntegrationCreateIntegration
     */
    'name': string;
    /**
     *
     * @type {LocalBaserowContextData}
     * @memberof LocalBaserowIntegrationCreateIntegration
     */
    'context_data': LocalBaserowContextData;
    /**
     *
     * @type {SubjectUser}
     * @memberof LocalBaserowIntegrationCreateIntegration
     */
    'authorized_user': SubjectUser;
}
/**
 * Basic integration serializer mostly for returned values.
 * @export
 * @interface LocalBaserowIntegrationIntegration
 */
export interface LocalBaserowIntegrationIntegration {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowIntegrationIntegration
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowIntegrationIntegration
     */
    'application_id': number;
    /**
     * The type of the integration.
     * @type {string}
     * @memberof LocalBaserowIntegrationIntegration
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowIntegrationIntegration
     */
    'name': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof LocalBaserowIntegrationIntegration
     */
    'order': string;
    /**
     *
     * @type {LocalBaserowContextData}
     * @memberof LocalBaserowIntegrationIntegration
     */
    'context_data': LocalBaserowContextData;
    /**
     *
     * @type {SubjectUser}
     * @memberof LocalBaserowIntegrationIntegration
     */
    'authorized_user': SubjectUser;
}
/**
 *
 * @export
 * @interface LocalBaserowIntegrationUpdateIntegration
 */
export interface LocalBaserowIntegrationUpdateIntegration {
    /**
     *
     * @type {string}
     * @memberof LocalBaserowIntegrationUpdateIntegration
     */
    'name'?: string;
    /**
     *
     * @type {LocalBaserowContextData}
     * @memberof LocalBaserowIntegrationUpdateIntegration
     */
    'context_data': LocalBaserowContextData;
    /**
     *
     * @type {SubjectUser}
     * @memberof LocalBaserowIntegrationUpdateIntegration
     */
    'authorized_user': SubjectUser;
}
/**
 *
 * @export
 * @interface LocalBaserowListRows
 */
export interface LocalBaserowListRows {
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowListRows
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     *
     * @type {Array<LocalBaserowTableServiceSort>}
     * @memberof LocalBaserowListRows
     */
    'sortings'?: Array<LocalBaserowTableServiceSort>;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRows
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRows
     */
    'integration_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRows
     */
    'view_id'?: number | null;
}
/**
 * This serializer allow to set the type of a data_source and the data_source id before which we want to insert the new data_source.
 * @export
 * @interface LocalBaserowListRowsCreateDataSource
 */
export interface LocalBaserowListRowsCreateDataSource {
    /**
     * The type of the service.  * `local_baserow_get_row` - local_baserow_get_row * `local_baserow_list_rows` - local_baserow_list_rows * `local_baserow_upsert_row` - local_baserow_upsert_row * `local_baserow_delete_row` - local_baserow_delete_row
     * @type {TypeC66Enum}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'type'?: TypeC66Enum;
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'name'?: string | null;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'page_id'?: number | null;
    /**
     * If provided, creates the data_source before the data_source with the given id.
     * @type {number}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'before_id'?: number;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'integration_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceSort>}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'sortings'?: Array<LocalBaserowTableServiceSort>;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowListRowsCreateDataSource
     */
    'search_query'?: string;
}
/**
 * Basic data_source serializer mostly for returned values. This serializer flatten the service properties so that from an API POV the data_source object only exists.
 * @export
 * @interface LocalBaserowListRowsDataSource
 */
export interface LocalBaserowListRowsDataSource {
    /**
     * Data source id.
     * @type {number}
     * @memberof LocalBaserowListRowsDataSource
     */
    'id': number;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsDataSource
     */
    'integration_id'?: number | null;
    /**
     * The type of the data source.
     * @type {string}
     * @memberof LocalBaserowListRowsDataSource
     */
    'type': string;
    /**
     * The schema of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowListRowsDataSource
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * The context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowListRowsDataSource
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The schema context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowListRowsDataSource
     */
    'context_data_schema': {
        [key: string]: any;
    };
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowListRowsDataSource
     */
    'name': string;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowListRowsDataSource
     */
    'page_id': number;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LocalBaserowListRowsDataSource
     */
    'order': number;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsDataSource
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceSort>}
     * @memberof LocalBaserowListRowsDataSource
     */
    'sortings'?: Array<LocalBaserowTableServiceSort>;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowListRowsDataSource
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowListRowsDataSource
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowListRowsDataSource
     */
    'search_query'?: string;
}
/**
 * Basic data_source serializer mostly for returned values. This serializer flatten the service properties so that from an API POV the data_source object only exists.
 * @export
 * @interface LocalBaserowListRowsPublicDataSource
 */
export interface LocalBaserowListRowsPublicDataSource {
    /**
     * Data source id.
     * @type {number}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'id': number;
    /**
     * The type of the data source.
     * @type {string}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'type': string;
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'name': string;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'page_id': number;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'order': number;
    /**
     * The context data of the data source.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'integration_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceSort>}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'sortings'?: Array<LocalBaserowTableServiceSort>;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowListRowsPublicDataSource
     */
    'search_query'?: string;
}
/**
 * Basic service serializer mostly for returned values.
 * @export
 * @interface LocalBaserowListRowsService
 */
export interface LocalBaserowListRowsService {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowListRowsService
     */
    'id': number;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsService
     */
    'integration_id'?: number | null;
    /**
     * The type of the service.
     * @type {string}
     * @memberof LocalBaserowListRowsService
     */
    'type': string;
    /**
     * The schema of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowListRowsService
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * The context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowListRowsService
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The schema context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowListRowsService
     */
    'context_data_schema': {
        [key: string]: any;
    };
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsService
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsService
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceSort>}
     * @memberof LocalBaserowListRowsService
     */
    'sortings'?: Array<LocalBaserowTableServiceSort>;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowListRowsService
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowListRowsService
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowListRowsService
     */
    'search_query'?: string;
}
/**
 *
 * @export
 * @interface LocalBaserowListRowsUpdateDataSource
 */
export interface LocalBaserowListRowsUpdateDataSource {
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsUpdateDataSource
     */
    'integration_id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowListRowsUpdateDataSource
     */
    'name'?: string;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsUpdateDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof LocalBaserowListRowsUpdateDataSource
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceSort>}
     * @memberof LocalBaserowListRowsUpdateDataSource
     */
    'sortings'?: Array<LocalBaserowTableServiceSort>;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof LocalBaserowListRowsUpdateDataSource
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof LocalBaserowListRowsUpdateDataSource
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof LocalBaserowListRowsUpdateDataSource
     */
    'search_query'?: string;
}
/**
 * Basic app_auth_provider serializer mostly for returned values.
 * @export
 * @interface LocalBaserowPasswordAppAuthProviderAppAuthProvider
 */
export interface LocalBaserowPasswordAppAuthProviderAppAuthProvider {
    /**
     * The type of the app_auth_provider.
     * @type {string}
     * @memberof LocalBaserowPasswordAppAuthProviderAppAuthProvider
     */
    'type': string;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowPasswordAppAuthProviderAppAuthProvider
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowPasswordAppAuthProviderAppAuthProvider
     */
    'domain'?: string | null;
    /**
     * The id of the field to use as password for the user account.
     * @type {number}
     * @memberof LocalBaserowPasswordAppAuthProviderAppAuthProvider
     */
    'password_field_id'?: number | null;
}
/**
 * This serializer allow to set the type of an app_auth_provider and the app_auth_provider id before which we want to insert the new app_auth_provider.
 * @export
 * @interface LocalBaserowPasswordAppAuthProviderBaseAppAuthProvider
 */
export interface LocalBaserowPasswordAppAuthProviderBaseAppAuthProvider {
    /**
     * The type of the app_auth_provider.  * `local_baserow_password` - local_baserow_password
     * @type {LocalBaserowPasswordAppAuthProviderBaseAppAuthProviderTypeEnum}
     * @memberof LocalBaserowPasswordAppAuthProviderBaseAppAuthProvider
     */
    'type': LocalBaserowPasswordAppAuthProviderBaseAppAuthProviderTypeEnum;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowPasswordAppAuthProviderBaseAppAuthProvider
     */
    'user_source_id': number;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowPasswordAppAuthProviderBaseAppAuthProvider
     */
    'domain'?: string | null;
    /**
     * The id of the field to use as password for the user account.
     * @type {number}
     * @memberof LocalBaserowPasswordAppAuthProviderBaseAppAuthProvider
     */
    'password_field_id'?: number | null;
}
/**
 * * `local_baserow_password` - local_baserow_password
 * @export
 * @enum {string}
 */
export declare const LocalBaserowPasswordAppAuthProviderBaseAppAuthProviderTypeEnum: {
    readonly LocalBaserowPassword: "local_baserow_password";
};
export type LocalBaserowPasswordAppAuthProviderBaseAppAuthProviderTypeEnum = typeof LocalBaserowPasswordAppAuthProviderBaseAppAuthProviderTypeEnum[keyof typeof LocalBaserowPasswordAppAuthProviderBaseAppAuthProviderTypeEnum];
/**
 *
 * @export
 * @interface LocalBaserowTableServiceFieldMapping
 */
export interface LocalBaserowTableServiceFieldMapping {
    /**
     * The primary key of the associated database table field.
     * @type {number}
     * @memberof LocalBaserowTableServiceFieldMapping
     */
    'field_id': number;
    /**
     * Indicates whether the field mapping is enabled or not.
     * @type {boolean}
     * @memberof LocalBaserowTableServiceFieldMapping
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowTableServiceFieldMapping
     */
    'value': string;
}
/**
 *
 * @export
 * @interface LocalBaserowTableServiceFilter
 */
export interface LocalBaserowTableServiceFilter {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowTableServiceFilter
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowTableServiceFilter
     */
    'order': number;
    /**
     * The database Field, in the LocalBaserowTableService, which we would like to filter upon.
     * @type {number}
     * @memberof LocalBaserowTableServiceFilter
     */
    'field': number;
    /**
     * Indicates how the field\'s value must be compared to the filter\'s value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
     * @type {string}
     * @memberof LocalBaserowTableServiceFilter
     */
    'type': string;
    /**
     * A formula for the filter\'s value.
     * @type {string}
     * @memberof LocalBaserowTableServiceFilter
     */
    'value': string;
    /**
     * Indicates whether the value is a formula or not.
     * @type {boolean}
     * @memberof LocalBaserowTableServiceFilter
     */
    'value_is_formula'?: boolean;
}
/**
 *
 * @export
 * @interface LocalBaserowTableServiceSort
 */
export interface LocalBaserowTableServiceSort {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowTableServiceSort
     */
    'id': number;
    /**
     * The database Field, in the LocalBaserowTableService service, which we would like to sort upon.
     * @type {number}
     * @memberof LocalBaserowTableServiceSort
     */
    'field': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowTableServiceSort
     */
    'order': number;
    /**
     * Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A.  * `ASC` - Ascending * `DESC` - Descending
     * @type {OrderByEnum}
     * @memberof LocalBaserowTableServiceSort
     */
    'order_by'?: OrderByEnum;
}
/**
 * Basic builder workflow action serializer
 * @export
 * @interface LocalBaserowUpdateRowWorkflowActionBuilderWorkflowAction
 */
export interface LocalBaserowUpdateRowWorkflowActionBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowUpdateRowWorkflowActionBuilderWorkflowAction
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowUpdateRowWorkflowActionBuilderWorkflowAction
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowUpdateRowWorkflowActionBuilderWorkflowAction
     */
    'element_id': number | null;
    /**
     * The type of the workflow action
     * @type {string}
     * @memberof LocalBaserowUpdateRowWorkflowActionBuilderWorkflowAction
     */
    'type': string;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof LocalBaserowUpdateRowWorkflowActionBuilderWorkflowAction
     */
    'event': string;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationServiceService}
     * @memberof LocalBaserowUpdateRowWorkflowActionBuilderWorkflowAction
     */
    'service': IntegrationServiceService;
}
/**
 *
 * @export
 * @interface LocalBaserowUpdateRowWorkflowActionCreateBuilderWorkflowAction
 */
export interface LocalBaserowUpdateRowWorkflowActionCreateBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowUpdateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'id': number;
    /**
     * The id of the element the workflow action is associated with
     * @type {number}
     * @memberof LocalBaserowUpdateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'element_id'?: number | null;
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof LocalBaserowUpdateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'type': Type051Enum;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof LocalBaserowUpdateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'event': string;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationService}
     * @memberof LocalBaserowUpdateRowWorkflowActionCreateBuilderWorkflowAction
     */
    'service'?: IntegrationService;
}
/**
 *
 * @export
 * @interface LocalBaserowUpdateRowWorkflowActionUpdateBuilderWorkflowActions
 */
export interface LocalBaserowUpdateRowWorkflowActionUpdateBuilderWorkflowActions {
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof LocalBaserowUpdateRowWorkflowActionUpdateBuilderWorkflowActions
     */
    'type'?: Type051Enum;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationService}
     * @memberof LocalBaserowUpdateRowWorkflowActionUpdateBuilderWorkflowActions
     */
    'service'?: IntegrationService;
}
/**
 *
 * @export
 * @interface LocalBaserowUpsertRow
 */
export interface LocalBaserowUpsertRow {
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowUpsertRow
     */
    'row_id'?: string;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRow
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRow
     */
    'integration_id'?: number | null;
    /**
     * The field mapping associated with this service.
     * @type {Array<LocalBaserowTableServiceFieldMapping>}
     * @memberof LocalBaserowUpsertRow
     */
    'field_mappings'?: Array<LocalBaserowTableServiceFieldMapping>;
}
/**
 * This serializer allow to set the type of a data_source and the data_source id before which we want to insert the new data_source.
 * @export
 * @interface LocalBaserowUpsertRowCreateDataSource
 */
export interface LocalBaserowUpsertRowCreateDataSource {
    /**
     * The type of the service.  * `local_baserow_get_row` - local_baserow_get_row * `local_baserow_list_rows` - local_baserow_list_rows * `local_baserow_upsert_row` - local_baserow_upsert_row * `local_baserow_delete_row` - local_baserow_delete_row
     * @type {TypeC66Enum}
     * @memberof LocalBaserowUpsertRowCreateDataSource
     */
    'type'?: TypeC66Enum;
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowUpsertRowCreateDataSource
     */
    'name'?: string | null;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowUpsertRowCreateDataSource
     */
    'page_id'?: number | null;
    /**
     * If provided, creates the data_source before the data_source with the given id.
     * @type {number}
     * @memberof LocalBaserowUpsertRowCreateDataSource
     */
    'before_id'?: number;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowCreateDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowCreateDataSource
     */
    'integration_id'?: number | null;
    /**
     * The field mapping associated with this service.
     * @type {Array<LocalBaserowTableServiceFieldMapping>}
     * @memberof LocalBaserowUpsertRowCreateDataSource
     */
    'field_mappings'?: Array<LocalBaserowTableServiceFieldMapping>;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowUpsertRowCreateDataSource
     */
    'row_id'?: string;
}
/**
 * Basic data_source serializer mostly for returned values. This serializer flatten the service properties so that from an API POV the data_source object only exists.
 * @export
 * @interface LocalBaserowUpsertRowDataSource
 */
export interface LocalBaserowUpsertRowDataSource {
    /**
     * Data source id.
     * @type {number}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'id': number;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'integration_id'?: number | null;
    /**
     * The type of the data source.
     * @type {string}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'type': string;
    /**
     * The schema of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * The context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The schema context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'context_data_schema': {
        [key: string]: any;
    };
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'name': string;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'page_id': number;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'order': number;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'table_id'?: number | null;
    /**
     * The field mapping associated with this service.
     * @type {Array<LocalBaserowTableServiceFieldMapping>}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'field_mappings'?: Array<LocalBaserowTableServiceFieldMapping>;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowUpsertRowDataSource
     */
    'row_id'?: string;
}
/**
 * Basic data_source serializer mostly for returned values. This serializer flatten the service properties so that from an API POV the data_source object only exists.
 * @export
 * @interface LocalBaserowUpsertRowPublicDataSource
 */
export interface LocalBaserowUpsertRowPublicDataSource {
    /**
     * Data source id.
     * @type {number}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'id': number;
    /**
     * The type of the data source.
     * @type {string}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'type': string;
    /**
     * Human name for this data source.
     * @type {string}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'name': string;
    /**
     * Page this data source is linked to.
     * @type {number}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'page_id': number;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'order': number;
    /**
     * The context data of the data source.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'integration_id'?: number | null;
    /**
     * The field mapping associated with this service.
     * @type {Array<LocalBaserowTableServiceFieldMapping>}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'field_mappings'?: Array<LocalBaserowTableServiceFieldMapping>;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowUpsertRowPublicDataSource
     */
    'row_id'?: string;
}
/**
 * Basic service serializer mostly for returned values.
 * @export
 * @interface LocalBaserowUpsertRowService
 */
export interface LocalBaserowUpsertRowService {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowUpsertRowService
     */
    'id': number;
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowService
     */
    'integration_id'?: number | null;
    /**
     * The type of the service.
     * @type {string}
     * @memberof LocalBaserowUpsertRowService
     */
    'type': string;
    /**
     * The schema of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowUpsertRowService
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * The context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowUpsertRowService
     */
    'context_data': {
        [key: string]: any;
    };
    /**
     * The schema context data of the service.
     * @type {{ [key: string]: any; }}
     * @memberof LocalBaserowUpsertRowService
     */
    'context_data_schema': {
        [key: string]: any;
    };
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowService
     */
    'table_id'?: number | null;
    /**
     * The field mapping associated with this service.
     * @type {Array<LocalBaserowTableServiceFieldMapping>}
     * @memberof LocalBaserowUpsertRowService
     */
    'field_mappings'?: Array<LocalBaserowTableServiceFieldMapping>;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowUpsertRowService
     */
    'row_id'?: string;
}
/**
 *
 * @export
 * @interface LocalBaserowUpsertRowUpdateDataSource
 */
export interface LocalBaserowUpsertRowUpdateDataSource {
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowUpdateDataSource
     */
    'integration_id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowUpsertRowUpdateDataSource
     */
    'name'?: string;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUpsertRowUpdateDataSource
     */
    'table_id'?: number | null;
    /**
     * The field mapping associated with this service.
     * @type {Array<LocalBaserowTableServiceFieldMapping>}
     * @memberof LocalBaserowUpsertRowUpdateDataSource
     */
    'field_mappings'?: Array<LocalBaserowTableServiceFieldMapping>;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof LocalBaserowUpsertRowUpdateDataSource
     */
    'row_id'?: string;
}
/**
 * Basic user source serializer mostly for returned values.
 * @export
 * @interface LocalBaserowUserSourceBasePublicUserSource
 */
export interface LocalBaserowUserSourceBasePublicUserSource {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'id': number;
    /**
     * Unique id for this user source.
     * @type {string}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'uid': string;
    /**
     * The type of the user_source.
     * @type {string}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'name': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'order': string;
    /**
     * Auth providers related to this user source.
     * @type {Array<AppAuthProviderAppAuthProvider>}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'auth_providers'?: Array<AppAuthProviderAppAuthProvider>;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'table_id'?: number | null;
    /**
     * The id of the field to use as email for the user account.
     * @type {number}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'email_field_id'?: number | null;
    /**
     * The id of the field that contains the user name.
     * @type {number}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'name_field_id'?: number | null;
    /**
     * The id of the field that contains the user role.
     * @type {number}
     * @memberof LocalBaserowUserSourceBasePublicUserSource
     */
    'role_field_id'?: number | null;
}
/**
 * This serializer allow to set the type of an user_source and the user_source id before which we want to insert the new user_source.
 * @export
 * @interface LocalBaserowUserSourceCreateUserSource
 */
export interface LocalBaserowUserSourceCreateUserSource {
    /**
     * If provided, creates the user_source before the user_source with the given id.
     * @type {number}
     * @memberof LocalBaserowUserSourceCreateUserSource
     */
    'before_id'?: number;
    /**
     * The type of the user_source.  * `local_baserow` - local_baserow
     * @type {Type050Enum}
     * @memberof LocalBaserowUserSourceCreateUserSource
     */
    'type': Type050Enum;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowUserSourceCreateUserSource
     */
    'name': string;
    /**
     * The related integration id.
     * @type {number}
     * @memberof LocalBaserowUserSourceCreateUserSource
     */
    'integration_id': number;
    /**
     * Auth providers related to this user source.
     * @type {Array<AppAuthProviderBaseAppAuthProvider>}
     * @memberof LocalBaserowUserSourceCreateUserSource
     */
    'auth_providers'?: Array<AppAuthProviderBaseAppAuthProvider>;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUserSourceCreateUserSource
     */
    'table_id'?: number | null;
    /**
     * The id of the field to use as email for the user account.
     * @type {number}
     * @memberof LocalBaserowUserSourceCreateUserSource
     */
    'email_field_id'?: number | null;
    /**
     * The id of the field that contains the user name.
     * @type {number}
     * @memberof LocalBaserowUserSourceCreateUserSource
     */
    'name_field_id'?: number | null;
    /**
     * The id of the field that contains the user role.
     * @type {number}
     * @memberof LocalBaserowUserSourceCreateUserSource
     */
    'role_field_id'?: number | null;
}
/**
 * A serializer to update a user source.
 * @export
 * @interface LocalBaserowUserSourceUpdateUserSource
 */
export interface LocalBaserowUserSourceUpdateUserSource {
    /**
     *
     * @type {string}
     * @memberof LocalBaserowUserSourceUpdateUserSource
     */
    'name'?: string;
    /**
     * The related integration id.
     * @type {number}
     * @memberof LocalBaserowUserSourceUpdateUserSource
     */
    'integration_id'?: number;
    /**
     * Auth providers related to this user source.
     * @type {Array<AppAuthProviderBaseAppAuthProvider>}
     * @memberof LocalBaserowUserSourceUpdateUserSource
     */
    'auth_providers'?: Array<AppAuthProviderBaseAppAuthProvider>;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUserSourceUpdateUserSource
     */
    'table_id'?: number | null;
    /**
     * The id of the field to use as email for the user account.
     * @type {number}
     * @memberof LocalBaserowUserSourceUpdateUserSource
     */
    'email_field_id'?: number | null;
    /**
     * The id of the field that contains the user name.
     * @type {number}
     * @memberof LocalBaserowUserSourceUpdateUserSource
     */
    'name_field_id'?: number | null;
    /**
     * The id of the field that contains the user role.
     * @type {number}
     * @memberof LocalBaserowUserSourceUpdateUserSource
     */
    'role_field_id'?: number | null;
}
/**
 * Basic user_source serializer mostly for returned values.
 * @export
 * @interface LocalBaserowUserSourceUserSource
 */
export interface LocalBaserowUserSourceUserSource {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'id': number;
    /**
     * Unique id for this user source.
     * @type {string}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'uid': string;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'application_id': number;
    /**
     * The Integration used to establish the connection with the service.
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'integration_id': number | null;
    /**
     * The type of the user_source.
     * @type {string}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'name': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'order': string;
    /**
     * Auth providers related to this user source.
     * @type {Array<AppAuthProviderAppAuthProvider>}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'auth_providers'?: Array<AppAuthProviderAppAuthProvider>;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'table_id'?: number | null;
    /**
     * The id of the field to use as email for the user account.
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'email_field_id'?: number | null;
    /**
     * The id of the field that contains the user name.
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'name_field_id'?: number | null;
    /**
     * The id of the field that contains the user role.
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSource
     */
    'role_field_id'?: number | null;
}
/**
 *
 * @export
 * @interface LocalBaserowUserSourceUserSourceRoles
 */
export interface LocalBaserowUserSourceUserSourceRoles {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSourceRoles
     */
    'id': number;
    /**
     *
     * @type {Array<string>}
     * @memberof LocalBaserowUserSourceUserSourceRoles
     */
    'roles': Array<string>;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSourceRoles
     */
    'table_id'?: number | null;
    /**
     * The id of the field to use as email for the user account.
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSourceRoles
     */
    'email_field_id'?: number | null;
    /**
     * The id of the field that contains the user name.
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSourceRoles
     */
    'name_field_id'?: number | null;
    /**
     * The id of the field that contains the user role.
     * @type {number}
     * @memberof LocalBaserowUserSourceUserSourceRoles
     */
    'role_field_id'?: number | null;
}
/**
 *
 * @export
 * @interface LocalBaserowView
 */
export interface LocalBaserowView {
    /**
     *
     * @type {number}
     * @memberof LocalBaserowView
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LocalBaserowView
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LocalBaserowView
     */
    'name': string;
}
/**
 * Basic builder workflow action serializer
 * @export
 * @interface LogoutWorkflowActionBuilderWorkflowAction
 */
export interface LogoutWorkflowActionBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof LogoutWorkflowActionBuilderWorkflowAction
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LogoutWorkflowActionBuilderWorkflowAction
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof LogoutWorkflowActionBuilderWorkflowAction
     */
    'element_id': number | null;
    /**
     * The type of the workflow action
     * @type {string}
     * @memberof LogoutWorkflowActionBuilderWorkflowAction
     */
    'type': string;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof LogoutWorkflowActionBuilderWorkflowAction
     */
    'event': string;
}
/**
 *
 * @export
 * @interface LogoutWorkflowActionCreateBuilderWorkflowAction
 */
export interface LogoutWorkflowActionCreateBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof LogoutWorkflowActionCreateBuilderWorkflowAction
     */
    'id': number;
    /**
     * The id of the element the workflow action is associated with
     * @type {number}
     * @memberof LogoutWorkflowActionCreateBuilderWorkflowAction
     */
    'element_id'?: number | null;
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof LogoutWorkflowActionCreateBuilderWorkflowAction
     */
    'type': Type051Enum;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof LogoutWorkflowActionCreateBuilderWorkflowAction
     */
    'event': string;
}
/**
 *
 * @export
 * @interface LogoutWorkflowActionUpdateBuilderWorkflowActions
 */
export interface LogoutWorkflowActionUpdateBuilderWorkflowActions {
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof LogoutWorkflowActionUpdateBuilderWorkflowActions
     */
    'type'?: Type051Enum;
}
/**
 *
 * @export
 * @interface LongTextFieldCreateField
 */
export interface LongTextFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof LongTextFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LongTextFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LongTextFieldCreateField
     */
    'description'?: string | null;
    /**
     * Enable rich text formatting for the field.
     * @type {boolean}
     * @memberof LongTextFieldCreateField
     */
    'long_text_enable_rich_text'?: boolean | null;
}
/**
 *
 * @export
 * @interface LongTextFieldField
 */
export interface LongTextFieldField {
    /**
     *
     * @type {number}
     * @memberof LongTextFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LongTextFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LongTextFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LongTextFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LongTextFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LongTextFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LongTextFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LongTextFieldField
     */
    'description'?: string | null;
    /**
     * Enable rich text formatting for the field.
     * @type {boolean}
     * @memberof LongTextFieldField
     */
    'long_text_enable_rich_text'?: boolean | null;
}
/**
 *
 * @export
 * @interface LongTextFieldFieldSerializerWithRelatedFields
 */
export interface LongTextFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     * Enable rich text formatting for the field.
     * @type {boolean}
     * @memberof LongTextFieldFieldSerializerWithRelatedFields
     */
    'long_text_enable_rich_text'?: boolean | null;
}
/**
 *
 * @export
 * @interface LongTextFieldUpdateField
 */
export interface LongTextFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof LongTextFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LongTextFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LongTextFieldUpdateField
     */
    'description'?: string | null;
    /**
     * Enable rich text formatting for the field.
     * @type {boolean}
     * @memberof LongTextFieldUpdateField
     */
    'long_text_enable_rich_text'?: boolean | null;
}
/**
 *
 * @export
 * @interface LookupFieldCreateField
 */
export interface LookupFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof LookupFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LookupFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LookupFieldCreateField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof LookupFieldCreateField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof LookupFieldCreateField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof LookupFieldCreateField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof LookupFieldCreateField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof LookupFieldCreateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof LookupFieldCreateField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof LookupFieldCreateField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof LookupFieldCreateField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof LookupFieldCreateField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LookupFieldCreateField
     */
    'error'?: string | null;
    /**
     * The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required.
     * @type {number}
     * @memberof LookupFieldCreateField
     */
    'through_field_id'?: number | null;
    /**
     * The name of the link row field to lookup values for.
     * @type {string}
     * @memberof LookupFieldCreateField
     */
    'through_field_name'?: string | null;
    /**
     * The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required.
     * @type {number}
     * @memberof LookupFieldCreateField
     */
    'target_field_id'?: number | null;
    /**
     * The name of the field in the table linked to by the through_field to lookup.
     * @type {string}
     * @memberof LookupFieldCreateField
     */
    'target_field_name'?: string | null;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof LookupFieldCreateField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface LookupFieldField
 */
export interface LookupFieldField {
    /**
     *
     * @type {number}
     * @memberof LookupFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LookupFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LookupFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LookupFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LookupFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LookupFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LookupFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LookupFieldField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof LookupFieldField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof LookupFieldField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof LookupFieldField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof LookupFieldField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof LookupFieldField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof LookupFieldField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof LookupFieldField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof LookupFieldField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof LookupFieldField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LookupFieldField
     */
    'error'?: string | null;
    /**
     * The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required.
     * @type {number}
     * @memberof LookupFieldField
     */
    'through_field_id'?: number | null;
    /**
     * The name of the link row field to lookup values for.
     * @type {string}
     * @memberof LookupFieldField
     */
    'through_field_name'?: string | null;
    /**
     * The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required.
     * @type {number}
     * @memberof LookupFieldField
     */
    'target_field_id'?: number | null;
    /**
     * The name of the field in the table linked to by the through_field to lookup.
     * @type {string}
     * @memberof LookupFieldField
     */
    'target_field_name'?: string | null;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof LookupFieldField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface LookupFieldFieldSerializerWithRelatedFields
 */
export interface LookupFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'error'?: string | null;
    /**
     * The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required.
     * @type {number}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'through_field_id'?: number | null;
    /**
     * The name of the link row field to lookup values for.
     * @type {string}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'through_field_name'?: string | null;
    /**
     * The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required.
     * @type {number}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'target_field_id'?: number | null;
    /**
     * The name of the field in the table linked to by the through_field to lookup.
     * @type {string}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'target_field_name'?: string | null;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof LookupFieldFieldSerializerWithRelatedFields
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface LookupFieldUpdateField
 */
export interface LookupFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof LookupFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof LookupFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof LookupFieldUpdateField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof LookupFieldUpdateField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof LookupFieldUpdateField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof LookupFieldUpdateField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof LookupFieldUpdateField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof LookupFieldUpdateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof LookupFieldUpdateField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof LookupFieldUpdateField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof LookupFieldUpdateField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof LookupFieldUpdateField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LookupFieldUpdateField
     */
    'error'?: string | null;
    /**
     * The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required.
     * @type {number}
     * @memberof LookupFieldUpdateField
     */
    'through_field_id'?: number | null;
    /**
     * The name of the link row field to lookup values for.
     * @type {string}
     * @memberof LookupFieldUpdateField
     */
    'through_field_name'?: string | null;
    /**
     * The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required.
     * @type {number}
     * @memberof LookupFieldUpdateField
     */
    'target_field_id'?: number | null;
    /**
     * The name of the field in the table linked to by the through_field to lookup.
     * @type {string}
     * @memberof LookupFieldUpdateField
     */
    'target_field_name'?: string | null;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof LookupFieldUpdateField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface MarkNotificationAsRead404Response
 */
export interface MarkNotificationAsRead404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof MarkNotificationAsRead404Response
     */
    'error'?: MarkNotificationAsRead404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof MarkNotificationAsRead404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const MarkNotificationAsRead404ResponseErrorEnum: {
    readonly ErrorGroupDoesNotExist: "ERROR_GROUP_DOES_NOT_EXIST";
    readonly NotificationDoesNotExist: "NOTIFICATION_DOES_NOT_EXIST";
};
export type MarkNotificationAsRead404ResponseErrorEnum = typeof MarkNotificationAsRead404ResponseErrorEnum[keyof typeof MarkNotificationAsRead404ResponseErrorEnum];
/**
 * * `form` - form * `survey` - survey
 * @export
 * @enum {string}
 */
export declare const Mode51eEnum: {
    readonly Form: "form";
    readonly Survey: "survey";
};
export type Mode51eEnum = typeof Mode51eEnum[keyof typeof Mode51eEnum];
/**
 * * `all` - all * `mentions` - mentions
 * @export
 * @enum {string}
 */
export declare const Mode884Enum: {
    readonly All: "all";
    readonly Mentions: "mentions";
};
export type Mode884Enum = typeof Mode884Enum[keyof typeof Mode884Enum];
/**
 *
 * @export
 * @interface MoveApplicationIntegration400Response
 */
export interface MoveApplicationIntegration400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof MoveApplicationIntegration400Response
     */
    'error'?: MoveApplicationIntegration400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof MoveApplicationIntegration400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const MoveApplicationIntegration400ResponseErrorEnum: {
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly IntegrationNotInSameApplication: "ERROR_INTEGRATION_NOT_IN_SAME_APPLICATION";
};
export type MoveApplicationIntegration400ResponseErrorEnum = typeof MoveApplicationIntegration400ResponseErrorEnum[keyof typeof MoveApplicationIntegration400ResponseErrorEnum];
/**
 *
 * @export
 * @interface MoveApplicationUserSource400Response
 */
export interface MoveApplicationUserSource400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof MoveApplicationUserSource400Response
     */
    'error'?: MoveApplicationUserSource400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof MoveApplicationUserSource400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const MoveApplicationUserSource400ResponseErrorEnum: {
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly UserSourceNotInSameApplication: "ERROR_USER_SOURCE_NOT_IN_SAME_APPLICATION";
};
export type MoveApplicationUserSource400ResponseErrorEnum = typeof MoveApplicationUserSource400ResponseErrorEnum[keyof typeof MoveApplicationUserSource400ResponseErrorEnum];
/**
 *
 * @export
 * @interface MoveBuilderPageDataSource400Response
 */
export interface MoveBuilderPageDataSource400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof MoveBuilderPageDataSource400Response
     */
    'error'?: MoveBuilderPageDataSource400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof MoveBuilderPageDataSource400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const MoveBuilderPageDataSource400ResponseErrorEnum: {
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly DataSourceNotInSamePage: "ERROR_DATA_SOURCE_NOT_IN_SAME_PAGE";
};
export type MoveBuilderPageDataSource400ResponseErrorEnum = typeof MoveBuilderPageDataSource400ResponseErrorEnum[keyof typeof MoveBuilderPageDataSource400ResponseErrorEnum];
/**
 *
 * @export
 * @interface MoveBuilderPageElement400Response
 */
export interface MoveBuilderPageElement400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof MoveBuilderPageElement400Response
     */
    'error'?: MoveBuilderPageElement400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof MoveBuilderPageElement400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const MoveBuilderPageElement400ResponseErrorEnum: {
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly ElementNotInSamePage: "ERROR_ELEMENT_NOT_IN_SAME_PAGE";
};
export type MoveBuilderPageElement400ResponseErrorEnum = typeof MoveBuilderPageElement400ResponseErrorEnum[keyof typeof MoveBuilderPageElement400ResponseErrorEnum];
/**
 *
 * @export
 * @interface MultipleCollaboratorsFieldCreateField
 */
export interface MultipleCollaboratorsFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof MultipleCollaboratorsFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof MultipleCollaboratorsFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof MultipleCollaboratorsFieldCreateField
     */
    'description'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof MultipleCollaboratorsFieldCreateField
     */
    'notify_user_when_added'?: boolean;
}
/**
 *
 * @export
 * @interface MultipleCollaboratorsFieldField
 */
export interface MultipleCollaboratorsFieldField {
    /**
     *
     * @type {number}
     * @memberof MultipleCollaboratorsFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof MultipleCollaboratorsFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof MultipleCollaboratorsFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof MultipleCollaboratorsFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof MultipleCollaboratorsFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof MultipleCollaboratorsFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof MultipleCollaboratorsFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof MultipleCollaboratorsFieldField
     */
    'description'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof MultipleCollaboratorsFieldField
     */
    'notify_user_when_added'?: boolean;
}
/**
 *
 * @export
 * @interface MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
 */
export interface MultipleCollaboratorsFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     *
     * @type {boolean}
     * @memberof MultipleCollaboratorsFieldFieldSerializerWithRelatedFields
     */
    'notify_user_when_added'?: boolean;
}
/**
 *
 * @export
 * @interface MultipleCollaboratorsFieldUpdateField
 */
export interface MultipleCollaboratorsFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof MultipleCollaboratorsFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof MultipleCollaboratorsFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof MultipleCollaboratorsFieldUpdateField
     */
    'description'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof MultipleCollaboratorsFieldUpdateField
     */
    'notify_user_when_added'?: boolean;
}
/**
 *
 * @export
 * @interface MultipleSelectFieldCreateField
 */
export interface MultipleSelectFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof MultipleSelectFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof MultipleSelectFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof MultipleSelectFieldCreateField
     */
    'description'?: string | null;
    /**
     *
     * @type {Array<SelectOption>}
     * @memberof MultipleSelectFieldCreateField
     */
    'select_options'?: Array<SelectOption>;
}
/**
 *
 * @export
 * @interface MultipleSelectFieldField
 */
export interface MultipleSelectFieldField {
    /**
     *
     * @type {number}
     * @memberof MultipleSelectFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof MultipleSelectFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof MultipleSelectFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof MultipleSelectFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof MultipleSelectFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof MultipleSelectFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof MultipleSelectFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof MultipleSelectFieldField
     */
    'description'?: string | null;
    /**
     *
     * @type {Array<SelectOption>}
     * @memberof MultipleSelectFieldField
     */
    'select_options'?: Array<SelectOption>;
}
/**
 *
 * @export
 * @interface MultipleSelectFieldFieldSerializerWithRelatedFields
 */
export interface MultipleSelectFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     *
     * @type {Array<SelectOption>}
     * @memberof MultipleSelectFieldFieldSerializerWithRelatedFields
     */
    'select_options'?: Array<SelectOption>;
}
/**
 *
 * @export
 * @interface MultipleSelectFieldUpdateField
 */
export interface MultipleSelectFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof MultipleSelectFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof MultipleSelectFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof MultipleSelectFieldUpdateField
     */
    'description'?: string | null;
    /**
     *
     * @type {Array<SelectOption>}
     * @memberof MultipleSelectFieldUpdateField
     */
    'select_options'?: Array<SelectOption>;
}
/**
 * * `page` - Page * `custom` - Custom
 * @export
 * @enum {string}
 */
export declare const NavigationTypeEnum: {
    readonly Page: "page";
    readonly Custom: "custom";
};
export type NavigationTypeEnum = typeof NavigationTypeEnum[keyof typeof NavigationTypeEnum];
/**
 * Serialize notification data along with the recipient information about the read status for the given user.
 * @export
 * @interface NotificationRecipient
 */
export interface NotificationRecipient {
    /**
     * The id of the notification.
     * @type {number}
     * @memberof NotificationRecipient
     */
    'id': number;
    /**
     * The type of notification
     * @type {string}
     * @memberof NotificationRecipient
     */
    'type': string;
    /**
     * The user that sent the notification.
     * @type {Sender}
     * @memberof NotificationRecipient
     */
    'sender': Sender;
    /**
     * The workspace that the notification is in (if any).
     * @type {string}
     * @memberof NotificationRecipient
     */
    'workspace': string;
    /**
     * The date and time that the notification was created.
     * @type {string}
     * @memberof NotificationRecipient
     */
    'created_on': string;
    /**
     * If True, then the notification has been read by the user.
     * @type {boolean}
     * @memberof NotificationRecipient
     */
    'read'?: boolean;
    /**
     * The data associated with the notification.
     * @type {any}
     * @memberof NotificationRecipient
     */
    'data': any;
}
/**
 * Basic builder workflow action serializer
 * @export
 * @interface NotificationWorkflowActionBuilderWorkflowAction
 */
export interface NotificationWorkflowActionBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof NotificationWorkflowActionBuilderWorkflowAction
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof NotificationWorkflowActionBuilderWorkflowAction
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof NotificationWorkflowActionBuilderWorkflowAction
     */
    'element_id': number | null;
    /**
     * The type of the workflow action
     * @type {string}
     * @memberof NotificationWorkflowActionBuilderWorkflowAction
     */
    'type': string;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof NotificationWorkflowActionBuilderWorkflowAction
     */
    'event': string;
    /**
     * The title of the notification. Must be an formula.
     * @type {string}
     * @memberof NotificationWorkflowActionBuilderWorkflowAction
     */
    'title'?: string;
    /**
     * The description of the notification. Must be an formula.
     * @type {string}
     * @memberof NotificationWorkflowActionBuilderWorkflowAction
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface NotificationWorkflowActionCreateBuilderWorkflowAction
 */
export interface NotificationWorkflowActionCreateBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof NotificationWorkflowActionCreateBuilderWorkflowAction
     */
    'id': number;
    /**
     * The id of the element the workflow action is associated with
     * @type {number}
     * @memberof NotificationWorkflowActionCreateBuilderWorkflowAction
     */
    'element_id'?: number | null;
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof NotificationWorkflowActionCreateBuilderWorkflowAction
     */
    'type': Type051Enum;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof NotificationWorkflowActionCreateBuilderWorkflowAction
     */
    'event': string;
    /**
     * The title of the notification. Must be an formula.
     * @type {string}
     * @memberof NotificationWorkflowActionCreateBuilderWorkflowAction
     */
    'title'?: string;
    /**
     * The description of the notification. Must be an formula.
     * @type {string}
     * @memberof NotificationWorkflowActionCreateBuilderWorkflowAction
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface NotificationWorkflowActionUpdateBuilderWorkflowActions
 */
export interface NotificationWorkflowActionUpdateBuilderWorkflowActions {
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof NotificationWorkflowActionUpdateBuilderWorkflowActions
     */
    'type'?: Type051Enum;
    /**
     * The title of the notification. Must be an formula.
     * @type {string}
     * @memberof NotificationWorkflowActionUpdateBuilderWorkflowActions
     */
    'title'?: string;
    /**
     * The description of the notification. Must be an formula.
     * @type {string}
     * @memberof NotificationWorkflowActionUpdateBuilderWorkflowActions
     */
    'description'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const NullEnum: {
    readonly Null: "null";
};
export type NullEnum = typeof NullEnum[keyof typeof NullEnum];
/**
 * * `0` - 1 * `1` - 1.0 * `2` - 1.00 * `3` - 1.000 * `4` - 1.0000 * `5` - 1.00000 * `6` - 1.000000 * `7` - 1.0000000 * `8` - 1.00000000 * `9` - 1.000000000 * `10` - 1.0000000000
 * @export
 * @enum {string}
 */
export declare const NumberDecimalPlacesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
    readonly NUMBER_3: 3;
    readonly NUMBER_4: 4;
    readonly NUMBER_5: 5;
    readonly NUMBER_6: 6;
    readonly NUMBER_7: 7;
    readonly NUMBER_8: 8;
    readonly NUMBER_9: 9;
    readonly NUMBER_10: 10;
};
export type NumberDecimalPlacesEnum = typeof NumberDecimalPlacesEnum[keyof typeof NumberDecimalPlacesEnum];
/**
 *
 * @export
 * @interface NumberFieldCreateField
 */
export interface NumberFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof NumberFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof NumberFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof NumberFieldCreateField
     */
    'description'?: string | null;
    /**
     * The amount of digits allowed after the point.  * `0` - 1 * `1` - 1.0 * `2` - 1.00 * `3` - 1.000 * `4` - 1.0000 * `5` - 1.00000 * `6` - 1.000000 * `7` - 1.0000000 * `8` - 1.00000000 * `9` - 1.000000000 * `10` - 1.0000000000
     * @type {NumberDecimalPlacesEnum}
     * @memberof NumberFieldCreateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum;
    /**
     * Indicates if negative values are allowed.
     * @type {boolean}
     * @memberof NumberFieldCreateField
     */
    'number_negative'?: boolean;
}
/**
 *
 * @export
 * @interface NumberFieldField
 */
export interface NumberFieldField {
    /**
     *
     * @type {number}
     * @memberof NumberFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof NumberFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof NumberFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof NumberFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof NumberFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof NumberFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof NumberFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof NumberFieldField
     */
    'description'?: string | null;
    /**
     * The amount of digits allowed after the point.  * `0` - 1 * `1` - 1.0 * `2` - 1.00 * `3` - 1.000 * `4` - 1.0000 * `5` - 1.00000 * `6` - 1.000000 * `7` - 1.0000000 * `8` - 1.00000000 * `9` - 1.000000000 * `10` - 1.0000000000
     * @type {NumberDecimalPlacesEnum}
     * @memberof NumberFieldField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum;
    /**
     * Indicates if negative values are allowed.
     * @type {boolean}
     * @memberof NumberFieldField
     */
    'number_negative'?: boolean;
}
/**
 *
 * @export
 * @interface NumberFieldFieldSerializerWithRelatedFields
 */
export interface NumberFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     * The amount of digits allowed after the point.  * `0` - 1 * `1` - 1.0 * `2` - 1.00 * `3` - 1.000 * `4` - 1.0000 * `5` - 1.00000 * `6` - 1.000000 * `7` - 1.0000000 * `8` - 1.00000000 * `9` - 1.000000000 * `10` - 1.0000000000
     * @type {NumberDecimalPlacesEnum}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum;
    /**
     * Indicates if negative values are allowed.
     * @type {boolean}
     * @memberof NumberFieldFieldSerializerWithRelatedFields
     */
    'number_negative'?: boolean;
}
/**
 *
 * @export
 * @interface NumberFieldUpdateField
 */
export interface NumberFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof NumberFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof NumberFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof NumberFieldUpdateField
     */
    'description'?: string | null;
    /**
     * The amount of digits allowed after the point.  * `0` - 1 * `1` - 1.0 * `2` - 1.00 * `3` - 1.000 * `4` - 1.0000 * `5` - 1.00000 * `6` - 1.000000 * `7` - 1.0000000 * `8` - 1.00000000 * `9` - 1.000000000 * `10` - 1.0000000000
     * @type {NumberDecimalPlacesEnum}
     * @memberof NumberFieldUpdateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum;
    /**
     * Indicates if negative values are allowed.
     * @type {boolean}
     * @memberof NumberFieldUpdateField
     */
    'number_negative'?: boolean;
}
/**
 *
 * @export
 * @interface OllamaSettings
 */
export interface OllamaSettings {
    /**
     * The models that are enabled for this AI type.
     * @type {Array<string>}
     * @memberof OllamaSettings
     */
    'models'?: Array<string>;
    /**
     * The host that is used to authenticate with the Ollama API.
     * @type {string}
     * @memberof OllamaSettings
     */
    'host'?: string;
}
/**
 *
 * @export
 * @interface OpenAISettings
 */
export interface OpenAISettings {
    /**
     * The models that are enabled for this AI type.
     * @type {Array<string>}
     * @memberof OpenAISettings
     */
    'models'?: Array<string>;
    /**
     * The OpenAI API key that is used to authenticate with the OpenAI API.
     * @type {string}
     * @memberof OpenAISettings
     */
    'api_key'?: string;
    /**
     * The organization that the OpenAI API key belongs to.
     * @type {string}
     * @memberof OpenAISettings
     */
    'organization'?: string;
}
/**
 * Serializer for RoleAssignment used for the Open API spec
 * @export
 * @interface OpenApiRoleAssignment
 */
export interface OpenApiRoleAssignment {
    /**
     *
     * @type {number}
     * @memberof OpenApiRoleAssignment
     */
    'id': number;
    /**
     * The uid of the role assigned to the user or team in the given workspace.
     * @type {string}
     * @memberof OpenApiRoleAssignment
     */
    'role': string;
    /**
     * The structure of the subject field depends on the subject typereturned and will have additional fields accordingly
     * @type {OpenApiSubjectField}
     * @memberof OpenApiRoleAssignment
     */
    'subject': OpenApiSubjectField;
    /**
     * The subject ID.
     * @type {number}
     * @memberof OpenApiRoleAssignment
     */
    'subject_id': number;
    /**
     * The unique scope ID.
     * @type {number}
     * @memberof OpenApiRoleAssignment
     */
    'scope_id': number;
    /**
     * The subject type.  * `auth.User` - auth.User * `anonymous` - anonymous * `user_source.user` - user_source.user * `core.Token` - core.Token * `baserow_enterprise.Team` - baserow_enterprise.Team
     * @type {SubjectType398Enum}
     * @memberof OpenApiRoleAssignment
     */
    'subject_type': SubjectType398Enum;
    /**
     * The type of the scope object. The scope object limit the role assignment to this scope and all its descendants.  * `core` - core * `application` - application * `workspace` - workspace * `workspace_invitation` - workspace_invitation * `snapshot` - snapshot * `workspace_user` - workspace_user * `integration` - integration * `user_source` - user_source * `database` - database * `database_table` - database_table * `database_field` - database_field * `database_view` - database_view * `database_view_decoration` - database_view_decoration * `database_view_sort` - database_view_sort * `database_view_group` - database_view_group * `database_view_filter` - database_view_filter * `database_view_filter_group` - database_view_filter_group * `token` - token * `builder` - builder * `builder_page` - builder_page * `builder_element` - builder_element * `builder_domain` - builder_domain * `builder_data_source` - builder_data_source * `builder_workflow_action` - builder_workflow_action * `team` - team * `team_subject` - team_subject * `license` - license
     * @type {ScopeTypeEnum}
     * @memberof OpenApiRoleAssignment
     */
    'scope_type': ScopeTypeEnum;
}
/**
 *
 * @export
 * @interface OpenApiSubjectField
 */
export interface OpenApiSubjectField {
    /**
     *
     * @type {number}
     * @memberof OpenApiSubjectField
     */
    'id': number;
}
/**
 *
 * @export
 * @interface OpenIdConnectAuthProviderModelAuthProvider
 */
export interface OpenIdConnectAuthProviderModelAuthProvider {
    /**
     *
     * @type {number}
     * @memberof OpenIdConnectAuthProviderModelAuthProvider
     */
    'id': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof OpenIdConnectAuthProviderModelAuthProvider
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof OpenIdConnectAuthProviderModelAuthProvider
     */
    'domain'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof OpenIdConnectAuthProviderModelAuthProvider
     */
    'enabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof OpenIdConnectAuthProviderModelAuthProvider
     */
    'name': string;
    /**
     * Base URL of the authorization server
     * @type {string}
     * @memberof OpenIdConnectAuthProviderModelAuthProvider
     */
    'base_url': string;
    /**
     * App ID, or consumer key
     * @type {string}
     * @memberof OpenIdConnectAuthProviderModelAuthProvider
     */
    'client_id': string;
    /**
     * API secret, client secret, or consumer secret
     * @type {string}
     * @memberof OpenIdConnectAuthProviderModelAuthProvider
     */
    'secret': string;
}
/**
 * Basic builder workflow action serializer
 * @export
 * @interface OpenPageWorkflowActionBuilderWorkflowAction
 */
export interface OpenPageWorkflowActionBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'element_id': number | null;
    /**
     * The type of the workflow action
     * @type {string}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'type': string;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'event': string;
    /**
     * The navigation type.  * `page` - Page * `custom` - Custom
     * @type {NavigationTypeEnum}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'navigation_type'?: NavigationTypeEnum;
    /**
     * (\'Destination page id for this link. If null then we use the navigate_to_url property instead.\',)
     * @type {number}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'navigate_to_page_id'?: number | null;
    /**
     * If no page is selected, this indicate the destination of the link.
     * @type {string}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'navigate_to_url'?: string;
    /**
     * The parameters for each parameters of the selected page if any.
     * @type {Array<PageParameterValue>}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'page_parameters'?: Array<PageParameterValue>;
    /**
     * The target of the link when we click on it.  * `self` - Self * `blank` - Blank
     * @type {TargetEnum}
     * @memberof OpenPageWorkflowActionBuilderWorkflowAction
     */
    'target'?: TargetEnum;
}
/**
 *
 * @export
 * @interface OpenPageWorkflowActionCreateBuilderWorkflowAction
 */
export interface OpenPageWorkflowActionCreateBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof OpenPageWorkflowActionCreateBuilderWorkflowAction
     */
    'id': number;
    /**
     * The id of the element the workflow action is associated with
     * @type {number}
     * @memberof OpenPageWorkflowActionCreateBuilderWorkflowAction
     */
    'element_id'?: number | null;
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof OpenPageWorkflowActionCreateBuilderWorkflowAction
     */
    'type': Type051Enum;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof OpenPageWorkflowActionCreateBuilderWorkflowAction
     */
    'event': string;
    /**
     * The navigation type.  * `page` - Page * `custom` - Custom
     * @type {NavigationTypeEnum}
     * @memberof OpenPageWorkflowActionCreateBuilderWorkflowAction
     */
    'navigation_type'?: NavigationTypeEnum;
    /**
     * (\'Destination page id for this link. If null then we use the navigate_to_url property instead.\',)
     * @type {number}
     * @memberof OpenPageWorkflowActionCreateBuilderWorkflowAction
     */
    'navigate_to_page_id'?: number | null;
    /**
     * If no page is selected, this indicate the destination of the link.
     * @type {string}
     * @memberof OpenPageWorkflowActionCreateBuilderWorkflowAction
     */
    'navigate_to_url'?: string;
    /**
     * The parameters for each parameters of the selected page if any.
     * @type {Array<PageParameterValue>}
     * @memberof OpenPageWorkflowActionCreateBuilderWorkflowAction
     */
    'page_parameters'?: Array<PageParameterValue>;
    /**
     * The target of the link when we click on it.  * `self` - Self * `blank` - Blank
     * @type {TargetEnum}
     * @memberof OpenPageWorkflowActionCreateBuilderWorkflowAction
     */
    'target'?: TargetEnum;
}
/**
 *
 * @export
 * @interface OpenPageWorkflowActionUpdateBuilderWorkflowActions
 */
export interface OpenPageWorkflowActionUpdateBuilderWorkflowActions {
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof OpenPageWorkflowActionUpdateBuilderWorkflowActions
     */
    'type'?: Type051Enum;
    /**
     * The navigation type.  * `page` - Page * `custom` - Custom
     * @type {NavigationTypeEnum}
     * @memberof OpenPageWorkflowActionUpdateBuilderWorkflowActions
     */
    'navigation_type'?: NavigationTypeEnum;
    /**
     * (\'Destination page id for this link. If null then we use the navigate_to_url property instead.\',)
     * @type {number}
     * @memberof OpenPageWorkflowActionUpdateBuilderWorkflowActions
     */
    'navigate_to_page_id'?: number | null;
    /**
     * If no page is selected, this indicate the destination of the link.
     * @type {string}
     * @memberof OpenPageWorkflowActionUpdateBuilderWorkflowActions
     */
    'navigate_to_url'?: string;
    /**
     * The parameters for each parameters of the selected page if any.
     * @type {Array<PageParameterValue>}
     * @memberof OpenPageWorkflowActionUpdateBuilderWorkflowActions
     */
    'page_parameters'?: Array<PageParameterValue>;
    /**
     * The target of the link when we click on it.  * `self` - Self * `blank` - Blank
     * @type {TargetEnum}
     * @memberof OpenPageWorkflowActionUpdateBuilderWorkflowActions
     */
    'target'?: TargetEnum;
}
/**
 * * `manual` - Manual * `formulas` - Formulas
 * @export
 * @enum {string}
 */
export declare const OptionTypeEnum: {
    readonly Manual: "manual";
    readonly Formulas: "formulas";
};
export type OptionTypeEnum = typeof OptionTypeEnum[keyof typeof OptionTypeEnum];
/**
 *
 * @export
 * @interface OrderApplications
 */
export interface OrderApplications {
    /**
     * Application ids in the desired order.
     * @type {Array<number>}
     * @memberof OrderApplications
     */
    'application_ids': Array<number>;
}
/**
 *
 * @export
 * @interface OrderBuilderDomains400Response
 */
export interface OrderBuilderDomains400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof OrderBuilderDomains400Response
     */
    'error'?: OrderBuilderDomains400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof OrderBuilderDomains400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const OrderBuilderDomains400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly DomainNotInBuilder: "ERROR_DOMAIN_NOT_IN_BUILDER";
};
export type OrderBuilderDomains400ResponseErrorEnum = typeof OrderBuilderDomains400ResponseErrorEnum[keyof typeof OrderBuilderDomains400ResponseErrorEnum];
/**
 *
 * @export
 * @interface OrderBuilderDomains404Response
 */
export interface OrderBuilderDomains404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof OrderBuilderDomains404Response
     */
    'error'?: OrderBuilderDomains404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof OrderBuilderDomains404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const OrderBuilderDomains404ResponseErrorEnum: {
    readonly ApplicationDoesNotExist: "ERROR_APPLICATION_DOES_NOT_EXIST";
    readonly DomainDoesNotExist: "ERROR_DOMAIN_DOES_NOT_EXIST";
};
export type OrderBuilderDomains404ResponseErrorEnum = typeof OrderBuilderDomains404ResponseErrorEnum[keyof typeof OrderBuilderDomains404ResponseErrorEnum];
/**
 *
 * @export
 * @interface OrderBuilderPages400Response
 */
export interface OrderBuilderPages400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof OrderBuilderPages400Response
     */
    'error'?: OrderBuilderPages400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof OrderBuilderPages400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const OrderBuilderPages400ResponseErrorEnum: {
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly PageNotInBuilder: "ERROR_PAGE_NOT_IN_BUILDER";
};
export type OrderBuilderPages400ResponseErrorEnum = typeof OrderBuilderPages400ResponseErrorEnum[keyof typeof OrderBuilderPages400ResponseErrorEnum];
/**
 *
 * @export
 * @interface OrderBuilderPages404Response
 */
export interface OrderBuilderPages404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof OrderBuilderPages404Response
     */
    'error'?: OrderBuilderPages404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof OrderBuilderPages404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const OrderBuilderPages404ResponseErrorEnum: {
    readonly ApplicationDoesNotExist: "ERROR_APPLICATION_DOES_NOT_EXIST";
    readonly PageDoesNotExist: "ERROR_PAGE_DOES_NOT_EXIST";
};
export type OrderBuilderPages404ResponseErrorEnum = typeof OrderBuilderPages404ResponseErrorEnum[keyof typeof OrderBuilderPages404ResponseErrorEnum];
/**
 *
 * @export
 * @interface OrderBuilderWorkflowActions404Response
 */
export interface OrderBuilderWorkflowActions404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof OrderBuilderWorkflowActions404Response
     */
    'error'?: OrderBuilderWorkflowActions404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof OrderBuilderWorkflowActions404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const OrderBuilderWorkflowActions404ResponseErrorEnum: {
    readonly PageDoesNotExist: "ERROR_PAGE_DOES_NOT_EXIST";
    readonly WorkflowActionDoesNotExist: "ERROR_WORKFLOW_ACTION_DOES_NOT_EXIST";
    readonly WorkflowActionNotInElement: "ERROR_WORKFLOW_ACTION_NOT_IN_ELEMENT";
};
export type OrderBuilderWorkflowActions404ResponseErrorEnum = typeof OrderBuilderWorkflowActions404ResponseErrorEnum[keyof typeof OrderBuilderWorkflowActions404ResponseErrorEnum];
/**
 * * `ASC` - Ascending * `DESC` - Descending
 * @export
 * @enum {string}
 */
export declare const OrderByEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type OrderByEnum = typeof OrderByEnum[keyof typeof OrderByEnum];
/**
 *
 * @export
 * @interface OrderDatabaseTableViews400Response
 */
export interface OrderDatabaseTableViews400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof OrderDatabaseTableViews400Response
     */
    'error'?: OrderDatabaseTableViews400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof OrderDatabaseTableViews400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const OrderDatabaseTableViews400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly ViewNotInTable: "ERROR_VIEW_NOT_IN_TABLE";
};
export type OrderDatabaseTableViews400ResponseErrorEnum = typeof OrderDatabaseTableViews400ResponseErrorEnum[keyof typeof OrderDatabaseTableViews400ResponseErrorEnum];
/**
 *
 * @export
 * @interface OrderDatabaseTables400Response
 */
export interface OrderDatabaseTables400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof OrderDatabaseTables400Response
     */
    'error'?: OrderDatabaseTables400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof OrderDatabaseTables400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const OrderDatabaseTables400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly TableNotInDatabase: "ERROR_TABLE_NOT_IN_DATABASE";
};
export type OrderDatabaseTables400ResponseErrorEnum = typeof OrderDatabaseTables400ResponseErrorEnum[keyof typeof OrderDatabaseTables400ResponseErrorEnum];
/**
 *
 * @export
 * @interface OrderDomains
 */
export interface OrderDomains {
    /**
     * The ids of the domains in the order they are supposed to be set in
     * @type {Array<number>}
     * @memberof OrderDomains
     */
    'domain_ids': Array<number>;
}
/**
 * * `ASC` - Ascending * `DESC` - Descending
 * @export
 * @enum {string}
 */
export declare const OrderEnum: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type OrderEnum = typeof OrderEnum[keyof typeof OrderEnum];
/**
 *
 * @export
 * @interface OrderPages
 */
export interface OrderPages {
    /**
     * The ids of the pages in the order they are supposed to be set in
     * @type {Array<number>}
     * @memberof OrderPages
     */
    'page_ids': Array<number>;
}
/**
 *
 * @export
 * @interface OrderTables
 */
export interface OrderTables {
    /**
     * Table ids in the desired order.
     * @type {Array<number>}
     * @memberof OrderTables
     */
    'table_ids': Array<number>;
}
/**
 *
 * @export
 * @interface OrderViews
 */
export interface OrderViews {
    /**
     * View ids in the desired order.
     * @type {Array<number>}
     * @memberof OrderViews
     */
    'view_ids': Array<number>;
}
/**
 *
 * @export
 * @interface OrderWorkflowActions
 */
export interface OrderWorkflowActions {
    /**
     * The ids of the workflow actions in the order they are supposed to be set in
     * @type {Array<number>}
     * @memberof OrderWorkflowActions
     */
    'workflow_action_ids': Array<number>;
    /**
     * The element the workflow actions belong to
     * @type {number}
     * @memberof OrderWorkflowActions
     */
    'element_id'?: number;
}
/**
 *
 * @export
 * @interface OrderWorkspaces
 */
export interface OrderWorkspaces {
    /**
     * Workspace ids in the desired order.
     * @type {Array<number>}
     * @memberof OrderWorkspaces
     */
    'workspaces': Array<number>;
}
/**
 * * `vertical` - Vertical * `horizontal` - Horizontal
 * @export
 * @enum {string}
 */
export declare const OrientationEnum: {
    readonly Vertical: "vertical";
    readonly Horizontal: "horizontal";
};
export type OrientationEnum = typeof OrientationEnum[keyof typeof OrientationEnum];
/**
 * * `collaborative` - collaborative * `personal` - personal
 * @export
 * @enum {string}
 */
export declare const OwnershipTypeEnum: {
    readonly Collaborative: "collaborative";
    readonly Personal: "personal";
};
export type OwnershipTypeEnum = typeof OwnershipTypeEnum[keyof typeof OwnershipTypeEnum];
/**
 * 👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicPageSerializer when you update this one.
 * @export
 * @interface Page
 */
export interface Page {
    /**
     *
     * @type {number}
     * @memberof Page
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Page
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Page
     */
    'path': string;
    /**
     *
     * @type {Array<PathParam>}
     * @memberof Page
     */
    'path_params'?: Array<PathParam>;
    /**
     * Lowest first.
     * @type {number}
     * @memberof Page
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof Page
     */
    'builder_id': number;
}
/**
 * * `tile` - Tile * `fill` - Fill * `fit` - Fit
 * @export
 * @enum {string}
 */
export declare const PageBackgroundModeEnum: {
    readonly Tile: "tile";
    readonly Fill: "fill";
    readonly Fit: "fit";
};
export type PageBackgroundModeEnum = typeof PageBackgroundModeEnum[keyof typeof PageBackgroundModeEnum];
/**
 *
 * @export
 * @interface PageParameterValue
 */
export interface PageParameterValue {
    /**
     *
     * @type {string}
     * @memberof PageParameterValue
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PageParameterValue
     */
    'value': string;
}
/**
 *
 * @export
 * @interface PaginationSerializerAuditLog
 */
export interface PaginationSerializerAuditLog {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerAuditLog
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerAuditLog
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerAuditLog
     */
    'previous': string | null;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof PaginationSerializerAuditLog
     */
    'results': Array<AuditLog>;
}
/**
 *
 * @export
 * @interface PaginationSerializerAuditLogUser
 */
export interface PaginationSerializerAuditLogUser {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerAuditLogUser
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerAuditLogUser
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerAuditLogUser
     */
    'previous': string | null;
    /**
     *
     * @type {Array<AuditLogUser>}
     * @memberof PaginationSerializerAuditLogUser
     */
    'results': Array<AuditLogUser>;
}
/**
 *
 * @export
 * @interface PaginationSerializerAuditLogWorkspace
 */
export interface PaginationSerializerAuditLogWorkspace {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerAuditLogWorkspace
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerAuditLogWorkspace
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerAuditLogWorkspace
     */
    'previous': string | null;
    /**
     *
     * @type {Array<AuditLogWorkspace>}
     * @memberof PaginationSerializerAuditLogWorkspace
     */
    'results': Array<AuditLogWorkspace>;
}
/**
 *
 * @export
 * @interface PaginationSerializerExampleRowResponseSerializerWithUserFieldNames
 */
export interface PaginationSerializerExampleRowResponseSerializerWithUserFieldNames {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerExampleRowResponseSerializerWithUserFieldNames
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerExampleRowResponseSerializerWithUserFieldNames
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerExampleRowResponseSerializerWithUserFieldNames
     */
    'previous': string | null;
    /**
     *
     * @type {Array<ExampleRowResponseSerializerWithUserFieldNames>}
     * @memberof PaginationSerializerExampleRowResponseSerializerWithUserFieldNames
     */
    'results': Array<ExampleRowResponseSerializerWithUserFieldNames>;
}
/**
 *
 * @export
 * @interface PaginationSerializerLicenseUserLookup
 */
export interface PaginationSerializerLicenseUserLookup {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerLicenseUserLookup
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerLicenseUserLookup
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerLicenseUserLookup
     */
    'previous': string | null;
    /**
     *
     * @type {Array<LicenseUserLookup>}
     * @memberof PaginationSerializerLicenseUserLookup
     */
    'results': Array<LicenseUserLookup>;
}
/**
 *
 * @export
 * @interface PaginationSerializerLinkRowValue
 */
export interface PaginationSerializerLinkRowValue {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerLinkRowValue
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerLinkRowValue
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerLinkRowValue
     */
    'previous': string | null;
    /**
     *
     * @type {Array<LinkRowValue>}
     * @memberof PaginationSerializerLinkRowValue
     */
    'results': Array<LinkRowValue>;
}
/**
 *
 * @export
 * @interface PaginationSerializerNotificationRecipient
 */
export interface PaginationSerializerNotificationRecipient {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerNotificationRecipient
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerNotificationRecipient
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerNotificationRecipient
     */
    'previous': string | null;
    /**
     *
     * @type {Array<NotificationRecipient>}
     * @memberof PaginationSerializerNotificationRecipient
     */
    'results': Array<NotificationRecipient>;
}
/**
 *
 * @export
 * @interface PaginationSerializerRowComment
 */
export interface PaginationSerializerRowComment {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerRowComment
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerRowComment
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerRowComment
     */
    'previous': string | null;
    /**
     *
     * @type {Array<RowComment>}
     * @memberof PaginationSerializerRowComment
     */
    'results': Array<RowComment>;
}
/**
 *
 * @export
 * @interface PaginationSerializerRowHistory
 */
export interface PaginationSerializerRowHistory {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerRowHistory
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerRowHistory
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerRowHistory
     */
    'previous': string | null;
    /**
     *
     * @type {Array<RowHistory>}
     * @memberof PaginationSerializerRowHistory
     */
    'results': Array<RowHistory>;
}
/**
 *
 * @export
 * @interface PaginationSerializerTrashContents
 */
export interface PaginationSerializerTrashContents {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerTrashContents
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerTrashContents
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerTrashContents
     */
    'previous': string | null;
    /**
     *
     * @type {Array<TrashContents>}
     * @memberof PaginationSerializerTrashContents
     */
    'results': Array<TrashContents>;
}
/**
 *
 * @export
 * @interface PaginationSerializerUserAdminResponse
 */
export interface PaginationSerializerUserAdminResponse {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerUserAdminResponse
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerUserAdminResponse
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerUserAdminResponse
     */
    'previous': string | null;
    /**
     *
     * @type {Array<UserAdminResponse>}
     * @memberof PaginationSerializerUserAdminResponse
     */
    'results': Array<UserAdminResponse>;
}
/**
 *
 * @export
 * @interface PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
 */
export interface PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: GalleryViewFieldOptions; }}
     * @memberof PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'field_options'?: {
        [key: string]: GalleryViewFieldOptions;
    };
    /**
     * An object keyed by row id with a value being an object containing additional metadata about that row. A row might not have metadata and will not be present as a key if so.
     * @type {{ [key: string]: RowMetadata; }}
     * @memberof PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'row_metadata'?: {
        [key: string]: RowMetadata;
    };
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'previous': string | null;
    /**
     *
     * @type {Array<ExampleRowResponse>}
     * @memberof PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'results': Array<ExampleRowResponse>;
}
/**
 *
 * @export
 * @interface PaginationSerializerWithGridViewFieldOptionsExampleRowResponse
 */
export interface PaginationSerializerWithGridViewFieldOptionsExampleRowResponse {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: GridViewFieldOptions; }}
     * @memberof PaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'field_options'?: {
        [key: string]: GridViewFieldOptions;
    };
    /**
     * An object keyed by row id with a value being an object containing additional metadata about that row. A row might not have metadata and will not be present as a key if so.
     * @type {{ [key: string]: RowMetadata; }}
     * @memberof PaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'row_metadata'?: {
        [key: string]: RowMetadata;
    };
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'previous': string | null;
    /**
     *
     * @type {Array<ExampleRowResponse>}
     * @memberof PaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'results': Array<ExampleRowResponse>;
}
/**
 *
 * @export
 * @interface PaginationSerializerWorkspacesAdminResponse
 */
export interface PaginationSerializerWorkspacesAdminResponse {
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PaginationSerializerWorkspacesAdminResponse
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PaginationSerializerWorkspacesAdminResponse
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PaginationSerializerWorkspacesAdminResponse
     */
    'previous': string | null;
    /**
     *
     * @type {Array<WorkspacesAdminResponse>}
     * @memberof PaginationSerializerWorkspacesAdminResponse
     */
    'results': Array<WorkspacesAdminResponse>;
}
/**
 *
 * @export
 * @interface PasswordAuthProviderModelAuthProvider
 */
export interface PasswordAuthProviderModelAuthProvider {
    /**
     *
     * @type {number}
     * @memberof PasswordAuthProviderModelAuthProvider
     */
    'id': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof PasswordAuthProviderModelAuthProvider
     */
    'type': string;
    /**
     * The email domain (if any) registered with this password provider.
     * @type {string}
     * @memberof PasswordAuthProviderModelAuthProvider
     */
    'domain'?: string;
    /**
     * Whether the provider is enabled or not.
     * @type {boolean}
     * @memberof PasswordAuthProviderModelAuthProvider
     */
    'enabled'?: boolean;
}
/**
 *
 * @export
 * @interface PasswordFieldCreateField
 */
export interface PasswordFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof PasswordFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof PasswordFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof PasswordFieldCreateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface PasswordFieldField
 */
export interface PasswordFieldField {
    /**
     *
     * @type {number}
     * @memberof PasswordFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof PasswordFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof PasswordFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof PasswordFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof PasswordFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof PasswordFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof PasswordFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof PasswordFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface PasswordFieldFieldSerializerWithRelatedFields
 */
export interface PasswordFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof PasswordFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof PasswordFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof PasswordFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof PasswordFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof PasswordFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof PasswordFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof PasswordFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof PasswordFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof PasswordFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface PasswordFieldUpdateField
 */
export interface PasswordFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof PasswordFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof PasswordFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof PasswordFieldUpdateField
     */
    'description'?: string | null;
}
/**
 * This serializer must be kept in sync with `UserSerializer`.
 * @export
 * @interface PatchedAccount
 */
export interface PatchedAccount {
    /**
     *
     * @type {string}
     * @memberof PatchedAccount
     */
    'first_name'?: string;
    /**
     * An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @type {string}
     * @memberof PatchedAccount
     */
    'language'?: string;
    /**
     * The maximum frequency at which the user wants to receive email notifications.  * `instant` - instant * `daily` - daily * `weekly` - weekly * `never` - never
     * @type {EmailNotificationFrequencyEnum}
     * @memberof PatchedAccount
     */
    'email_notification_frequency'?: EmailNotificationFrequencyEnum;
    /**
     * Indicates whether the user has completed the onboarding.
     * @type {boolean}
     * @memberof PatchedAccount
     */
    'completed_onboarding'?: boolean;
}
/**
 * @type PatchedApplicationBaseApplicationUpdatePolymorphic
 * @export
 */
export type PatchedApplicationBaseApplicationUpdatePolymorphic = {
    type: 'builder';
} & BuilderBaseApplicationUpdatePolymorphic | {
    type: 'database';
} & DatabaseBaseApplicationUpdatePolymorphic;
/**
 *
 * @export
 * @interface PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
 */
export interface PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions {
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'type'?: Type051Enum;
    /**
     * The title of the notification. Must be an formula.
     * @type {string}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'title'?: string;
    /**
     * The description of the notification. Must be an formula.
     * @type {string}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'description'?: string;
    /**
     * The navigation type.  * `page` - Page * `custom` - Custom
     * @type {NavigationTypeEnum}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'navigation_type'?: NavigationTypeEnum;
    /**
     * (\'Destination page id for this link. If null then we use the navigate_to_url property instead.\',)
     * @type {number}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'navigate_to_page_id'?: number | null;
    /**
     * If no page is selected, this indicate the destination of the link.
     * @type {string}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'navigate_to_url'?: string;
    /**
     * The parameters for each parameters of the selected page if any.
     * @type {Array<PageParameterValue>}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'page_parameters'?: Array<PageParameterValue>;
    /**
     * The target of the link when we click on it.  * `self` - Self * `blank` - Blank
     * @type {TargetEnum}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'target'?: TargetEnum;
    /**
     * The service which this workflow action is associated with.
     * @type {IntegrationService}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'service'?: IntegrationService;
    /**
     * The ID of the Data Source to be refreshed.
     * @type {number}
     * @memberof PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions
     */
    'data_source_id'?: number | null;
}
/**
 *
 * @export
 * @interface PatchedCombinedThemeConfigBlocks
 */
export interface PatchedCombinedThemeConfigBlocks {
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'primary_color'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'secondary_color'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'border_color'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'main_success_color'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'main_warning_color'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'main_error_color'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'body_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'body_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'body_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'body_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_1_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_1_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_1_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_1_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_2_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_2_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_2_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_2_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_3_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_3_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_3_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_3_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_4_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_4_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_4_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_4_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_5_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_5_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_5_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_5_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_6_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_6_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_6_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'heading_6_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_font_size'?: number;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {ButtonWidthEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_width'?: ButtonWidthEnum;
    /**
     * The background color of buttons
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_background_color'?: string;
    /**
     * The text color of buttons
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_text_color'?: string;
    /**
     * The border color of buttons
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_border_color'?: string;
    /**
     * Button border size
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_border_size'?: number;
    /**
     * Button border radius
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_border_radius'?: number;
    /**
     * Button vertical padding
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_vertical_padding'?: number;
    /**
     * Button horizontal padding
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_horizontal_padding'?: number;
    /**
     * The background color of buttons when hovered
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_hover_background_color'?: string;
    /**
     * The text color of buttons when hovered
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_hover_text_color'?: string;
    /**
     * The border color of buttons when hovered
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'button_hover_border_color'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'link_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'link_font_size'?: number;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'link_text_alignment'?: TableCellAlignmentEnum;
    /**
     * The text color of links
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'link_text_color'?: string;
    /**
     * The hover color of links when hovered
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'link_hover_text_color'?: string;
    /**
     * The image max height
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'image_max_height'?: number;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'image_alignment'?: TableCellAlignmentEnum;
    /**
     * The max-width for this image element.
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'image_max_width'?: number;
    /**
     * The image constraint to apply to this image  * `cover` - Cover * `contain` - Contain * `full-width` - Full Width
     * @type {ImageConstraintEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'image_constraint'?: ImageConstraintEnum;
    /**
     * The image file
     * @type {UserFile}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'page_background_file'?: UserFile | null;
    /**
     * The background color of the page
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'page_background_color'?: string;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {PageBackgroundModeEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'page_background_mode'?: PageBackgroundModeEnum;
    /**
     * The font family of the label
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'label_font_family'?: string;
    /**
     * The text color of the label
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'label_text_color'?: string;
    /**
     * The font size of the label
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'label_font_size'?: number;
    /**
     * The font family of the input
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'input_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'input_font_size'?: number;
    /**
     * The text color of the input
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'input_text_color'?: string;
    /**
     * The background color of the input
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'input_background_color'?: string;
    /**
     * The color of the input border
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'input_border_color'?: string;
    /**
     * Input border size
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'input_border_size'?: number;
    /**
     * Input border radius
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'input_border_radius'?: number;
    /**
     * Input vertical padding
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'input_vertical_padding'?: number;
    /**
     * Input horizontal padding
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'input_horizontal_padding'?: number;
    /**
     * The color of the table border
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_border_color'?: string;
    /**
     * Table border size
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_border_size'?: number;
    /**
     * Table border radius
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_border_radius'?: number;
    /**
     * The background color of the table header cells
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_header_background_color'?: string;
    /**
     * The text color of the table header cells
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_header_text_color'?: string;
    /**
     * The font size of the header cells
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_header_font_size'?: number;
    /**
     * The font family of the table header cells
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_header_font_family'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_header_text_alignment'?: TableCellAlignmentEnum;
    /**
     * The background color of the table cells
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_cell_background_color'?: string;
    /**
     * The alternate background color of the table cells
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_cell_alternate_background_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_cell_alignment'?: TableCellAlignmentEnum;
    /**
     * Table cell vertical padding
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_cell_vertical_padding'?: number;
    /**
     * Table cell horizontal padding
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_cell_horizontal_padding'?: number;
    /**
     * The color of the table vertical separator
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_vertical_separator_color'?: string;
    /**
     * Table vertical separator size
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_vertical_separator_size'?: number;
    /**
     * The color of the table horizontal separator
     * @type {string}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_horizontal_separator_color'?: string;
    /**
     * Table horizontal separator size
     * @type {number}
     * @memberof PatchedCombinedThemeConfigBlocks
     */
    'table_horizontal_separator_size'?: number;
}
/**
 * @type PatchedDecoratorValueProviderTypeUpdateViewDecoration
 * @export
 */
export type PatchedDecoratorValueProviderTypeUpdateViewDecoration = {
    value_provider_type: 'conditional_color';
} & GeneratedConditionalColorUpdateViewDecoration | {
    value_provider_type: 'single_select_color';
} & GeneratedSingleSelectColorUpdateViewDecoration;
/**
 *
 * @export
 * @interface PatchedElementTypeUpdateElement
 */
export interface PatchedElementTypeUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonInputConfigBlock}
     * @memberof PatchedElementTypeUpdateElement
     */
    'styles'?: ButtonInputConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof PatchedElementTypeUpdateElement
     */
    'roles'?: any;
    /**
     * The caption of the button.
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'value'?: string;
    /**
     * The level of the heading from 1 to 6.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'level'?: number;
    /**
     * The format of the text  * `plain` - Plain * `markdown` - Markdown
     * @type {FormatEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'format'?: FormatEnum;
    /**
     * The navigation type.  * `page` - Page * `custom` - Custom
     * @type {NavigationTypeEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'navigation_type'?: NavigationTypeEnum;
    /**
     * (\'Destination page id for this link. If null then we use the navigate_to_url property instead.\',)
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'navigate_to_page_id'?: number | null;
    /**
     * If no page is selected, this indicate the destination of the link.
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'navigate_to_url'?: string;
    /**
     * The parameters for each parameters of the selected page if any.
     * @type {Array<PageParameterValue>}
     * @memberof PatchedElementTypeUpdateElement
     */
    'page_parameters'?: Array<PageParameterValue>;
    /**
     * The target of the link when we click on it.  * `self` - Self * `blank` - Blank
     * @type {TargetEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'target'?: TargetEnum;
    /**
     * The variant of the link.  * `link` - Link * `button` - Button
     * @type {VariantEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'variant'?: VariantEnum;
    /**
     *
     * @type {ImageSourceTypeEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'image_source_type'?: ImageSourceTypeEnum;
    /**
     * The image file
     * @type {UserFile}
     * @memberof PatchedElementTypeUpdateElement
     */
    'image_file'?: UserFile | null;
    /**
     * A link to the image file
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'image_url'?: string;
    /**
     * Text that is displayed when the image can\'t load
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'alt_text'?: string;
    /**
     * The text label for this input
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'label'?: string;
    /**
     * The input\'s default value.
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'default_value'?: string;
    /**
     * Whether this form element is a required field.
     * @type {boolean}
     * @memberof PatchedElementTypeUpdateElement
     */
    'required'?: boolean;
    /**
     * Optionally set the validation type to use when applying form data.  * `any` - Any * `email` - Email * `integer` - Integer
     * @type {ValidationTypeEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'validation_type'?: ValidationTypeEnum;
    /**
     * The placeholder text which should be applied to the element.
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'placeholder'?: string;
    /**
     * Whether this text input is multiline.
     * @type {boolean}
     * @memberof PatchedElementTypeUpdateElement
     */
    'is_multiline'?: boolean;
    /**
     * Number of rows displayed by the rendered input element
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'rows'?: number;
    /**
     * The type of the input, not applicable for multiline inputs.  * `text` - Text * `password` - Password
     * @type {InputTypeEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'input_type'?: InputTypeEnum;
    /**
     * The amount of columns inside this column element.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'column_amount'?: number;
    /**
     * The amount of space between the columns.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'column_gap'?: number;
    /**
     *
     * @type {AlignmentEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'alignment'?: AlignmentEnum;
    /**
     * The data source we want to show in the element for. Only data_sources that return list are allowed.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'data_source_id'?: number | null;
    /**
     * The amount item loaded with each page.
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'items_per_page'?: number;
    /**
     * The label of the show more button
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'button_load_more_label'?: string;
    /**
     *
     * @type {Array<CollectionField>}
     * @memberof PatchedElementTypeUpdateElement
     */
    'fields'?: Array<CollectionField>;
    /**
     *
     * @type {OrientationEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'orientation'?: OrientationEnum;
    /**
     * The amount repetitions per row, per device type. Only applicable when the orientation is horizontal.
     * @type {any}
     * @memberof PatchedElementTypeUpdateElement
     */
    'items_per_row'?: any;
    /**
     *
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'submit_button_label'?: string;
    /**
     * Whether to reset the form to using its initial values after a successful form submission.
     * @type {boolean}
     * @memberof PatchedElementTypeUpdateElement
     */
    'reset_initial_values_post_submission'?: boolean;
    /**
     *
     * @type {Array<ChoiceOption>}
     * @memberof PatchedElementTypeUpdateElement
     */
    'options'?: Array<ChoiceOption>;
    /**
     * Whether this choice allows users to choose multiple values.
     * @type {boolean}
     * @memberof PatchedElementTypeUpdateElement
     */
    'multiple'?: boolean;
    /**
     * Whether to show the choices as a dropdown.
     * @type {boolean}
     * @memberof PatchedElementTypeUpdateElement
     */
    'show_as_dropdown'?: boolean;
    /**
     *
     * @type {OptionTypeEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'option_type'?: OptionTypeEnum;
    /**
     * The value of the option if it is a formula
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'formula_value'?: string;
    /**
     * The display name of the option if it is a formula
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'formula_name'?: string;
    /**
     *
     * @type {SourceTypeEnum}
     * @memberof PatchedElementTypeUpdateElement
     */
    'source_type'?: SourceTypeEnum;
    /**
     * A link to the page to embed
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'url'?: string;
    /**
     * Inline HTML to embed
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'embed'?: string;
    /**
     * Height in pixels of the iframe
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'height'?: number;
    /**
     * Display the auth form for the selected user source
     * @type {number}
     * @memberof PatchedElementTypeUpdateElement
     */
    'user_source_id'?: number | null;
    /**
     * The label of the login button
     * @type {string}
     * @memberof PatchedElementTypeUpdateElement
     */
    'login_button_label'?: string;
}
/**
 *
 * @export
 * @interface PatchedExampleBatchUpdateRowsRequest
 */
export interface PatchedExampleBatchUpdateRowsRequest {
    /**
     *
     * @type {Array<ExampleBatchUpdateRowRequestSerializerWithUserFieldNames>}
     * @memberof PatchedExampleBatchUpdateRowsRequest
     */
    'items'?: Array<ExampleBatchUpdateRowRequestSerializerWithUserFieldNames>;
}
/**
 *
 * @export
 * @interface PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
 */
export interface PatchedExampleUpdateRowRequestSerializerWithUserFieldNames {
    /**
     * This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_1'?: string | null;
    /**
     * This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_2'?: string | null;
    /**
     * This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_3'?: string | null;
    /**
     * This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_4'?: string | null;
    /**
     * This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_5'?: string | null;
    /**
     * This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {number}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_6'?: number;
    /**
     * This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {boolean}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_7'?: boolean;
    /**
     * This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_8'?: string | null;
    /**
     * This field represents the `duration` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. The provided value can be a string in one of the available formats or a number representing the duration in seconds. In any case, the value will be rounded to match the field\'s duration format.
     * @type {number}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_13'?: number | null;
    /**
     * This field represents the `link_row` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `array` containing the ids or the names of the related rows. A name is the value of the primary key of the related row. This field also accepts a string with names separated by a comma or an array of row names. You can also provide a unique row Id.The response contains a list of objects containing the `id` and the primary field\'s `value` as a string for display purposes.
     * @type {Array<any>}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_14'?: Array<any>;
    /**
     * This field represents the `file` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.
     * @type {Array<any>}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_15'?: Array<any> | null;
    /**
     * This field represents the `single_select` field. The number in field_16 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.
     * @type {number}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_16'?: number | null;
    /**
     * This field represents the `multiple_select` field. The number in field_17 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. You can also send a list of option names in which case the option are searched by name. The first one that matches is used. This field also accepts a string with names separated by a comma or an array of file names. The response represents chosen field, but also the value and color is exposed.
     * @type {Array<number | null>}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_17'?: Array<number | null>;
    /**
     * This field represents the `phone_number` field. The number in field_18 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field.
     * @type {string}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_18'?: string | null;
    /**
     * This field represents the `multiple_collaborators` field. The number in field_23 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. This field accepts a list of objects representing the chosen collaborators through the object\'s `id` property. The id is Baserow user id. The response objects also contains the collaborator name directly along with its id.
     * @type {Array<Collaborator>}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_23'?: Array<Collaborator>;
    /**
     * This field represents the `password` field. The number in field_26 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Allows setting a write only password value. Providing a string will set the password, `null` will unset it, `true` will be ignored. The response will respond with `true` is a password is set, but will never expose the password itself.
     * @type {string}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_26'?: string | null;
    /**
     * This field represents the `ai` field. The number in field_27 is in a normal request or response the id of the field. If the GET parameter user_field_names is provided and its value is one of the following: `y`, `yes`, `true`, `t`, `on`, `1`, or empty, then the key will instead be the actual name of the field. Holds a text value that is generated by a generative AI model using a dynamic prompt.
     * @type {string}
     * @memberof PatchedExampleUpdateRowRequestSerializerWithUserFieldNames
     */
    'field_27'?: string | null;
}
/**
 * @type PatchedFieldUpdateField
 * @export
 */
export type PatchedFieldUpdateField = {
    type: 'ai';
} & AIFieldUpdateField | {
    type: 'autonumber';
} & AutonumberFieldUpdateField | {
    type: 'boolean';
} & BooleanFieldUpdateField | {
    type: 'count';
} & CountFieldUpdateField | {
    type: 'created_by';
} & CreatedByFieldUpdateField | {
    type: 'created_on';
} & CreatedOnFieldUpdateField | {
    type: 'date';
} & DateFieldUpdateField | {
    type: 'duration';
} & DurationFieldUpdateField | {
    type: 'email';
} & EmailFieldUpdateField | {
    type: 'file';
} & FileFieldUpdateField | {
    type: 'formula';
} & FormulaFieldUpdateField | {
    type: 'last_modified';
} & LastModifiedFieldUpdateField | {
    type: 'last_modified_by';
} & LastModifiedByFieldUpdateField | {
    type: 'link_row';
} & LinkRowFieldUpdateField | {
    type: 'long_text';
} & LongTextFieldUpdateField | {
    type: 'lookup';
} & LookupFieldUpdateField | {
    type: 'multiple_collaborators';
} & MultipleCollaboratorsFieldUpdateField | {
    type: 'multiple_select';
} & MultipleSelectFieldUpdateField | {
    type: 'number';
} & NumberFieldUpdateField | {
    type: 'password';
} & PasswordFieldUpdateField | {
    type: 'phone_number';
} & PhoneNumberFieldUpdateField | {
    type: 'rating';
} & RatingFieldUpdateField | {
    type: 'rollup';
} & RollupFieldUpdateField | {
    type: 'single_select';
} & SingleSelectFieldUpdateField | {
    type: 'text';
} & TextFieldUpdateField | {
    type: 'url';
} & URLFieldUpdateField | {
    type: 'uuid';
} & UUIDFieldUpdateField;
/**
 *
 * @export
 * @interface PatchedGenerativeAISettings
 */
export interface PatchedGenerativeAISettings {
    /**
     *
     * @type {OpenAISettings}
     * @memberof PatchedGenerativeAISettings
     */
    'openai'?: OpenAISettings;
    /**
     *
     * @type {OllamaSettings}
     * @memberof PatchedGenerativeAISettings
     */
    'ollama'?: OllamaSettings;
}
/**
 *
 * @export
 * @interface PatchedIntegrationServiceUpdateDataSource
 */
export interface PatchedIntegrationServiceUpdateDataSource {
    /**
     * The id of the Baserow integration we want the data for.
     * @type {number}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'integration_id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'name'?: string;
    /**
     * The id of the Baserow table we want the data for.
     * @type {number}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'table_id'?: number | null;
    /**
     * The id of the Baserow view we want the data for.
     * @type {number}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'view_id'?: number | null;
    /**
     *
     * @type {Array<LocalBaserowTableServiceFilter>}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'filters'?: Array<LocalBaserowTableServiceFilter>;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The query to apply to the service to narrow the results down.
     * @type {string}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'search_query'?: string;
    /**
     * A formula for defining the intended row.
     * @type {string}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'row_id'?: string;
    /**
     *
     * @type {Array<LocalBaserowTableServiceSort>}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'sortings'?: Array<LocalBaserowTableServiceSort>;
    /**
     * The field mapping associated with this service.
     * @type {Array<LocalBaserowTableServiceFieldMapping>}
     * @memberof PatchedIntegrationServiceUpdateDataSource
     */
    'field_mappings'?: Array<LocalBaserowTableServiceFieldMapping>;
}
/**
 *
 * @export
 * @interface PatchedMoveDataSource
 */
export interface PatchedMoveDataSource {
    /**
     * If provided, the data_source is moved before the data_source with this Id. Otherwise the data_source is placed  last for this page.
     * @type {number}
     * @memberof PatchedMoveDataSource
     */
    'before_id'?: number | null;
}
/**
 *
 * @export
 * @interface PatchedMoveElement
 */
export interface PatchedMoveElement {
    /**
     * If provided, the element is moved before the element with this Id. Otherwise the element is placed at the end of the page.
     * @type {number}
     * @memberof PatchedMoveElement
     */
    'before_id'?: number | null;
    /**
     * If provided, the element is moved as a child of the element with the given id.
     * @type {number}
     * @memberof PatchedMoveElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof PatchedMoveElement
     */
    'place_in_container'?: string | null;
}
/**
 *
 * @export
 * @interface PatchedMoveIntegration
 */
export interface PatchedMoveIntegration {
    /**
     * If provided, the integration is moved before the integration with this Id. Otherwise the integration is placed at the end of the page.
     * @type {number}
     * @memberof PatchedMoveIntegration
     */
    'before_id'?: number | null;
}
/**
 * Serializer used when moving a user source.
 * @export
 * @interface PatchedMoveUserSource
 */
export interface PatchedMoveUserSource {
    /**
     * If provided, the user_source is moved before the user_source with this Id. Otherwise the user_source is placed at the end of the page.
     * @type {number}
     * @memberof PatchedMoveUserSource
     */
    'before_id'?: number | null;
}
/**
 *
 * @export
 * @interface PatchedSettings
 */
export interface PatchedSettings {
    /**
     * Indicates whether new users can create a new account when signing up.
     * @type {boolean}
     * @memberof PatchedSettings
     */
    'allow_new_signups'?: boolean;
    /**
     * Indicates whether invited users can create an account when signing up, even if allow_new_signups is disabled.
     * @type {boolean}
     * @memberof PatchedSettings
     */
    'allow_signups_via_workspace_invitations'?: boolean;
    /**
     * DEPRECATED: Please use the functionally identical `allow_signups_via_workspace_invitations` instead as this attribute is being removed in the future.
     * @type {boolean}
     * @memberof PatchedSettings
     */
    'allow_signups_via_group_invitations'?: boolean;
    /**
     * Indicates whether users can request a password reset link.
     * @type {boolean}
     * @memberof PatchedSettings
     */
    'allow_reset_password'?: boolean;
    /**
     * Indicates whether all users can create workspaces, or just staff.
     * @type {boolean}
     * @memberof PatchedSettings
     */
    'allow_global_workspace_creation'?: boolean;
    /**
     * DEPRECATED: Please use the functionally identical `allow_global_workspace_creation` instead as this attribute is being removed in the future.
     * @type {boolean}
     * @memberof PatchedSettings
     */
    'allow_global_group_creation'?: boolean;
    /**
     * Number of days after the last login for an account pending deletion to be deleted
     * @type {number}
     * @memberof PatchedSettings
     */
    'account_deletion_grace_delay'?: number;
    /**
     * Indicates that there are no admin users in the database yet, so in the frontend the signup form will be shown instead of the login page.
     * @type {boolean}
     * @memberof PatchedSettings
     */
    'show_admin_signup_page'?: boolean;
    /**
     * Runs a job once per day which calculates per workspace row counts and file storage usage, displayed on the admin workspace page.
     * @type {boolean}
     * @memberof PatchedSettings
     */
    'track_workspace_usage'?: boolean;
    /**
     * Indicates whether the `We need your help!` message will be shown on the dashboard
     * @type {boolean}
     * @memberof PatchedSettings
     */
    'show_baserow_help_request'?: boolean;
    /**
     * Co-branding logo that\'s placed next to the Baserow logo (176x29).
     * @type {UserFile}
     * @memberof PatchedSettings
     */
    'co_branding_logo'?: UserFile | null;
    /**
     *
     * @type {EmailVerificationEnum}
     * @memberof PatchedSettings
     */
    'email_verification'?: EmailVerificationEnum | null;
}
/**
 *
 * @export
 * @interface PatchedTableUpdate
 */
export interface PatchedTableUpdate {
    /**
     *
     * @type {string}
     * @memberof PatchedTableUpdate
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface PatchedTableWebhookUpdateRequest
 */
export interface PatchedTableWebhookUpdateRequest {
    /**
     * The URL that must be called when the webhook is triggered.
     * @type {string}
     * @memberof PatchedTableWebhookUpdateRequest
     */
    'url'?: string;
    /**
     * Indicates whether this webhook should listen to all events.
     * @type {boolean}
     * @memberof PatchedTableWebhookUpdateRequest
     */
    'include_all_events'?: boolean;
    /**
     * A list containing the events that will trigger this webhook.
     * @type {Array<EventTypesEnum>}
     * @memberof PatchedTableWebhookUpdateRequest
     */
    'events'?: Array<EventTypesEnum>;
    /**
     * The request method that be used when the event occurs.  * `POST` - Post * `GET` - Get * `PUT` - Put * `PATCH` - Patch * `DELETE` - Delete
     * @type {RequestMethodEnum}
     * @memberof PatchedTableWebhookUpdateRequest
     */
    'request_method'?: RequestMethodEnum;
    /**
     * The additional headers as an object where the key is the name and the value the value.
     * @type {{ [key: string]: any; }}
     * @memberof PatchedTableWebhookUpdateRequest
     */
    'headers'?: {
        [key: string]: any;
    };
    /**
     * An internal name of the webhook.
     * @type {string}
     * @memberof PatchedTableWebhookUpdateRequest
     */
    'name'?: string;
    /**
     * Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated.
     * @type {boolean}
     * @memberof PatchedTableWebhookUpdateRequest
     */
    'active'?: boolean;
    /**
     * Indicates whether the field names must be used as payload key instead of the id.
     * @type {boolean}
     * @memberof PatchedTableWebhookUpdateRequest
     */
    'use_user_field_names'?: boolean;
}
/**
 *
 * @export
 * @interface PatchedTokenUpdate
 */
export interface PatchedTokenUpdate {
    /**
     * The human readable name of the database token for the user.
     * @type {string}
     * @memberof PatchedTokenUpdate
     */
    'name'?: string;
    /**
     *
     * @type {PatchedTokenUpdatePermissions}
     * @memberof PatchedTokenUpdate
     */
    'permissions'?: PatchedTokenUpdatePermissions;
    /**
     * Indicates if a new key must be generated.
     * @type {boolean}
     * @memberof PatchedTokenUpdate
     */
    'rotate_key'?: boolean;
}
/**
 * Indicates per operation which permissions the database token has within the whole workspace. If the value of for example `create` is `true`, then the token can create rows in all tables related to the workspace. If a list is provided with for example `[[\"table\", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[[\'database\', 1]]` means create permissions for all tables in the database with id 1.  Example: ```json {   \"create\": true// Allows creating rows in all tables.   // Allows reading rows from database 1 and table 10.   \"read\": [[\"database\", 1], [\"table\", 10]],   \"update\": false  // Denies updating rows in all tables.   \"delete\": []  // Denies deleting rows in all tables.  } ```
 * @export
 * @interface PatchedTokenUpdatePermissions
 */
export interface PatchedTokenUpdatePermissions {
    /**
     *
     * @type {PatchedTokenUpdatePermissionsCreate}
     * @memberof PatchedTokenUpdatePermissions
     */
    'create'?: PatchedTokenUpdatePermissionsCreate;
    /**
     *
     * @type {PatchedTokenUpdatePermissionsCreate}
     * @memberof PatchedTokenUpdatePermissions
     */
    'read'?: PatchedTokenUpdatePermissionsCreate;
    /**
     *
     * @type {PatchedTokenUpdatePermissionsCreate}
     * @memberof PatchedTokenUpdatePermissions
     */
    'update'?: PatchedTokenUpdatePermissionsCreate;
    /**
     *
     * @type {PatchedTokenUpdatePermissionsCreate}
     * @memberof PatchedTokenUpdatePermissions
     */
    'delete'?: PatchedTokenUpdatePermissionsCreate;
}
/**
 *
 * @export
 * @interface PatchedTokenUpdatePermissionsCreate
 */
export interface PatchedTokenUpdatePermissionsCreate {
}
/**
 *
 * @export
 * @interface PatchedTokenUpdatePermissionsCreateAnyOfInnerInner
 */
export interface PatchedTokenUpdatePermissionsCreateAnyOfInnerInner {
}
/**
 * Mixin to a DRF serializer class to raise an exception if data with unknown fields is provided to the serializer.
 * @export
 * @interface PatchedTrashEntryRequest
 */
export interface PatchedTrashEntryRequest {
    /**
     *
     * @type {number}
     * @memberof PatchedTrashEntryRequest
     */
    'trash_item_id'?: number;
    /**
     *
     * @type {number}
     * @memberof PatchedTrashEntryRequest
     */
    'parent_trash_item_id'?: number | null;
    /**
     *
     * @type {TrashItemTypeEnum}
     * @memberof PatchedTrashEntryRequest
     */
    'trash_item_type'?: TrashItemTypeEnum;
}
/**
 *
 * @export
 * @interface PatchedUndoRedoRequest
 */
export interface PatchedUndoRedoRequest {
    /**
     * A JSON object with keys and values representing the various action scopes to include when undoing or redoing. Every action in Baserow will be associated with a action scope, when undoing/redoing only actions which match any of the provided scope key:value pairs will included when this endpoint picks the next action to undo/redo. If no scopes are provided then all actions performed in the client session will be included when undoing/redoing.
     * @type {ActionScopes}
     * @memberof PatchedUndoRedoRequest
     */
    'scopes'?: ActionScopes;
}
/**
 *
 * @export
 * @interface PatchedUpdateDomain
 */
export interface PatchedUpdateDomain {
    /**
     * The type of the domain.  * `custom` - custom * `sub_domain` - sub_domain
     * @type {Type509Enum}
     * @memberof PatchedUpdateDomain
     */
    'type'?: Type509Enum;
    /**
     *
     * @type {string}
     * @memberof PatchedUpdateDomain
     */
    'domain_name'?: string;
}
/**
 *
 * @export
 * @interface PatchedUpdatePage
 */
export interface PatchedUpdatePage {
    /**
     *
     * @type {string}
     * @memberof PatchedUpdatePage
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedUpdatePage
     */
    'path'?: string;
    /**
     *
     * @type {Array<PathParam>}
     * @memberof PatchedUpdatePage
     */
    'path_params'?: Array<PathParam>;
}
/**
 *
 * @export
 * @interface PatchedUpdatePremiumViewAttributes
 */
export interface PatchedUpdatePremiumViewAttributes {
    /**
     *
     * @type {boolean}
     * @memberof PatchedUpdatePremiumViewAttributes
     */
    'show_logo'?: boolean;
}
/**
 *
 * @export
 * @interface PatchedUpdateViewFilter
 */
export interface PatchedUpdateViewFilter {
    /**
     * The field of which the value must be compared to the filter value.
     * @type {number}
     * @memberof PatchedUpdateViewFilter
     */
    'field'?: number;
    /**
     * Indicates how the field\'s value must be compared to the filter\'s value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).  * `equal` - equal * `not_equal` - not_equal * `filename_contains` - filename_contains * `files_lower_than` - files_lower_than * `has_file_type` - has_file_type * `contains` - contains * `contains_not` - contains_not * `contains_word` - contains_word * `doesnt_contain_word` - doesnt_contain_word * `length_is_lower_than` - length_is_lower_than * `higher_than` - higher_than * `higher_than_or_equal` - higher_than_or_equal * `lower_than` - lower_than * `lower_than_or_equal` - lower_than_or_equal * `is_even_and_whole` - is_even_and_whole * `date_equal` - date_equal * `date_before` - date_before * `date_before_or_equal` - date_before_or_equal * `date_after_days_ago` - date_after_days_ago * `date_after` - date_after * `date_after_or_equal` - date_after_or_equal * `date_not_equal` - date_not_equal * `date_equals_today` - date_equals_today * `date_before_today` - date_before_today * `date_after_today` - date_after_today * `date_within_days` - date_within_days * `date_within_weeks` - date_within_weeks * `date_within_months` - date_within_months * `date_equals_days_ago` - date_equals_days_ago * `date_equals_months_ago` - date_equals_months_ago * `date_equals_years_ago` - date_equals_years_ago * `date_equals_week` - date_equals_week * `date_equals_month` - date_equals_month * `date_equals_day_of_month` - date_equals_day_of_month * `date_equals_year` - date_equals_year * `date_is` - date_is * `date_is_not` - date_is_not * `date_is_before` - date_is_before * `date_is_on_or_before` - date_is_on_or_before * `date_is_after` - date_is_after * `date_is_on_or_after` - date_is_on_or_after * `date_is_within` - date_is_within * `single_select_equal` - single_select_equal * `single_select_not_equal` - single_select_not_equal * `single_select_is_any_of` - single_select_is_any_of * `single_select_is_none_of` - single_select_is_none_of * `link_row_has` - link_row_has * `link_row_has_not` - link_row_has_not * `link_row_contains` - link_row_contains * `link_row_not_contains` - link_row_not_contains * `boolean` - boolean * `empty` - empty * `not_empty` - not_empty * `multiple_select_has` - multiple_select_has * `multiple_select_has_not` - multiple_select_has_not * `multiple_collaborators_has` - multiple_collaborators_has * `multiple_collaborators_has_not` - multiple_collaborators_has_not * `user_is` - user_is * `user_is_not` - user_is_not * `has_value_equal` - has_value_equal * `has_not_value_equal` - has_not_value_equal * `has_value_contains` - has_value_contains * `has_not_value_contains` - has_not_value_contains * `has_value_contains_word` - has_value_contains_word * `has_not_value_contains_word` - has_not_value_contains_word * `has_value_length_is_lower_than` - has_value_length_is_lower_than * `has_empty_value` - has_empty_value * `has_not_empty_value` - has_not_empty_value
     * @type {Type083Enum}
     * @memberof PatchedUpdateViewFilter
     */
    'type'?: Type083Enum;
    /**
     * The filter value that must be compared to the field\'s value.
     * @type {string}
     * @memberof PatchedUpdateViewFilter
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface PatchedUpdateViewFilterGroup
 */
export interface PatchedUpdateViewFilterGroup {
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR) in the group to be shown.  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof PatchedUpdateViewFilterGroup
     */
    'filter_type'?: ConditionTypeEnum;
}
/**
 *
 * @export
 * @interface PatchedUpdateViewGroupBy
 */
export interface PatchedUpdateViewGroupBy {
    /**
     * The field that must be grouped by.
     * @type {number}
     * @memberof PatchedUpdateViewGroupBy
     */
    'field'?: number;
    /**
     * Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A.  * `ASC` - Ascending * `DESC` - Descending
     * @type {OrderEnum}
     * @memberof PatchedUpdateViewGroupBy
     */
    'order'?: OrderEnum;
    /**
     * The pixel width of the group by in the related view.
     * @type {number}
     * @memberof PatchedUpdateViewGroupBy
     */
    'width'?: number;
}
/**
 *
 * @export
 * @interface PatchedUpdateViewSort
 */
export interface PatchedUpdateViewSort {
    /**
     * The field that must be sorted on.
     * @type {number}
     * @memberof PatchedUpdateViewSort
     */
    'field'?: number;
    /**
     * Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A.  * `ASC` - Ascending * `DESC` - Descending
     * @type {OrderEnum}
     * @memberof PatchedUpdateViewSort
     */
    'order'?: OrderEnum;
}
/**
 *
 * @export
 * @interface PatchedUpdateWorkspaceInvitation
 */
export interface PatchedUpdateWorkspaceInvitation {
    /**
     * The permissions that the user is going to get within the workspace after accepting the invitation.
     * @type {string}
     * @memberof PatchedUpdateWorkspaceInvitation
     */
    'permissions'?: string;
}
/**
 *
 * @export
 * @interface PatchedUpdateWorkspaceUser
 */
export interface PatchedUpdateWorkspaceUser {
    /**
     * The permissions that the user has within the workspace.
     * @type {string}
     * @memberof PatchedUpdateWorkspaceUser
     */
    'permissions'?: string;
}
/**
 * Serializes a request body for updating a given user. Do not use for returning user data as the password will be returned also.
 * @export
 * @interface PatchedUserAdminUpdate
 */
export interface PatchedUserAdminUpdate {
    /**
     *
     * @type {string}
     * @memberof PatchedUserAdminUpdate
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedUserAdminUpdate
     */
    'name'?: string;
    /**
     * Designates whether this user should be treated as active. Set this to false instead of deleting accounts.
     * @type {boolean}
     * @memberof PatchedUserAdminUpdate
     */
    'is_active'?: boolean;
    /**
     * Designates whether this user is an admin and has access to all workspaces and Baserow\'s admin areas.
     * @type {boolean}
     * @memberof PatchedUserAdminUpdate
     */
    'is_staff'?: boolean;
    /**
     *
     * @type {string}
     * @memberof PatchedUserAdminUpdate
     */
    'password'?: string;
}
/**
 *
 * @export
 * @interface PatchedViewFieldOptions
 */
export interface PatchedViewFieldOptions {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: CalendarViewFieldOptions; }}
     * @memberof PatchedViewFieldOptions
     */
    'field_options': {
        [key: string]: CalendarViewFieldOptions;
    };
}
/**
 *
 * @export
 * @interface PatchedViewUpdateView
 */
export interface PatchedViewUpdateView {
    /**
     *
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'name'?: string;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof PatchedViewUpdateView
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof PatchedViewUpdateView
     */
    'filters_disabled'?: boolean;
    /**
     * The new password or an empty string to remove any previous password from the view and make it publicly accessible again.
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'public_view_password'?: string;
    /**
     * Indicates how the access to the view is determined. By default, views are collaborative and shared for all users that have access to the table.
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'ownership_type'?: string;
    /**
     *
     * @type {RowIdentifierTypeEnum}
     * @memberof PatchedViewUpdateView
     */
    'row_identifier_type'?: RowIdentifierTypeEnum;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof PatchedViewUpdateView
     */
    'public'?: boolean;
    /**
     * The unique slug that can be used to construct a public URL.
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'slug': string;
    /**
     * References a file field of which the first image must be shown as card cover image.
     * @type {number}
     * @memberof PatchedViewUpdateView
     */
    'card_cover_image_field'?: number | null;
    /**
     * The title that is displayed at the beginning of the form.
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'title'?: string;
    /**
     * The description that is displayed at the beginning of the form.
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'description'?: string;
    /**
     * Configurable mode of the form.  * `form` - form * `survey` - survey
     * @type {Mode51eEnum}
     * @memberof PatchedViewUpdateView
     */
    'mode'?: Mode51eEnum;
    /**
     * The cover image that must be displayed at the top of the form.
     * @type {UserFile}
     * @memberof PatchedViewUpdateView
     */
    'cover_image'?: UserFile | null;
    /**
     * The logo image that must be displayed at the top of the form.
     * @type {UserFile}
     * @memberof PatchedViewUpdateView
     */
    'logo_image'?: UserFile | null;
    /**
     * The text displayed on the submit button.
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'submit_text'?: string;
    /**
     * The action that must be performed after the visitor has filled out the form.  * `MESSAGE` - Message * `REDIRECT` - Redirect
     * @type {SubmitActionEnum}
     * @memberof PatchedViewUpdateView
     */
    'submit_action'?: SubmitActionEnum;
    /**
     * If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'submit_action_message'?: string;
    /**
     * If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'submit_action_redirect_url'?: string;
    /**
     * A boolean indicating if the current user should be notified when the form is submitted.
     * @type {boolean}
     * @memberof PatchedViewUpdateView
     */
    'receive_notification_on_submit': boolean;
    /**
     *
     * @type {number}
     * @memberof PatchedViewUpdateView
     */
    'single_select_field'?: number | null;
    /**
     *
     * @type {number}
     * @memberof PatchedViewUpdateView
     */
    'date_field'?: number | null;
    /**
     * Read-only field with ICal feed endpoint. Note: this url will not be active if ical_public value is set to False.
     * @type {string}
     * @memberof PatchedViewUpdateView
     */
    'ical_feed_url': string;
    /**
     * A flag to show if ical feed is exposed. Set this field to True when modifying this resource to enable ICal feed url.
     * @type {boolean}
     * @memberof PatchedViewUpdateView
     */
    'ical_public'?: boolean | null;
}
/**
 *
 * @export
 * @interface PatchedWorkspace
 */
export interface PatchedWorkspace {
    /**
     *
     * @type {number}
     * @memberof PatchedWorkspace
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof PatchedWorkspace
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedWorkspace
     */
    'generative_ai_models_enabled'?: string;
}
/**
 *
 * @export
 * @interface PathParam
 */
export interface PathParam {
    /**
     * The name of the parameter.
     * @type {string}
     * @memberof PathParam
     */
    'name': string;
    /**
     * The type of the parameter.  * `text` - text * `numeric` - numeric
     * @type {PathParamTypeEnum}
     * @memberof PathParam
     */
    'type': PathParamTypeEnum;
}
/**
 * * `text` - text * `numeric` - numeric
 * @export
 * @enum {string}
 */
export declare const PathParamTypeEnum: {
    readonly Text: "text";
    readonly Numeric: "numeric";
};
export type PathParamTypeEnum = typeof PathParamTypeEnum[keyof typeof PathParamTypeEnum];
/**
 *
 * @export
 * @interface PermissionObject
 */
export interface PermissionObject {
    /**
     * The permission manager name.
     * @type {string}
     * @memberof PermissionObject
     */
    'name': string;
    /**
     * The content of the permission object for this permission manager.
     * @type {any}
     * @memberof PermissionObject
     */
    'permissions': any;
}
/**
 *
 * @export
 * @interface PhoneNumberFieldCreateField
 */
export interface PhoneNumberFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof PhoneNumberFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof PhoneNumberFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof PhoneNumberFieldCreateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface PhoneNumberFieldField
 */
export interface PhoneNumberFieldField {
    /**
     *
     * @type {number}
     * @memberof PhoneNumberFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof PhoneNumberFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof PhoneNumberFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof PhoneNumberFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof PhoneNumberFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof PhoneNumberFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof PhoneNumberFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof PhoneNumberFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface PhoneNumberFieldFieldSerializerWithRelatedFields
 */
export interface PhoneNumberFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof PhoneNumberFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof PhoneNumberFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof PhoneNumberFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof PhoneNumberFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof PhoneNumberFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof PhoneNumberFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof PhoneNumberFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof PhoneNumberFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof PhoneNumberFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface PhoneNumberFieldUpdateField
 */
export interface PhoneNumberFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof PhoneNumberFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof PhoneNumberFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof PhoneNumberFieldUpdateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface PremiumViewAttributesUpdate400Response
 */
export interface PremiumViewAttributesUpdate400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof PremiumViewAttributesUpdate400Response
     */
    'error'?: PremiumViewAttributesUpdate400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof PremiumViewAttributesUpdate400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const PremiumViewAttributesUpdate400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly FeatureNotAvailable: "ERROR_FEATURE_NOT_AVAILABLE";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly CannotUpdatePremiumAttributesOnTemplate: "ERROR_CANNOT_UPDATE_PREMIUM_ATTRIBUTES_ON_TEMPLATE";
};
export type PremiumViewAttributesUpdate400ResponseErrorEnum = typeof PremiumViewAttributesUpdate400ResponseErrorEnum[keyof typeof PremiumViewAttributesUpdate400ResponseErrorEnum];
/**
 *
 * @export
 * @interface PremiumViewAttributesUpdate404Response
 */
export interface PremiumViewAttributesUpdate404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof PremiumViewAttributesUpdate404Response
     */
    'error'?: PremiumViewAttributesUpdate404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof PremiumViewAttributesUpdate404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const PremiumViewAttributesUpdate404ResponseErrorEnum: {
    readonly ErrorViewDoesNotExist: "ERROR_VIEW_DOES_NOT_EXIST";
};
export type PremiumViewAttributesUpdate404ResponseErrorEnum = typeof PremiumViewAttributesUpdate404ResponseErrorEnum[keyof typeof PremiumViewAttributesUpdate404ResponseErrorEnum];
/**
 * A public version of the builder serializer with less data to prevent data leaks.
 * @export
 * @interface PublicBuilder
 */
export interface PublicBuilder {
    /**
     *
     * @type {number}
     * @memberof PublicBuilder
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof PublicBuilder
     */
    'name': string;
    /**
     * This field is specific to the `builder` application and contains an array of pages that are in the builder.
     * @type {Array<PublicPage>}
     * @memberof PublicBuilder
     */
    'pages': Array<PublicPage>;
    /**
     * The type of the object.
     * @type {string}
     * @memberof PublicBuilder
     */
    'type': string;
    /**
     * This field is specific to the `builder` application and contains the theme settings.
     * @type {CombinedThemeConfigBlocks}
     * @memberof PublicBuilder
     */
    'theme': CombinedThemeConfigBlocks;
    /**
     * The user sources related with this builder.
     * @type {Array<UserSourceBasePublicUserSource>}
     * @memberof PublicBuilder
     */
    'user_sources': Array<UserSourceBasePublicUserSource>;
    /**
     * This field is specific to the `builder` application and contains the favicon settings.
     * @type {string}
     * @memberof PublicBuilder
     */
    'favicon_file': string;
}
/**
 * @type PublicBuilderWorkflowActionTypeBuilderWorkflowAction
 * @export
 */
export type PublicBuilderWorkflowActionTypeBuilderWorkflowAction = {
    type: 'public_create_row';
} & PublicNone | {
    type: 'public_delete_row';
} & PublicNone | {
    type: 'public_logout';
} & PublicNone | {
    type: 'public_notification';
} & PublicNone | {
    type: 'public_open_page';
} & PublicNone | {
    type: 'public_refresh_data_source';
} & PublicNone | {
    type: 'public_update_row';
} & PublicNone;
/**
 *
 * @export
 * @interface PublicField
 */
export interface PublicField {
    /**
     *
     * @type {number}
     * @memberof PublicField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof PublicField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof PublicField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof PublicField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof PublicField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof PublicField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof PublicField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof PublicField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface PublicFormView
 */
export interface PublicFormView {
    /**
     * The title that is displayed at the beginning of the form.
     * @type {string}
     * @memberof PublicFormView
     */
    'title'?: string;
    /**
     * The description that is displayed at the beginning of the form.
     * @type {string}
     * @memberof PublicFormView
     */
    'description'?: string;
    /**
     * Configurable mode of the form.  * `form` - form * `survey` - survey
     * @type {Mode51eEnum}
     * @memberof PublicFormView
     */
    'mode'?: Mode51eEnum;
    /**
     * The user file cover image that is displayed at the top of the form.
     * @type {UserFile}
     * @memberof PublicFormView
     */
    'cover_image'?: UserFile | null;
    /**
     * The user file logo image that is displayed at the top of the form.
     * @type {UserFile}
     * @memberof PublicFormView
     */
    'logo_image'?: UserFile | null;
    /**
     * The text displayed on the submit button.
     * @type {string}
     * @memberof PublicFormView
     */
    'submit_text'?: string;
    /**
     *
     * @type {Array<PublicFormViewFieldOptions>}
     * @memberof PublicFormView
     */
    'fields': Array<PublicFormViewFieldOptions>;
    /**
     *
     * @type {boolean}
     * @memberof PublicFormView
     */
    'show_logo'?: boolean;
}
/**
 *
 * @export
 * @interface PublicFormViewField
 */
export interface PublicFormViewField {
    /**
     *
     * @type {number}
     * @memberof PublicFormViewField
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof PublicFormViewField
     */
    'name': string;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof PublicFormViewField
     */
    'type': string;
}
/**
 *
 * @export
 * @interface PublicFormViewFieldOptions
 */
export interface PublicFormViewFieldOptions {
    /**
     * If provided, then this value will be visible above the field input.
     * @type {string}
     * @memberof PublicFormViewFieldOptions
     */
    'name': string;
    /**
     * If provided, then this value be will be shown under the field name.
     * @type {string}
     * @memberof PublicFormViewFieldOptions
     */
    'description'?: string;
    /**
     * Indicates whether the field is required for the visitor to fill out.
     * @type {boolean}
     * @memberof PublicFormViewFieldOptions
     */
    'required'?: boolean;
    /**
     * The order that the field has in the form. Lower value is first.
     * @type {number}
     * @memberof PublicFormViewFieldOptions
     */
    'order'?: number;
    /**
     * The properties of the related field. These can be used to construct the correct input. Additional properties could be added depending on the field type.
     * @type {PublicFormViewField}
     * @memberof PublicFormViewFieldOptions
     */
    'field': PublicFormViewField;
    /**
     * Indicates whether this field is visible when the conditions are met.
     * @type {boolean}
     * @memberof PublicFormViewFieldOptions
     */
    'show_when_matching_conditions'?: boolean;
    /**
     * Indicates whether all (AND) or any (OR) of the conditions should match before shown.  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof PublicFormViewFieldOptions
     */
    'condition_type'?: ConditionTypeEnum;
    /**
     *
     * @type {Array<FormViewFieldOptionsCondition>}
     * @memberof PublicFormViewFieldOptions
     */
    'conditions'?: Array<FormViewFieldOptionsCondition>;
    /**
     *
     * @type {Array<FormViewFieldOptionsConditionGroup>}
     * @memberof PublicFormViewFieldOptions
     */
    'condition_groups'?: Array<FormViewFieldOptionsConditionGroup>;
    /**
     *
     * @type {Array<FormViewFieldOptionsConditionGroup>}
     * @memberof PublicFormViewFieldOptions
     */
    'groups'?: Array<FormViewFieldOptionsConditionGroup>;
    /**
     * Indicates which field input component is used in the form. The value is only used in the frontend, and can differ per field.
     * @type {string}
     * @memberof PublicFormViewFieldOptions
     */
    'field_component'?: string;
}
/**
 *
 * @export
 * @interface PublicListDatabaseTableGalleryViewRows400Response
 */
export interface PublicListDatabaseTableGalleryViewRows400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof PublicListDatabaseTableGalleryViewRows400Response
     */
    'error'?: PublicListDatabaseTableGalleryViewRows400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof PublicListDatabaseTableGalleryViewRows400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const PublicListDatabaseTableGalleryViewRows400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly FilterFieldNotFound: "ERROR_FILTER_FIELD_NOT_FOUND";
    readonly ViewFilterTypeDoesNotExist: "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST";
    readonly ViewFilterTypeUnsupportedField: "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
    readonly FiltersParamValidationError: "ERROR_FILTERS_PARAM_VALIDATION_ERROR";
};
export type PublicListDatabaseTableGalleryViewRows400ResponseErrorEnum = typeof PublicListDatabaseTableGalleryViewRows400ResponseErrorEnum[keyof typeof PublicListDatabaseTableGalleryViewRows400ResponseErrorEnum];
/**
 *
 * @export
 * @interface PublicListDatabaseTableGalleryViewRows404Response
 */
export interface PublicListDatabaseTableGalleryViewRows404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof PublicListDatabaseTableGalleryViewRows404Response
     */
    'error'?: PublicListDatabaseTableGalleryViewRows404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof PublicListDatabaseTableGalleryViewRows404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const PublicListDatabaseTableGalleryViewRows404ResponseErrorEnum: {
    readonly GalleryDoesNotExist: "ERROR_GALLERY_DOES_NOT_EXIST";
    readonly FieldDoesNotExist: "ERROR_FIELD_DOES_NOT_EXIST";
};
export type PublicListDatabaseTableGalleryViewRows404ResponseErrorEnum = typeof PublicListDatabaseTableGalleryViewRows404ResponseErrorEnum[keyof typeof PublicListDatabaseTableGalleryViewRows404ResponseErrorEnum];
/**
 *
 * @export
 * @interface PublicListDatabaseTableGridViewRows400Response
 */
export interface PublicListDatabaseTableGridViewRows400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof PublicListDatabaseTableGridViewRows400Response
     */
    'error'?: PublicListDatabaseTableGridViewRows400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof PublicListDatabaseTableGridViewRows400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const PublicListDatabaseTableGridViewRows400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly OrderByFieldNotFound: "ERROR_ORDER_BY_FIELD_NOT_FOUND";
    readonly OrderByFieldNotPossible: "ERROR_ORDER_BY_FIELD_NOT_POSSIBLE";
    readonly FilterFieldNotFound: "ERROR_FILTER_FIELD_NOT_FOUND";
    readonly ViewFilterTypeDoesNotExist: "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST";
    readonly ViewFilterTypeUnsupportedField: "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
    readonly FiltersParamValidationError: "ERROR_FILTERS_PARAM_VALIDATION_ERROR";
};
export type PublicListDatabaseTableGridViewRows400ResponseErrorEnum = typeof PublicListDatabaseTableGridViewRows400ResponseErrorEnum[keyof typeof PublicListDatabaseTableGridViewRows400ResponseErrorEnum];
/**
 *
 * @export
 * @interface PublicListDatabaseTableGridViewRows404Response
 */
export interface PublicListDatabaseTableGridViewRows404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof PublicListDatabaseTableGridViewRows404Response
     */
    'error'?: PublicListDatabaseTableGridViewRows404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof PublicListDatabaseTableGridViewRows404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const PublicListDatabaseTableGridViewRows404ResponseErrorEnum: {
    readonly GridDoesNotExist: "ERROR_GRID_DOES_NOT_EXIST";
    readonly FieldDoesNotExist: "ERROR_FIELD_DOES_NOT_EXIST";
};
export type PublicListDatabaseTableGridViewRows404ResponseErrorEnum = typeof PublicListDatabaseTableGridViewRows404ResponseErrorEnum[keyof typeof PublicListDatabaseTableGridViewRows404ResponseErrorEnum];
/**
 *
 * @export
 * @interface PublicListDatabaseTableKanbanViewRows400Response
 */
export interface PublicListDatabaseTableKanbanViewRows400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof PublicListDatabaseTableKanbanViewRows400Response
     */
    'error'?: PublicListDatabaseTableKanbanViewRows400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof PublicListDatabaseTableKanbanViewRows400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const PublicListDatabaseTableKanbanViewRows400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly KanbanViewHasNoSingleSelectField: "ERROR_KANBAN_VIEW_HAS_NO_SINGLE_SELECT_FIELD";
    readonly ViewFilterTypeDoesNotExist: "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST";
    readonly ViewFilterTypeUnsupportedField: "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
    readonly FilterFieldNotFound: "ERROR_FILTER_FIELD_NOT_FOUND";
    readonly FiltersParamValidationError: "ERROR_FILTERS_PARAM_VALIDATION_ERROR";
};
export type PublicListDatabaseTableKanbanViewRows400ResponseErrorEnum = typeof PublicListDatabaseTableKanbanViewRows400ResponseErrorEnum[keyof typeof PublicListDatabaseTableKanbanViewRows400ResponseErrorEnum];
/**
 *
 * @export
 * @interface PublicListDatabaseTableKanbanViewRows404Response
 */
export interface PublicListDatabaseTableKanbanViewRows404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof PublicListDatabaseTableKanbanViewRows404Response
     */
    'error'?: PublicListDatabaseTableKanbanViewRows404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof PublicListDatabaseTableKanbanViewRows404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const PublicListDatabaseTableKanbanViewRows404ResponseErrorEnum: {
    readonly ErrorKanbanDoesNotExist: "ERROR_KANBAN_DOES_NOT_EXIST";
};
export type PublicListDatabaseTableKanbanViewRows404ResponseErrorEnum = typeof PublicListDatabaseTableKanbanViewRows404ResponseErrorEnum[keyof typeof PublicListDatabaseTableKanbanViewRows404ResponseErrorEnum];
/**
 * Basic builder workflow action serializer
 * @export
 * @interface PublicNone
 */
export interface PublicNone {
    /**
     *
     * @type {number}
     * @memberof PublicNone
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof PublicNone
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof PublicNone
     */
    'element_id': number | null;
    /**
     * The type of the workflow action
     * @type {string}
     * @memberof PublicNone
     */
    'type': string;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof PublicNone
     */
    'event': string;
    /**
     * The title of the notification. Must be an formula.
     * @type {string}
     * @memberof PublicNone
     */
    'title'?: string;
    /**
     * The description of the notification. Must be an formula.
     * @type {string}
     * @memberof PublicNone
     */
    'description'?: string;
}
/**
 * A public version of the page serializer with less data to prevent data leaks.
 * @export
 * @interface PublicPage
 */
export interface PublicPage {
    /**
     *
     * @type {number}
     * @memberof PublicPage
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof PublicPage
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PublicPage
     */
    'path': string;
    /**
     *
     * @type {Array<PathParam>}
     * @memberof PublicPage
     */
    'path_params'?: Array<PathParam>;
}
/**
 *
 * @export
 * @interface PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
 */
export interface PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: GalleryViewFieldOptions; }}
     * @memberof PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'field_options'?: {
        [key: string]: GalleryViewFieldOptions;
    };
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'previous': string | null;
    /**
     *
     * @type {Array<ExampleRowResponse>}
     * @memberof PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
     */
    'results': Array<ExampleRowResponse>;
}
/**
 *
 * @export
 * @interface PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse
 */
export interface PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: GridViewFieldOptions; }}
     * @memberof PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'field_options'?: {
        [key: string]: GridViewFieldOptions;
    };
    /**
     * The total amount of results.
     * @type {number}
     * @memberof PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'count': number;
    /**
     * URL to the next page.
     * @type {string}
     * @memberof PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'next': string | null;
    /**
     * URL to the previous page.
     * @type {string}
     * @memberof PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'previous': string | null;
    /**
     *
     * @type {Array<ExampleRowResponse>}
     * @memberof PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse
     */
    'results': Array<ExampleRowResponse>;
}
/**
 *
 * @export
 * @interface PublicView
 */
export interface PublicView {
    /**
     *
     * @type {string}
     * @memberof PublicView
     */
    'id': string;
    /**
     *
     * @type {PublicViewTable}
     * @memberof PublicView
     */
    'table': PublicViewTable;
    /**
     *
     * @type {string}
     * @memberof PublicView
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof PublicView
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof PublicView
     */
    'type': string;
    /**
     *
     * @type {Array<PublicViewSort>}
     * @memberof PublicView
     */
    'sortings': Array<PublicViewSort>;
    /**
     *
     * @type {Array<PublicViewGroupBy>}
     * @memberof PublicView
     */
    'group_bys': Array<PublicViewGroupBy>;
    /**
     * Indicates whether the view is publicly accessible to visitors.
     * @type {boolean}
     * @memberof PublicView
     */
    'public'?: boolean;
    /**
     * The unique slug where the view can be accessed publicly on.
     * @type {string}
     * @memberof PublicView
     */
    'slug': string;
    /**
     *
     * @type {boolean}
     * @memberof PublicView
     */
    'show_logo'?: boolean;
}
/**
 *
 * @export
 * @interface PublicViewAuthRequest
 */
export interface PublicViewAuthRequest {
    /**
     *
     * @type {string}
     * @memberof PublicViewAuthRequest
     */
    'password': string;
}
/**
 *
 * @export
 * @interface PublicViewAuthResponse
 */
export interface PublicViewAuthResponse {
    /**
     *
     * @type {string}
     * @memberof PublicViewAuthResponse
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface PublicViewGroupBy
 */
export interface PublicViewGroupBy {
    /**
     *
     * @type {number}
     * @memberof PublicViewGroupBy
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof PublicViewGroupBy
     */
    'view': string;
    /**
     * The field that must be grouped by.
     * @type {number}
     * @memberof PublicViewGroupBy
     */
    'field': number;
    /**
     * Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A.  * `ASC` - Ascending * `DESC` - Descending
     * @type {OrderEnum}
     * @memberof PublicViewGroupBy
     */
    'order'?: OrderEnum;
    /**
     * The pixel width of the group by in the related view.
     * @type {number}
     * @memberof PublicViewGroupBy
     */
    'width'?: number;
}
/**
 *
 * @export
 * @interface PublicViewInfo
 */
export interface PublicViewInfo {
    /**
     *
     * @type {Array<PublicField>}
     * @memberof PublicViewInfo
     */
    'fields': Array<PublicField>;
    /**
     *
     * @type {PublicView}
     * @memberof PublicViewInfo
     */
    'view': PublicView;
}
/**
 *
 * @export
 * @interface PublicViewSort
 */
export interface PublicViewSort {
    /**
     *
     * @type {number}
     * @memberof PublicViewSort
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof PublicViewSort
     */
    'view': string;
    /**
     * The field that must be sorted on.
     * @type {number}
     * @memberof PublicViewSort
     */
    'field': number;
    /**
     * Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A.  * `ASC` - Ascending * `DESC` - Descending
     * @type {OrderEnum}
     * @memberof PublicViewSort
     */
    'order'?: OrderEnum;
}
/**
 *
 * @export
 * @interface PublicViewTable
 */
export interface PublicViewTable {
    /**
     *
     * @type {number}
     * @memberof PublicViewTable
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof PublicViewTable
     */
    'database_id': number;
}
/**
 *
 * @export
 * @interface PublishDomainJobCreateJob
 */
export interface PublishDomainJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof PublishDomainJobCreateJob
     */
    'type': Type8b6Enum;
}
/**
 *
 * @export
 * @interface PublishDomainJobJob
 */
export interface PublishDomainJobJob {
    /**
     *
     * @type {number}
     * @memberof PublishDomainJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof PublishDomainJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof PublishDomainJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof PublishDomainJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof PublishDomainJobJob
     */
    'human_readable_error'?: string;
}
/**
 *
 * @export
 * @interface RatingFieldCreateField
 */
export interface RatingFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof RatingFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof RatingFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof RatingFieldCreateField
     */
    'description'?: string | null;
    /**
     * Maximum value the rating can take.
     * @type {number}
     * @memberof RatingFieldCreateField
     */
    'max_value'?: number;
    /**
     * Color of the symbols.
     * @type {string}
     * @memberof RatingFieldCreateField
     */
    'color'?: string;
    /**
     * Rating style. Allowed values: star, heart, thumbs-up, flag, smile.  * `star` - Star * `heart` - Heart * `thumbs-up` - Thumbs-up * `flag` - Flags * `smile` - Smile
     * @type {StyleEnum}
     * @memberof RatingFieldCreateField
     */
    'style'?: StyleEnum;
}
/**
 *
 * @export
 * @interface RatingFieldField
 */
export interface RatingFieldField {
    /**
     *
     * @type {number}
     * @memberof RatingFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof RatingFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof RatingFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof RatingFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof RatingFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof RatingFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof RatingFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof RatingFieldField
     */
    'description'?: string | null;
    /**
     * Maximum value the rating can take.
     * @type {number}
     * @memberof RatingFieldField
     */
    'max_value'?: number;
    /**
     * Color of the symbols.
     * @type {string}
     * @memberof RatingFieldField
     */
    'color'?: string;
    /**
     * Rating style. Allowed values: star, heart, thumbs-up, flag, smile.  * `star` - Star * `heart` - Heart * `thumbs-up` - Thumbs-up * `flag` - Flags * `smile` - Smile
     * @type {StyleEnum}
     * @memberof RatingFieldField
     */
    'style'?: StyleEnum;
}
/**
 *
 * @export
 * @interface RatingFieldFieldSerializerWithRelatedFields
 */
export interface RatingFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     * Maximum value the rating can take.
     * @type {number}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'max_value'?: number;
    /**
     * Color of the symbols.
     * @type {string}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'color'?: string;
    /**
     * Rating style. Allowed values: star, heart, thumbs-up, flag, smile.  * `star` - Star * `heart` - Heart * `thumbs-up` - Thumbs-up * `flag` - Flags * `smile` - Smile
     * @type {StyleEnum}
     * @memberof RatingFieldFieldSerializerWithRelatedFields
     */
    'style'?: StyleEnum;
}
/**
 *
 * @export
 * @interface RatingFieldUpdateField
 */
export interface RatingFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof RatingFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof RatingFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof RatingFieldUpdateField
     */
    'description'?: string | null;
    /**
     * Maximum value the rating can take.
     * @type {number}
     * @memberof RatingFieldUpdateField
     */
    'max_value'?: number;
    /**
     * Color of the symbols.
     * @type {string}
     * @memberof RatingFieldUpdateField
     */
    'color'?: string;
    /**
     * Rating style. Allowed values: star, heart, thumbs-up, flag, smile.  * `star` - Star * `heart` - Heart * `thumbs-up` - Thumbs-up * `flag` - Flags * `smile` - Smile
     * @type {StyleEnum}
     * @memberof RatingFieldUpdateField
     */
    'style'?: StyleEnum;
}
/**
 * Basic builder workflow action serializer
 * @export
 * @interface RefreshDataSourceWorkflowActionBuilderWorkflowAction
 */
export interface RefreshDataSourceWorkflowActionBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof RefreshDataSourceWorkflowActionBuilderWorkflowAction
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof RefreshDataSourceWorkflowActionBuilderWorkflowAction
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof RefreshDataSourceWorkflowActionBuilderWorkflowAction
     */
    'element_id': number | null;
    /**
     * The type of the workflow action
     * @type {string}
     * @memberof RefreshDataSourceWorkflowActionBuilderWorkflowAction
     */
    'type': string;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof RefreshDataSourceWorkflowActionBuilderWorkflowAction
     */
    'event': string;
    /**
     * The ID of the Data Source to be refreshed.
     * @type {number}
     * @memberof RefreshDataSourceWorkflowActionBuilderWorkflowAction
     */
    'data_source_id'?: number | null;
}
/**
 *
 * @export
 * @interface RefreshDataSourceWorkflowActionCreateBuilderWorkflowAction
 */
export interface RefreshDataSourceWorkflowActionCreateBuilderWorkflowAction {
    /**
     *
     * @type {number}
     * @memberof RefreshDataSourceWorkflowActionCreateBuilderWorkflowAction
     */
    'id': number;
    /**
     * The id of the element the workflow action is associated with
     * @type {number}
     * @memberof RefreshDataSourceWorkflowActionCreateBuilderWorkflowAction
     */
    'element_id'?: number | null;
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof RefreshDataSourceWorkflowActionCreateBuilderWorkflowAction
     */
    'type': Type051Enum;
    /**
     * The event that triggers the execution
     * @type {string}
     * @memberof RefreshDataSourceWorkflowActionCreateBuilderWorkflowAction
     */
    'event': string;
    /**
     * The ID of the Data Source to be refreshed.
     * @type {number}
     * @memberof RefreshDataSourceWorkflowActionCreateBuilderWorkflowAction
     */
    'data_source_id'?: number | null;
}
/**
 *
 * @export
 * @interface RefreshDataSourceWorkflowActionUpdateBuilderWorkflowActions
 */
export interface RefreshDataSourceWorkflowActionUpdateBuilderWorkflowActions {
    /**
     * The type of the workflow action  * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
     * @type {Type051Enum}
     * @memberof RefreshDataSourceWorkflowActionUpdateBuilderWorkflowActions
     */
    'type'?: Type051Enum;
    /**
     * The ID of the Data Source to be refreshed.
     * @type {number}
     * @memberof RefreshDataSourceWorkflowActionUpdateBuilderWorkflowActions
     */
    'data_source_id'?: number | null;
}
/**
 *
 * @export
 * @interface Register
 */
export interface Register {
    /**
     *
     * @type {string}
     * @memberof Register
     */
    'name': string;
    /**
     * The email address is also going to be the username.
     * @type {string}
     * @memberof Register
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof Register
     */
    'password': string;
    /**
     * An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @type {string}
     * @memberof Register
     */
    'language'?: string;
    /**
     * Indicates whether an authentication JWT should be generated and be included in the response.
     * @type {boolean}
     * @memberof Register
     */
    'authenticate'?: boolean;
    /**
     * DEPRECATED: Please use `workspace_invitation_token` which this attribute is being renamed to in 2024.
     * @type {string}
     * @memberof Register
     */
    'group_invitation_token'?: string;
    /**
     * If provided and valid, the user accepts the workspace invitation and will have access to the workspace after signing up.
     * @type {string}
     * @memberof Register
     */
    'workspace_invitation_token'?: string;
    /**
     * The id of the template that must be installed after creating the account. This only works if the `workspace_invitation_token` param is not provided.
     * @type {number}
     * @memberof Register
     */
    'template_id'?: number;
}
/**
 *
 * @export
 * @interface RegisterLicense
 */
export interface RegisterLicense {
    /**
     * The license that you want to register.
     * @type {string}
     * @memberof RegisterLicense
     */
    'license': string;
}
/**
 *
 * @export
 * @interface RelatedFields
 */
export interface RelatedFields {
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof RelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface RepeatElementCreateElement
 */
export interface RepeatElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof RepeatElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof RepeatElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof RepeatElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof RepeatElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof RepeatElementCreateElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof RepeatElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof RepeatElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof RepeatElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof RepeatElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof RepeatElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof RepeatElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof RepeatElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof RepeatElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof RepeatElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The data source we want to show in the element for. Only data_sources that return list are allowed.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'data_source_id'?: number | null;
    /**
     * The amount item loaded with each page.
     * @type {number}
     * @memberof RepeatElementCreateElement
     */
    'items_per_page'?: number;
    /**
     * The label of the show more button
     * @type {string}
     * @memberof RepeatElementCreateElement
     */
    'button_load_more_label'?: string;
    /**
     *
     * @type {OrientationEnum}
     * @memberof RepeatElementCreateElement
     */
    'orientation'?: OrientationEnum;
    /**
     * The amount repetitions per row, per device type. Only applicable when the orientation is horizontal.
     * @type {any}
     * @memberof RepeatElementCreateElement
     */
    'items_per_row'?: any;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface RepeatElementElement
 */
export interface RepeatElementElement {
    /**
     *
     * @type {number}
     * @memberof RepeatElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof RepeatElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof RepeatElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof RepeatElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof RepeatElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof RepeatElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof RepeatElementElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof RepeatElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof RepeatElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof RepeatElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof RepeatElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof RepeatElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof RepeatElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof RepeatElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof RepeatElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof RepeatElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof RepeatElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof RepeatElementElement
     */
    'roles'?: any;
    /**
     * The data source we want to show in the element for. Only data_sources that return list are allowed.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'data_source_id'?: number | null;
    /**
     * The amount item loaded with each page.
     * @type {number}
     * @memberof RepeatElementElement
     */
    'items_per_page'?: number;
    /**
     * The label of the show more button
     * @type {string}
     * @memberof RepeatElementElement
     */
    'button_load_more_label'?: string;
    /**
     *
     * @type {OrientationEnum}
     * @memberof RepeatElementElement
     */
    'orientation'?: OrientationEnum;
    /**
     * The amount repetitions per row, per device type. Only applicable when the orientation is horizontal.
     * @type {any}
     * @memberof RepeatElementElement
     */
    'items_per_row'?: any;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface RepeatElementPublicElement
 */
export interface RepeatElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof RepeatElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof RepeatElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof RepeatElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof RepeatElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof RepeatElementPublicElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof RepeatElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof RepeatElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof RepeatElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof RepeatElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof RepeatElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof RepeatElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof RepeatElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof RepeatElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof RepeatElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof RepeatElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof RepeatElementPublicElement
     */
    'roles'?: any;
    /**
     * The data source we want to show in the element for. Only data_sources that return list are allowed.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'data_source_id'?: number | null;
    /**
     * The amount item loaded with each page.
     * @type {number}
     * @memberof RepeatElementPublicElement
     */
    'items_per_page'?: number;
    /**
     * The label of the show more button
     * @type {string}
     * @memberof RepeatElementPublicElement
     */
    'button_load_more_label'?: string;
    /**
     *
     * @type {OrientationEnum}
     * @memberof RepeatElementPublicElement
     */
    'orientation'?: OrientationEnum;
    /**
     * The amount repetitions per row, per device type. Only applicable when the orientation is horizontal.
     * @type {any}
     * @memberof RepeatElementPublicElement
     */
    'items_per_row'?: any;
}
/**
 *
 * @export
 * @interface RepeatElementUpdateElement
 */
export interface RepeatElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof RepeatElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonConfigBlock}
     * @memberof RepeatElementUpdateElement
     */
    'styles'?: ButtonConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof RepeatElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof RepeatElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof RepeatElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof RepeatElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof RepeatElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof RepeatElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof RepeatElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof RepeatElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof RepeatElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof RepeatElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof RepeatElementUpdateElement
     */
    'roles'?: any;
    /**
     * The data source we want to show in the element for. Only data_sources that return list are allowed.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'data_source_id'?: number | null;
    /**
     * The amount item loaded with each page.
     * @type {number}
     * @memberof RepeatElementUpdateElement
     */
    'items_per_page'?: number;
    /**
     * The label of the show more button
     * @type {string}
     * @memberof RepeatElementUpdateElement
     */
    'button_load_more_label'?: string;
    /**
     *
     * @type {OrientationEnum}
     * @memberof RepeatElementUpdateElement
     */
    'orientation'?: OrientationEnum;
    /**
     * The amount repetitions per row, per device type. Only applicable when the orientation is horizontal.
     * @type {any}
     * @memberof RepeatElementUpdateElement
     */
    'items_per_row'?: any;
}
/**
 *
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * An object containing field in error by rows. The keys are the row indexes from original file and values are objects of errors by fields.
     * @type {{ [key: string]: { [key: string]: Array<string>; }; }}
     * @memberof Report
     */
    'failing_rows': {
        [key: string]: {
            [key: string]: Array<string>;
        };
    };
}
/**
 * * `POST` - Post * `GET` - Get * `PUT` - Put * `PATCH` - Patch * `DELETE` - Delete
 * @export
 * @enum {string}
 */
export declare const RequestMethodEnum: {
    readonly Post: "POST";
    readonly Get: "GET";
    readonly Put: "PUT";
    readonly Patch: "PATCH";
    readonly Delete: "DELETE";
};
export type RequestMethodEnum = typeof RequestMethodEnum[keyof typeof RequestMethodEnum];
/**
 *
 * @export
 * @interface ResetPassword400Response
 */
export interface ResetPassword400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof ResetPassword400Response
     */
    'error'?: ResetPassword400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof ResetPassword400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const ResetPassword400ResponseErrorEnum: {
    readonly BadTokenSignature: "BAD_TOKEN_SIGNATURE";
    readonly ExpiredTokenSignature: "EXPIRED_TOKEN_SIGNATURE";
    readonly ErrorUserNotFound: "ERROR_USER_NOT_FOUND";
    readonly ErrorRequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
};
export type ResetPassword400ResponseErrorEnum = typeof ResetPassword400ResponseErrorEnum[keyof typeof ResetPassword400ResponseErrorEnum];
/**
 *
 * @export
 * @interface ResetPasswordBodyValidation
 */
export interface ResetPasswordBodyValidation {
    /**
     *
     * @type {string}
     * @memberof ResetPasswordBodyValidation
     */
    'token': string;
    /**
     *
     * @type {string}
     * @memberof ResetPasswordBodyValidation
     */
    'password': string;
}
/**
 *
 * @export
 * @interface Restore400Response
 */
export interface Restore400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof Restore400Response
     */
    'error'?: Restore400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof Restore400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const Restore400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly TrashItemDoesNotExist: "ERROR_TRASH_ITEM_DOES_NOT_EXIST";
    readonly CannotRestoreParentBeforeChild: "ERROR_CANNOT_RESTORE_PARENT_BEFORE_CHILD";
    readonly ParentIdMustNotBeProvided: "ERROR_PARENT_ID_MUST_NOT_BE_PROVIDED";
    readonly ParentIdMustBeProvided: "ERROR_PARENT_ID_MUST_BE_PROVIDED";
    readonly CantRestoreAsRelatedTableTrashed: "ERROR_CANT_RESTORE_AS_RELATED_TABLE_TRASHED";
    readonly CannotRestoreItemNotOwnedByUser: "ERROR_CANNOT_RESTORE_ITEM_NOT_OWNED_BY_USER";
};
export type Restore400ResponseErrorEnum = typeof Restore400ResponseErrorEnum[keyof typeof Restore400ResponseErrorEnum];
/**
 *
 * @export
 * @interface RestoreSnapshotJobCreateJob
 */
export interface RestoreSnapshotJobCreateJob {
    /**
     * The type of the job.  * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
     * @type {Type8b6Enum}
     * @memberof RestoreSnapshotJobCreateJob
     */
    'type': Type8b6Enum;
}
/**
 *
 * @export
 * @interface RestoreSnapshotJobJob
 */
export interface RestoreSnapshotJobJob {
    /**
     *
     * @type {number}
     * @memberof RestoreSnapshotJobJob
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof RestoreSnapshotJobJob
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof RestoreSnapshotJobJob
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof RestoreSnapshotJobJob
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof RestoreSnapshotJobJob
     */
    'human_readable_error'?: string;
}
/**
 * * `allow_all` - Allow All * `allow_all_except` - Allow All Except * `disallow_all_except` - Disallow All Except
 * @export
 * @enum {string}
 */
export declare const RoleTypeEnum: {
    readonly AllowAll: "allow_all";
    readonly AllowAllExcept: "allow_all_except";
    readonly DisallowAllExcept: "disallow_all_except";
};
export type RoleTypeEnum = typeof RoleTypeEnum[keyof typeof RoleTypeEnum];
/**
 *
 * @export
 * @interface RollupFieldCreateField
 */
export interface RollupFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof RollupFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof RollupFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof RollupFieldCreateField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof RollupFieldCreateField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof RollupFieldCreateField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof RollupFieldCreateField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof RollupFieldCreateField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof RollupFieldCreateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof RollupFieldCreateField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof RollupFieldCreateField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof RollupFieldCreateField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof RollupFieldCreateField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof RollupFieldCreateField
     */
    'error'?: string | null;
    /**
     * The id of the link row field to rollup values for.
     * @type {number}
     * @memberof RollupFieldCreateField
     */
    'through_field_id'?: number | null;
    /**
     * The id of the field in the table linked to by the through_field to rollup.
     * @type {number}
     * @memberof RollupFieldCreateField
     */
    'target_field_id'?: number | null;
    /**
     * The rollup formula function that must be applied.
     * @type {string}
     * @memberof RollupFieldCreateField
     */
    'rollup_function'?: string;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof RollupFieldCreateField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface RollupFieldField
 */
export interface RollupFieldField {
    /**
     *
     * @type {number}
     * @memberof RollupFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof RollupFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof RollupFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof RollupFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof RollupFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof RollupFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof RollupFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof RollupFieldField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof RollupFieldField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof RollupFieldField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof RollupFieldField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof RollupFieldField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof RollupFieldField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof RollupFieldField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof RollupFieldField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof RollupFieldField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof RollupFieldField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof RollupFieldField
     */
    'error'?: string | null;
    /**
     * The id of the link row field to rollup values for.
     * @type {number}
     * @memberof RollupFieldField
     */
    'through_field_id'?: number | null;
    /**
     * The id of the field in the table linked to by the through_field to rollup.
     * @type {number}
     * @memberof RollupFieldField
     */
    'target_field_id'?: number | null;
    /**
     * The rollup formula function that must be applied.
     * @type {string}
     * @memberof RollupFieldField
     */
    'rollup_function'?: string;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof RollupFieldField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface RollupFieldFieldSerializerWithRelatedFields
 */
export interface RollupFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'error'?: string | null;
    /**
     * The id of the link row field to rollup values for.
     * @type {number}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'through_field_id'?: number | null;
    /**
     * The id of the field in the table linked to by the through_field to rollup.
     * @type {number}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'target_field_id'?: number | null;
    /**
     * The rollup formula function that must be applied.
     * @type {string}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'rollup_function'?: string;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof RollupFieldFieldSerializerWithRelatedFields
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface RollupFieldUpdateField
 */
export interface RollupFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof RollupFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof RollupFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof RollupFieldUpdateField
     */
    'description'?: string | null;
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof RollupFieldUpdateField
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof RollupFieldUpdateField
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof RollupFieldUpdateField
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof RollupFieldUpdateField
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof RollupFieldUpdateField
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof RollupFieldUpdateField
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof RollupFieldUpdateField
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof RollupFieldUpdateField
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof RollupFieldUpdateField
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof RollupFieldUpdateField
     */
    'error'?: string | null;
    /**
     * The id of the link row field to rollup values for.
     * @type {number}
     * @memberof RollupFieldUpdateField
     */
    'through_field_id'?: number | null;
    /**
     * The id of the field in the table linked to by the through_field to rollup.
     * @type {number}
     * @memberof RollupFieldUpdateField
     */
    'target_field_id'?: number | null;
    /**
     * The rollup formula function that must be applied.
     * @type {string}
     * @memberof RollupFieldUpdateField
     */
    'rollup_function'?: string;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof RollupFieldUpdateField
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 *
 * @export
 * @interface RotateDatabaseViewSlug400Response
 */
export interface RotateDatabaseViewSlug400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof RotateDatabaseViewSlug400Response
     */
    'error'?: RotateDatabaseViewSlug400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof RotateDatabaseViewSlug400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const RotateDatabaseViewSlug400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly CannotShareViewType: "ERROR_CANNOT_SHARE_VIEW_TYPE";
};
export type RotateDatabaseViewSlug400ResponseErrorEnum = typeof RotateDatabaseViewSlug400ResponseErrorEnum[keyof typeof RotateDatabaseViewSlug400ResponseErrorEnum];
/**
 *
 * @export
 * @interface RowComment
 */
export interface RowComment {
    /**
     *
     * @type {number}
     * @memberof RowComment
     */
    'id': number;
    /**
     * The user who made the comment.
     * @type {number}
     * @memberof RowComment
     */
    'user_id': number | null;
    /**
     *
     * @type {string}
     * @memberof RowComment
     */
    'first_name'?: string;
    /**
     * The table the row this comment is for is found in.
     * @type {number}
     * @memberof RowComment
     */
    'table_id': number;
    /**
     * The id of the row the comment is for.
     * @type {number}
     * @memberof RowComment
     */
    'row_id': number;
    /**
     *
     * @type {string}
     * @memberof RowComment
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof RowComment
     */
    'created_on': string;
    /**
     *
     * @type {string}
     * @memberof RowComment
     */
    'updated_on': string;
    /**
     *
     * @type {string}
     * @memberof RowComment
     */
    'edited': string;
    /**
     *
     * @type {boolean}
     * @memberof RowComment
     */
    'trashed'?: boolean;
}
/**
 *
 * @export
 * @interface RowCommentCreate
 */
export interface RowCommentCreate {
    /**
     * The rich text comment content.
     * @type {any}
     * @memberof RowCommentCreate
     */
    'message': any;
}
/**
 *
 * @export
 * @interface RowCommentsNotificationMode
 */
export interface RowCommentsNotificationMode {
    /**
     * The mode to use to receive notifications for new comments on a table row.  * `all` - all * `mentions` - mentions
     * @type {Mode884Enum}
     * @memberof RowCommentsNotificationMode
     */
    'mode': Mode884Enum;
}
/**
 * * `all` - all * `mentions` - mentions
 * @export
 * @enum {string}
 */
export declare const RowCommentsNotificationModeEnum: {
    readonly All: "all";
    readonly Mentions: "mentions";
};
export type RowCommentsNotificationModeEnum = typeof RowCommentsNotificationModeEnum[keyof typeof RowCommentsNotificationModeEnum];
/**
 *
 * @export
 * @interface RowHistory
 */
export interface RowHistory {
    /**
     *
     * @type {number}
     * @memberof RowHistory
     */
    'id': number;
    /**
     * The type of the action that was performed.
     * @type {string}
     * @memberof RowHistory
     */
    'action_type': string;
    /**
     * The user that performed the action.
     * @type {RowHistoryUser}
     * @memberof RowHistory
     */
    'user': RowHistoryUser;
    /**
     * The timestamp of the action that was performed.
     * @type {string}
     * @memberof RowHistory
     */
    'timestamp': string;
    /**
     * The mapping between field_ids and values for the row before the action was performed.
     * @type {any}
     * @memberof RowHistory
     */
    'before': any;
    /**
     * The mapping between field_ids and values for the row after the action was performed.
     * @type {any}
     * @memberof RowHistory
     */
    'after': any;
    /**
     * The metadata of the fields that were changed.
     * @type {any}
     * @memberof RowHistory
     */
    'fields_metadata': any;
}
/**
 *
 * @export
 * @interface RowHistoryUser
 */
export interface RowHistoryUser {
    /**
     * The id of the user.
     * @type {number}
     * @memberof RowHistoryUser
     */
    'id': number;
    /**
     * The first name of the user.
     * @type {string}
     * @memberof RowHistoryUser
     */
    'name': string;
}
/**
 * * `id` - Id * `count` - Count
 * @export
 * @enum {string}
 */
export declare const RowIdentifierTypeEnum: {
    readonly Id: "id";
    readonly Count: "count";
};
export type RowIdentifierTypeEnum = typeof RowIdentifierTypeEnum[keyof typeof RowIdentifierTypeEnum];
/**
 *
 * @export
 * @interface RowMetadata
 */
export interface RowMetadata {
    /**
     * How many row comments exist for this row.
     * @type {number}
     * @memberof RowMetadata
     */
    'row_comment_count'?: number;
    /**
     *
     * @type {RowCommentsNotificationModeEnum}
     * @memberof RowMetadata
     */
    'row_comments_notification_mode'?: RowCommentsNotificationModeEnum;
}
/**
 *
 * @export
 * @interface SAMLResponse
 */
export interface SAMLResponse {
    /**
     * The encoded SAML response from the IdP.
     * @type {string}
     * @memberof SAMLResponse
     */
    'SAMLResponse': string;
    /**
     * The frontend URL where redirect the authenticated user.
     * @type {string}
     * @memberof SAMLResponse
     */
    'RelayState': string;
}
/**
 *
 * @export
 * @interface SamlAuthProviderModelAuthProvider
 */
export interface SamlAuthProviderModelAuthProvider {
    /**
     *
     * @type {number}
     * @memberof SamlAuthProviderModelAuthProvider
     */
    'id': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof SamlAuthProviderModelAuthProvider
     */
    'type': string;
    /**
     * The email domain registered with this provider.
     * @type {string}
     * @memberof SamlAuthProviderModelAuthProvider
     */
    'domain': string;
    /**
     * Whether the provider is enabled or not.
     * @type {boolean}
     * @memberof SamlAuthProviderModelAuthProvider
     */
    'enabled'?: boolean;
    /**
     * The SAML metadata XML provided by the IdP.
     * @type {string}
     * @memberof SamlAuthProviderModelAuthProvider
     */
    'metadata': string;
    /**
     * Whether or not a user sign in correctly with this SAML provider.
     * @type {boolean}
     * @memberof SamlAuthProviderModelAuthProvider
     */
    'is_verified': boolean;
}
/**
 * * `core` - core * `application` - application * `workspace` - workspace * `workspace_invitation` - workspace_invitation * `snapshot` - snapshot * `workspace_user` - workspace_user * `integration` - integration * `user_source` - user_source * `database` - database * `database_table` - database_table * `database_field` - database_field * `database_view` - database_view * `database_view_decoration` - database_view_decoration * `database_view_sort` - database_view_sort * `database_view_group` - database_view_group * `database_view_filter` - database_view_filter * `database_view_filter_group` - database_view_filter_group * `token` - token * `builder` - builder * `builder_page` - builder_page * `builder_element` - builder_element * `builder_domain` - builder_domain * `builder_data_source` - builder_data_source * `builder_workflow_action` - builder_workflow_action * `team` - team * `team_subject` - team_subject * `license` - license
 * @export
 * @enum {string}
 */
export declare const ScopeTypeEnum: {
    readonly Core: "core";
    readonly Application: "application";
    readonly Workspace: "workspace";
    readonly WorkspaceInvitation: "workspace_invitation";
    readonly Snapshot: "snapshot";
    readonly WorkspaceUser: "workspace_user";
    readonly Integration: "integration";
    readonly UserSource: "user_source";
    readonly Database: "database";
    readonly DatabaseTable: "database_table";
    readonly DatabaseField: "database_field";
    readonly DatabaseView: "database_view";
    readonly DatabaseViewDecoration: "database_view_decoration";
    readonly DatabaseViewSort: "database_view_sort";
    readonly DatabaseViewGroup: "database_view_group";
    readonly DatabaseViewFilter: "database_view_filter";
    readonly DatabaseViewFilterGroup: "database_view_filter_group";
    readonly Token: "token";
    readonly Builder: "builder";
    readonly BuilderPage: "builder_page";
    readonly BuilderElement: "builder_element";
    readonly BuilderDomain: "builder_domain";
    readonly BuilderDataSource: "builder_data_source";
    readonly BuilderWorkflowAction: "builder_workflow_action";
    readonly Team: "team";
    readonly TeamSubject: "team_subject";
    readonly License: "license";
};
export type ScopeTypeEnum = typeof ScopeTypeEnum[keyof typeof ScopeTypeEnum];
/**
 *
 * @export
 * @interface SecureFileServeDownload403Response
 */
export interface SecureFileServeDownload403Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof SecureFileServeDownload403Response
     */
    'error'?: SecureFileServeDownload403ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof SecureFileServeDownload403Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const SecureFileServeDownload403ResponseErrorEnum: {
    readonly ErrorSecureFileServeException: "ERROR_SECURE_FILE_SERVE_EXCEPTION";
};
export type SecureFileServeDownload403ResponseErrorEnum = typeof SecureFileServeDownload403ResponseErrorEnum[keyof typeof SecureFileServeDownload403ResponseErrorEnum];
/**
 *
 * @export
 * @interface SelectColorValueProviderConf
 */
export interface SelectColorValueProviderConf {
    /**
     * An id of a select field of the table. The value provider return the color of the selected option for each row.
     * @type {number}
     * @memberof SelectColorValueProviderConf
     */
    'field_id': number | null;
}
/**
 *
 * @export
 * @interface SelectOption
 */
export interface SelectOption {
    /**
     *
     * @type {number}
     * @memberof SelectOption
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof SelectOption
     */
    'value': string;
    /**
     *
     * @type {string}
     * @memberof SelectOption
     */
    'color': string;
}
/**
 *
 * @export
 * @interface SendPasswordResetEmail400Response
 */
export interface SendPasswordResetEmail400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof SendPasswordResetEmail400Response
     */
    'error'?: SendPasswordResetEmail400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof SendPasswordResetEmail400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const SendPasswordResetEmail400ResponseErrorEnum: {
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly HostnameIsNotAllowed: "ERROR_HOSTNAME_IS_NOT_ALLOWED";
};
export type SendPasswordResetEmail400ResponseErrorEnum = typeof SendPasswordResetEmail400ResponseErrorEnum[keyof typeof SendPasswordResetEmail400ResponseErrorEnum];
/**
 *
 * @export
 * @interface SendResetPasswordEmailBodyValidation
 */
export interface SendResetPasswordEmailBodyValidation {
    /**
     * The email address of the user that has requested a password reset.
     * @type {string}
     * @memberof SendResetPasswordEmailBodyValidation
     */
    'email': string;
    /**
     * The base URL where the user can reset his password. The reset token is going to be appended to the base_url (base_url \'/token\').
     * @type {string}
     * @memberof SendResetPasswordEmailBodyValidation
     */
    'base_url': string;
}
/**
 *
 * @export
 * @interface Sender
 */
export interface Sender {
    /**
     *
     * @type {number}
     * @memberof Sender
     */
    'id': number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof Sender
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof Sender
     */
    'first_name'?: string;
}
/**
 *
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * Indicates whether new users can create a new account when signing up.
     * @type {boolean}
     * @memberof Settings
     */
    'allow_new_signups'?: boolean;
    /**
     * Indicates whether invited users can create an account when signing up, even if allow_new_signups is disabled.
     * @type {boolean}
     * @memberof Settings
     */
    'allow_signups_via_workspace_invitations'?: boolean;
    /**
     * DEPRECATED: Please use the functionally identical `allow_signups_via_workspace_invitations` instead as this attribute is being removed in the future.
     * @type {boolean}
     * @memberof Settings
     */
    'allow_signups_via_group_invitations'?: boolean;
    /**
     * Indicates whether users can request a password reset link.
     * @type {boolean}
     * @memberof Settings
     */
    'allow_reset_password'?: boolean;
    /**
     * Indicates whether all users can create workspaces, or just staff.
     * @type {boolean}
     * @memberof Settings
     */
    'allow_global_workspace_creation'?: boolean;
    /**
     * DEPRECATED: Please use the functionally identical `allow_global_workspace_creation` instead as this attribute is being removed in the future.
     * @type {boolean}
     * @memberof Settings
     */
    'allow_global_group_creation'?: boolean;
    /**
     * Number of days after the last login for an account pending deletion to be deleted
     * @type {number}
     * @memberof Settings
     */
    'account_deletion_grace_delay'?: number;
    /**
     * Indicates that there are no admin users in the database yet, so in the frontend the signup form will be shown instead of the login page.
     * @type {boolean}
     * @memberof Settings
     */
    'show_admin_signup_page'?: boolean;
    /**
     * Runs a job once per day which calculates per workspace row counts and file storage usage, displayed on the admin workspace page.
     * @type {boolean}
     * @memberof Settings
     */
    'track_workspace_usage'?: boolean;
    /**
     * Indicates whether the `We need your help!` message will be shown on the dashboard
     * @type {boolean}
     * @memberof Settings
     */
    'show_baserow_help_request'?: boolean;
    /**
     * Co-branding logo that\'s placed next to the Baserow logo (176x29).
     * @type {UserFile}
     * @memberof Settings
     */
    'co_branding_logo'?: UserFile | null;
    /**
     *
     * @type {EmailVerificationEnum}
     * @memberof Settings
     */
    'email_verification'?: EmailVerificationEnum | null;
}
/**
 * When mixed in to a model serializer for an ExportJob this will add an url field with the actual usable url of the export job\'s file (if it has one).
 * @export
 * @interface SingleAuditLogExportJobRequest
 */
export interface SingleAuditLogExportJobRequest {
    /**
     *
     * @type {string}
     * @memberof SingleAuditLogExportJobRequest
     */
    'url': string;
    /**
     * The character set to use when creating the export file.  * `utf-8` - utf-8 * `iso-8859-6` - iso-8859-6 * `windows-1256` - windows-1256 * `iso-8859-4` - iso-8859-4 * `windows-1257` - windows-1257 * `iso-8859-14` - iso-8859-14 * `iso-8859-2` - iso-8859-2 * `windows-1250` - windows-1250 * `gbk` - gbk * `gb18030` - gb18030 * `big5` - big5 * `koi8-r` - koi8-r * `koi8-u` - koi8-u * `iso-8859-5` - iso-8859-5 * `windows-1251` - windows-1251 * `x-mac-cyrillic` - mac-cyrillic * `iso-8859-7` - iso-8859-7 * `windows-1253` - windows-1253 * `iso-8859-8` - iso-8859-8 * `windows-1255` - windows-1255 * `euc-jp` - euc-jp * `iso-2022-jp` - iso-2022-jp * `shift-jis` - shift-jis * `euc-kr` - euc-kr * `macintosh` - macintosh * `iso-8859-10` - iso-8859-10 * `iso-8859-16` - iso-8859-16 * `windows-874` - cp874 * `windows-1254` - windows-1254 * `windows-1258` - windows-1258 * `iso-8859-1` - iso-8859-1 * `windows-1252` - windows-1252 * `iso-8859-3` - iso-8859-3
     * @type {ExportCharsetEnum}
     * @memberof SingleAuditLogExportJobRequest
     */
    'export_charset'?: ExportCharsetEnum;
    /**
     * The value used to separate columns in the resulting csv file.  * `,` - , * `;` - ; * `|` - | * `tab` -   * `record_separator` -  * `unit_separator` - 
     * @type {CsvColumnSeparatorEnum}
     * @memberof SingleAuditLogExportJobRequest
     */
    'csv_column_separator'?: CsvColumnSeparatorEnum;
    /**
     * Whether or not to generate a header row at the top of the csv file.
     * @type {boolean}
     * @memberof SingleAuditLogExportJobRequest
     */
    'csv_first_row_header'?: boolean;
    /**
     * Optional: The user to filter the audit log by.
     * @type {number}
     * @memberof SingleAuditLogExportJobRequest
     */
    'filter_user_id'?: number;
    /**
     * Optional: The workspace to filter the audit log by.
     * @type {number}
     * @memberof SingleAuditLogExportJobRequest
     */
    'filter_workspace_id'?: number;
    /**
     * Optional: The action type to filter the audit log by.  * `create_group` - create_group * `delete_group` - delete_group * `update_group` - update_group * `order_groups` - order_groups * `create_application` - create_application * `update_application` - update_application * `delete_application` - delete_application * `order_applications` - order_applications * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_group_invitation` - create_group_invitation * `delete_group_invitation` - delete_group_invitation * `accept_group_invitation` - accept_group_invitation * `reject_group_invitation` - reject_group_invitation * `update_group_invitation_permissions` - update_group_invitation_permissions * `leave_group` - leave_group * `create_initial_workspace` - create_initial_workspace * `create_snapshot` - create_snapshot * `delete_snapshot` - delete_snapshot * `restore_snapshot` - restore_snapshot * `empty_trash` - empty_trash * `restore_from_trash` - restore_from_trash * `create_user` - create_user * `update_user` - update_user * `schedule_user_deletion` - schedule_user_deletion * `cancel_user_deletion` - cancel_user_deletion * `sign_in_user` - sign_in_user * `change_user_password` - change_user_password * `send_reset_user_password` - send_reset_user_password * `reset_user_password` - reset_user_password * `send_verify_email` - send_verify_email * `verify_email` - verify_email * `create_db_token` - create_db_token * `update_db_token_name` - update_db_token_name * `update_db_token_permissions` - update_db_token_permissions * `rotate_db_token_key` - rotate_db_token_key * `delete_db_token_key` - delete_db_token_key * `create_webhook` - create_webhook * `delete_webhook` - delete_webhook * `update_webhook` - update_webhook * `export_table` - export_table * `import_database_from_airtable` - import_database_from_airtable * `create_table` - create_table * `delete_table` - delete_table * `order_tables` - order_tables * `update_table` - update_table * `duplicate_table` - duplicate_table * `create_row` - create_row * `create_rows` - create_rows * `import_rows` - import_rows * `delete_row` - delete_row * `delete_rows` - delete_rows * `move_row` - move_row * `update_row` - update_row * `update_rows` - update_rows * `create_view` - create_view * `duplicate_view` - duplicate_view * `delete_view` - delete_view * `order_views` - order_views * `update_view` - update_view * `create_view_filter` - create_view_filter * `update_view_filter` - update_view_filter * `delete_view_filter` - delete_view_filter * `create_view_sort` - create_view_sort * `update_view_sort` - update_view_sort * `delete_view_sort` - delete_view_sort * `create_view_group` - create_view_group * `update_view_group` - update_view_group * `delete_view_group` - delete_view_group * `rotate_view_slug` - rotate_view_slug * `update_view_field_options` - update_view_field_options * `create_decoration` - create_decoration * `update_decoration` - update_decoration * `delete_decoration` - delete_decoration * `create_view_filter_group` - create_view_filter_group * `update_view_filter_group` - update_view_filter_group * `delete_view_filter_group` - delete_view_filter_group * `create_field` - create_field * `delete_field` - delete_field * `update_field` - update_field * `duplicate_field` - duplicate_field * `change_primary_field` - change_primary_field * `generate_formula_with_ai` - generate_formula_with_ai * `create_row_comment` - create_row_comment * `delete_row_comment` - delete_row_comment * `update_row_comment` - update_row_comment * `rotate_calendar_ical_view_slug` - rotate_calendar_ical_view_slug * `create_team` - create_team * `update_team` - update_team * `delete_team` - delete_team * `create_team_subject` - create_team_subject * `delete_team_subject` - delete_team_subject * `batch_assign_role` - batch_assign_role
     * @type {FilterActionTypeEnum}
     * @memberof SingleAuditLogExportJobRequest
     */
    'filter_action_type'?: FilterActionTypeEnum;
    /**
     * Optional: The start date to filter the audit log by.
     * @type {string}
     * @memberof SingleAuditLogExportJobRequest
     */
    'filter_from_timestamp'?: string;
    /**
     * Optional: The end date to filter the audit log by.
     * @type {string}
     * @memberof SingleAuditLogExportJobRequest
     */
    'filter_to_timestamp'?: string;
    /**
     * Optional: A comma separated list of column names to exclude from the export. Available options are `user_email, user_id, workspace_name, workspace_id, type, description, timestamp, ip_address`.
     * @type {string}
     * @memberof SingleAuditLogExportJobRequest
     */
    'exclude_columns'?: string;
}
/**
 * When mixed in to a model serializer for an ExportJob this will add an url field with the actual usable url of the export job\'s file (if it has one).
 * @export
 * @interface SingleAuditLogExportJobResponse
 */
export interface SingleAuditLogExportJobResponse {
    /**
     * The URL to download the exported file.
     * @type {string}
     * @memberof SingleAuditLogExportJobResponse
     */
    'url': string;
    /**
     * The character set to use when creating the export file.  * `utf-8` - utf-8 * `iso-8859-6` - iso-8859-6 * `windows-1256` - windows-1256 * `iso-8859-4` - iso-8859-4 * `windows-1257` - windows-1257 * `iso-8859-14` - iso-8859-14 * `iso-8859-2` - iso-8859-2 * `windows-1250` - windows-1250 * `gbk` - gbk * `gb18030` - gb18030 * `big5` - big5 * `koi8-r` - koi8-r * `koi8-u` - koi8-u * `iso-8859-5` - iso-8859-5 * `windows-1251` - windows-1251 * `x-mac-cyrillic` - mac-cyrillic * `iso-8859-7` - iso-8859-7 * `windows-1253` - windows-1253 * `iso-8859-8` - iso-8859-8 * `windows-1255` - windows-1255 * `euc-jp` - euc-jp * `iso-2022-jp` - iso-2022-jp * `shift-jis` - shift-jis * `euc-kr` - euc-kr * `macintosh` - macintosh * `iso-8859-10` - iso-8859-10 * `iso-8859-16` - iso-8859-16 * `windows-874` - cp874 * `windows-1254` - windows-1254 * `windows-1258` - windows-1258 * `iso-8859-1` - iso-8859-1 * `windows-1252` - windows-1252 * `iso-8859-3` - iso-8859-3
     * @type {ExportCharsetEnum}
     * @memberof SingleAuditLogExportJobResponse
     */
    'export_charset'?: ExportCharsetEnum;
    /**
     * The value used to separate columns in the resulting csv file.  * `,` - , * `;` - ; * `|` - | * `tab` -   * `record_separator` -  * `unit_separator` - 
     * @type {CsvColumnSeparatorEnum}
     * @memberof SingleAuditLogExportJobResponse
     */
    'csv_column_separator'?: CsvColumnSeparatorEnum;
    /**
     * Whether or not to generate a header row at the top of the csv file.
     * @type {boolean}
     * @memberof SingleAuditLogExportJobResponse
     */
    'csv_first_row_header'?: boolean;
    /**
     * Optional: The user to filter the audit log by.
     * @type {number}
     * @memberof SingleAuditLogExportJobResponse
     */
    'filter_user_id'?: number;
    /**
     * Optional: The workspace to filter the audit log by.
     * @type {number}
     * @memberof SingleAuditLogExportJobResponse
     */
    'filter_workspace_id'?: number;
    /**
     * Optional: The action type to filter the audit log by.  * `create_group` - create_group * `delete_group` - delete_group * `update_group` - update_group * `order_groups` - order_groups * `create_application` - create_application * `update_application` - update_application * `delete_application` - delete_application * `order_applications` - order_applications * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_group_invitation` - create_group_invitation * `delete_group_invitation` - delete_group_invitation * `accept_group_invitation` - accept_group_invitation * `reject_group_invitation` - reject_group_invitation * `update_group_invitation_permissions` - update_group_invitation_permissions * `leave_group` - leave_group * `create_initial_workspace` - create_initial_workspace * `create_snapshot` - create_snapshot * `delete_snapshot` - delete_snapshot * `restore_snapshot` - restore_snapshot * `empty_trash` - empty_trash * `restore_from_trash` - restore_from_trash * `create_user` - create_user * `update_user` - update_user * `schedule_user_deletion` - schedule_user_deletion * `cancel_user_deletion` - cancel_user_deletion * `sign_in_user` - sign_in_user * `change_user_password` - change_user_password * `send_reset_user_password` - send_reset_user_password * `reset_user_password` - reset_user_password * `send_verify_email` - send_verify_email * `verify_email` - verify_email * `create_db_token` - create_db_token * `update_db_token_name` - update_db_token_name * `update_db_token_permissions` - update_db_token_permissions * `rotate_db_token_key` - rotate_db_token_key * `delete_db_token_key` - delete_db_token_key * `create_webhook` - create_webhook * `delete_webhook` - delete_webhook * `update_webhook` - update_webhook * `export_table` - export_table * `import_database_from_airtable` - import_database_from_airtable * `create_table` - create_table * `delete_table` - delete_table * `order_tables` - order_tables * `update_table` - update_table * `duplicate_table` - duplicate_table * `create_row` - create_row * `create_rows` - create_rows * `import_rows` - import_rows * `delete_row` - delete_row * `delete_rows` - delete_rows * `move_row` - move_row * `update_row` - update_row * `update_rows` - update_rows * `create_view` - create_view * `duplicate_view` - duplicate_view * `delete_view` - delete_view * `order_views` - order_views * `update_view` - update_view * `create_view_filter` - create_view_filter * `update_view_filter` - update_view_filter * `delete_view_filter` - delete_view_filter * `create_view_sort` - create_view_sort * `update_view_sort` - update_view_sort * `delete_view_sort` - delete_view_sort * `create_view_group` - create_view_group * `update_view_group` - update_view_group * `delete_view_group` - delete_view_group * `rotate_view_slug` - rotate_view_slug * `update_view_field_options` - update_view_field_options * `create_decoration` - create_decoration * `update_decoration` - update_decoration * `delete_decoration` - delete_decoration * `create_view_filter_group` - create_view_filter_group * `update_view_filter_group` - update_view_filter_group * `delete_view_filter_group` - delete_view_filter_group * `create_field` - create_field * `delete_field` - delete_field * `update_field` - update_field * `duplicate_field` - duplicate_field * `change_primary_field` - change_primary_field * `generate_formula_with_ai` - generate_formula_with_ai * `create_row_comment` - create_row_comment * `delete_row_comment` - delete_row_comment * `update_row_comment` - update_row_comment * `rotate_calendar_ical_view_slug` - rotate_calendar_ical_view_slug * `create_team` - create_team * `update_team` - update_team * `delete_team` - delete_team * `create_team_subject` - create_team_subject * `delete_team_subject` - delete_team_subject * `batch_assign_role` - batch_assign_role
     * @type {FilterActionTypeEnum}
     * @memberof SingleAuditLogExportJobResponse
     */
    'filter_action_type'?: FilterActionTypeEnum;
    /**
     * Optional: The start date to filter the audit log by.
     * @type {string}
     * @memberof SingleAuditLogExportJobResponse
     */
    'filter_from_timestamp'?: string;
    /**
     * Optional: The end date to filter the audit log by.
     * @type {string}
     * @memberof SingleAuditLogExportJobResponse
     */
    'filter_to_timestamp'?: string;
    /**
     * Optional: A comma separated list of column names to exclude from the export. Available options are `user_email, user_id, workspace_name, workspace_id, type, description, timestamp, ip_address`.
     * @type {string}
     * @memberof SingleAuditLogExportJobResponse
     */
    'exclude_columns'?: string;
    /**
     * The date and time when the export job was created.
     * @type {string}
     * @memberof SingleAuditLogExportJobResponse
     */
    'created_on': string;
    /**
     * The name of the file that was created by the export job.
     * @type {string}
     * @memberof SingleAuditLogExportJobResponse
     */
    'exported_file_name': string;
}
/**
 *
 * @export
 * @interface SingleDuplicateApplicationJobType
 */
export interface SingleDuplicateApplicationJobType {
    /**
     *
     * @type {number}
     * @memberof SingleDuplicateApplicationJobType
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof SingleDuplicateApplicationJobType
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof SingleDuplicateApplicationJobType
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof SingleDuplicateApplicationJobType
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof SingleDuplicateApplicationJobType
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {ApplicationApplication}
     * @memberof SingleDuplicateApplicationJobType
     */
    'original_application': ApplicationApplication;
    /**
     *
     * @type {ApplicationApplication}
     * @memberof SingleDuplicateApplicationJobType
     */
    'duplicated_application': ApplicationApplication;
}
/**
 *
 * @export
 * @interface SingleDuplicateFieldJobType
 */
export interface SingleDuplicateFieldJobType {
    /**
     *
     * @type {number}
     * @memberof SingleDuplicateFieldJobType
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof SingleDuplicateFieldJobType
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof SingleDuplicateFieldJobType
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof SingleDuplicateFieldJobType
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof SingleDuplicateFieldJobType
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {Field}
     * @memberof SingleDuplicateFieldJobType
     */
    'original_field': Field;
    /**
     *
     * @type {FieldSerializerWithRelatedFields}
     * @memberof SingleDuplicateFieldJobType
     */
    'duplicated_field': FieldSerializerWithRelatedFields;
}
/**
 *
 * @export
 * @interface SingleDuplicatePageJobType
 */
export interface SingleDuplicatePageJobType {
    /**
     *
     * @type {number}
     * @memberof SingleDuplicatePageJobType
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof SingleDuplicatePageJobType
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof SingleDuplicatePageJobType
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof SingleDuplicatePageJobType
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof SingleDuplicatePageJobType
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {Page}
     * @memberof SingleDuplicatePageJobType
     */
    'original_page': Page;
    /**
     *
     * @type {Page}
     * @memberof SingleDuplicatePageJobType
     */
    'duplicated_page': Page;
}
/**
 *
 * @export
 * @interface SingleDuplicateTableJobType
 */
export interface SingleDuplicateTableJobType {
    /**
     *
     * @type {number}
     * @memberof SingleDuplicateTableJobType
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof SingleDuplicateTableJobType
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof SingleDuplicateTableJobType
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof SingleDuplicateTableJobType
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof SingleDuplicateTableJobType
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {Table}
     * @memberof SingleDuplicateTableJobType
     */
    'original_table': Table;
    /**
     *
     * @type {Table}
     * @memberof SingleDuplicateTableJobType
     */
    'duplicated_table': Table;
}
/**
 *
 * @export
 * @interface SingleFileImportJobSerializerClass
 */
export interface SingleFileImportJobSerializerClass {
    /**
     *
     * @type {number}
     * @memberof SingleFileImportJobSerializerClass
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof SingleFileImportJobSerializerClass
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof SingleFileImportJobSerializerClass
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof SingleFileImportJobSerializerClass
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof SingleFileImportJobSerializerClass
     */
    'human_readable_error'?: string;
    /**
     * Database id where the table will be created.
     * @type {number}
     * @memberof SingleFileImportJobSerializerClass
     */
    'database_id': number;
    /**
     * The name of the new table.
     * @type {string}
     * @memberof SingleFileImportJobSerializerClass
     */
    'name'?: string;
    /**
     * Table id where the data will be imported.
     * @type {number}
     * @memberof SingleFileImportJobSerializerClass
     */
    'table_id'?: number;
    /**
     *
     * @type {boolean}
     * @memberof SingleFileImportJobSerializerClass
     */
    'first_row_header'?: boolean;
    /**
     * Import error report.
     * @type {Report}
     * @memberof SingleFileImportJobSerializerClass
     */
    'report': Report;
}
/**
 *
 * @export
 * @interface SingleInstallTemplateJobType
 */
export interface SingleInstallTemplateJobType {
    /**
     *
     * @type {number}
     * @memberof SingleInstallTemplateJobType
     */
    'id': number;
    /**
     * The type of the job.
     * @type {string}
     * @memberof SingleInstallTemplateJobType
     */
    'type': string;
    /**
     * A percentage indicating how far along the job is. 100 means that it\'s finished.
     * @type {number}
     * @memberof SingleInstallTemplateJobType
     */
    'progress_percentage': number;
    /**
     * Indicates the state of the import job.
     * @type {string}
     * @memberof SingleInstallTemplateJobType
     */
    'state': string;
    /**
     * A human readable error message indicating what went wrong.
     * @type {string}
     * @memberof SingleInstallTemplateJobType
     */
    'human_readable_error'?: string;
    /**
     *
     * @type {Workspace}
     * @memberof SingleInstallTemplateJobType
     */
    'workspace': Workspace;
    /**
     *
     * @type {Template}
     * @memberof SingleInstallTemplateJobType
     */
    'template': Template;
    /**
     *
     * @type {any}
     * @memberof SingleInstallTemplateJobType
     */
    'installed_applications': any;
    /**
     *
     * @type {Workspace}
     * @memberof SingleInstallTemplateJobType
     */
    'group': Workspace;
}
/**
 *
 * @export
 * @interface SingleSelectFieldCreateField
 */
export interface SingleSelectFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof SingleSelectFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof SingleSelectFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof SingleSelectFieldCreateField
     */
    'description'?: string | null;
    /**
     *
     * @type {Array<SelectOption>}
     * @memberof SingleSelectFieldCreateField
     */
    'select_options'?: Array<SelectOption>;
}
/**
 *
 * @export
 * @interface SingleSelectFieldField
 */
export interface SingleSelectFieldField {
    /**
     *
     * @type {number}
     * @memberof SingleSelectFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof SingleSelectFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof SingleSelectFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof SingleSelectFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof SingleSelectFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof SingleSelectFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof SingleSelectFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof SingleSelectFieldField
     */
    'description'?: string | null;
    /**
     *
     * @type {Array<SelectOption>}
     * @memberof SingleSelectFieldField
     */
    'select_options'?: Array<SelectOption>;
}
/**
 *
 * @export
 * @interface SingleSelectFieldFieldSerializerWithRelatedFields
 */
export interface SingleSelectFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     *
     * @type {Array<SelectOption>}
     * @memberof SingleSelectFieldFieldSerializerWithRelatedFields
     */
    'select_options'?: Array<SelectOption>;
}
/**
 *
 * @export
 * @interface SingleSelectFieldUpdateField
 */
export interface SingleSelectFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof SingleSelectFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof SingleSelectFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof SingleSelectFieldUpdateField
     */
    'description'?: string | null;
    /**
     *
     * @type {Array<SelectOption>}
     * @memberof SingleSelectFieldUpdateField
     */
    'select_options'?: Array<SelectOption>;
}
/**
 *
 * @export
 * @interface Snapshot
 */
export interface Snapshot {
    /**
     *
     * @type {number}
     * @memberof Snapshot
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Snapshot
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof Snapshot
     */
    'snapshot_from_application': number;
    /**
     *
     * @type {User}
     * @memberof Snapshot
     */
    'created_by': User;
    /**
     *
     * @type {string}
     * @memberof Snapshot
     */
    'created_at': string;
}
/**
 * * `url` - Url * `embed` - Embed
 * @export
 * @enum {string}
 */
export declare const SourceTypeEnum: {
    readonly Url: "url";
    readonly Embed: "embed";
};
export type SourceTypeEnum = typeof SourceTypeEnum[keyof typeof SourceTypeEnum];
/**
 * * `pending` - pending * `exporting` - exporting * `cancelled` - cancelled * `finished` - finished * `failed` - failed * `expired` - expired
 * @export
 * @enum {string}
 */
export declare const StateEnum: {
    readonly Pending: "pending";
    readonly Exporting: "exporting";
    readonly Cancelled: "cancelled";
    readonly Finished: "finished";
    readonly Failed: "failed";
    readonly Expired: "expired";
};
export type StateEnum = typeof StateEnum[keyof typeof StateEnum];
/**
 * * `none` - None * `color` - Color * `image` - Image
 * @export
 * @enum {string}
 */
export declare const StyleBackgroundEnum: {
    readonly None: "none";
    readonly Color: "color";
    readonly Image: "image";
};
export type StyleBackgroundEnum = typeof StyleBackgroundEnum[keyof typeof StyleBackgroundEnum];
/**
 * * `tile` - Tile * `fill` - Fill * `fit` - Fit
 * @export
 * @enum {string}
 */
export declare const StyleBackgroundModeEnum: {
    readonly Tile: "tile";
    readonly Fill: "fill";
    readonly Fit: "fit";
};
export type StyleBackgroundModeEnum = typeof StyleBackgroundModeEnum[keyof typeof StyleBackgroundModeEnum];
/**
 * * `star` - Star * `heart` - Heart * `thumbs-up` - Thumbs-up * `flag` - Flags * `smile` - Smile
 * @export
 * @enum {string}
 */
export declare const StyleEnum: {
    readonly Star: "star";
    readonly Heart: "heart";
    readonly ThumbsUp: "thumbs-up";
    readonly Flag: "flag";
    readonly Smile: "smile";
};
export type StyleEnum = typeof StyleEnum[keyof typeof StyleEnum];
/**
 * * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
 * @export
 * @enum {string}
 */
export declare const StyleWidthEnum: {
    readonly Full: "full";
    readonly FullWidth: "full-width";
    readonly Normal: "normal";
    readonly Medium: "medium";
    readonly Small: "small";
};
export type StyleWidthEnum = typeof StyleWidthEnum[keyof typeof StyleWidthEnum];
/**
 *
 * @export
 * @interface SubDomainCreateDomain
 */
export interface SubDomainCreateDomain {
    /**
     * The type of the domain.  * `custom` - custom * `sub_domain` - sub_domain
     * @type {Type509Enum}
     * @memberof SubDomainCreateDomain
     */
    'type': Type509Enum;
    /**
     *
     * @type {string}
     * @memberof SubDomainCreateDomain
     */
    'domain_name': string;
}
/**
 *
 * @export
 * @interface SubDomainDomain
 */
export interface SubDomainDomain {
    /**
     *
     * @type {number}
     * @memberof SubDomainDomain
     */
    'id': number;
    /**
     * The type of the domain.
     * @type {string}
     * @memberof SubDomainDomain
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof SubDomainDomain
     */
    'domain_name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof SubDomainDomain
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof SubDomainDomain
     */
    'builder_id': number;
    /**
     * Last publication date of this domain
     * @type {string}
     * @memberof SubDomainDomain
     */
    'last_published'?: string | null;
}
/**
 * * `auth.User` - auth.User
 * @export
 * @enum {string}
 */
export declare const SubjectType0b2Enum: {
    readonly AuthUser: "auth.User";
};
export type SubjectType0b2Enum = typeof SubjectType0b2Enum[keyof typeof SubjectType0b2Enum];
/**
 * * `auth.User` - auth.User * `anonymous` - anonymous * `user_source.user` - user_source.user * `core.Token` - core.Token * `baserow_enterprise.Team` - baserow_enterprise.Team
 * @export
 * @enum {string}
 */
export declare const SubjectType398Enum: {
    readonly AuthUser: "auth.User";
    readonly Anonymous: "anonymous";
    readonly UserSourceUser: "user_source.user";
    readonly CoreToken: "core.Token";
    readonly BaserowEnterpriseTeam: "baserow_enterprise.Team";
};
export type SubjectType398Enum = typeof SubjectType398Enum[keyof typeof SubjectType398Enum];
/**
 *
 * @export
 * @interface SubjectUser
 */
export interface SubjectUser {
    /**
     *
     * @type {number}
     * @memberof SubjectUser
     */
    'id': number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof SubjectUser
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof SubjectUser
     */
    'first_name': string;
    /**
     *
     * @type {string}
     * @memberof SubjectUser
     */
    'email': string;
}
/**
 * * `MESSAGE` - Message * `REDIRECT` - Redirect
 * @export
 * @enum {string}
 */
export declare const SubmitActionEnum: {
    readonly Message: "MESSAGE";
    readonly Redirect: "REDIRECT";
};
export type SubmitActionEnum = typeof SubmitActionEnum[keyof typeof SubmitActionEnum];
/**
 *
 * @export
 * @interface Table
 */
export interface Table {
    /**
     *
     * @type {number}
     * @memberof Table
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Table
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof Table
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof Table
     */
    'database_id': number;
}
/**
 * * `left` - Left * `center` - Center * `right` - Right
 * @export
 * @enum {string}
 */
export declare const TableCellAlignmentEnum: {
    readonly Left: "left";
    readonly Center: "center";
    readonly Right: "right";
};
export type TableCellAlignmentEnum = typeof TableCellAlignmentEnum[keyof typeof TableCellAlignmentEnum];
/**
 *
 * @export
 * @interface TableCreate
 */
export interface TableCreate {
    /**
     *
     * @type {string}
     * @memberof TableCreate
     */
    'name': string;
    /**
     * A list of rows that needs to be created as initial table data. Each row is a list of values that are going to be added in the new table in the same order as provided.  Ex:  ```json [   [\"row1_field1_value\", \"row1_field2_value\"],   [\"row2_field1_value\", \"row2_field2_value\"], ] ``` for creating a two rows table with two fields.  If not provided, some example data is going to be created.
     * @type {Array<any>}
     * @memberof TableCreate
     */
    'data'?: Array<any>;
    /**
     * Indicates if the first provided row is the header. If true the field names are going to be the values of the first row. Otherwise they will be called \"Field N\"
     * @type {boolean}
     * @memberof TableCreate
     */
    'first_row_header'?: boolean;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface TableElementCreateElement
 */
export interface TableElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof TableElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof TableElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof TableElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof TableElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonTableConfigBlock}
     * @memberof TableElementCreateElement
     */
    'styles'?: ButtonTableConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof TableElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof TableElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof TableElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof TableElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof TableElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof TableElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof TableElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof TableElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof TableElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The data source we want to show in the element for. Only data_sources that return list are allowed.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'data_source_id'?: number | null;
    /**
     * The amount item loaded with each page.
     * @type {number}
     * @memberof TableElementCreateElement
     */
    'items_per_page'?: number;
    /**
     * The label of the show more button
     * @type {string}
     * @memberof TableElementCreateElement
     */
    'button_load_more_label'?: string;
    /**
     *
     * @type {Array<CollectionField>}
     * @memberof TableElementCreateElement
     */
    'fields'?: Array<CollectionField>;
    /**
     * The table orientation (horizontal or vertical) for each device type
     * @type {any}
     * @memberof TableElementCreateElement
     */
    'orientation'?: any;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface TableElementElement
 */
export interface TableElementElement {
    /**
     *
     * @type {number}
     * @memberof TableElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof TableElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof TableElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof TableElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof TableElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof TableElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof TableElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonTableConfigBlock}
     * @memberof TableElementElement
     */
    'styles'?: ButtonTableConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof TableElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof TableElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof TableElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof TableElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof TableElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof TableElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof TableElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof TableElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof TableElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof TableElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof TableElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof TableElementElement
     */
    'roles'?: any;
    /**
     * The data source we want to show in the element for. Only data_sources that return list are allowed.
     * @type {number}
     * @memberof TableElementElement
     */
    'data_source_id'?: number | null;
    /**
     * The amount item loaded with each page.
     * @type {number}
     * @memberof TableElementElement
     */
    'items_per_page'?: number;
    /**
     * The label of the show more button
     * @type {string}
     * @memberof TableElementElement
     */
    'button_load_more_label'?: string;
    /**
     *
     * @type {Array<CollectionField>}
     * @memberof TableElementElement
     */
    'fields'?: Array<CollectionField>;
    /**
     * The table orientation (horizontal or vertical) for each device type
     * @type {any}
     * @memberof TableElementElement
     */
    'orientation'?: any;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface TableElementPublicElement
 */
export interface TableElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof TableElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof TableElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof TableElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof TableElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonTableConfigBlock}
     * @memberof TableElementPublicElement
     */
    'styles'?: ButtonTableConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof TableElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof TableElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof TableElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof TableElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof TableElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof TableElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof TableElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof TableElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof TableElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof TableElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof TableElementPublicElement
     */
    'roles'?: any;
    /**
     * The data source we want to show in the element for. Only data_sources that return list are allowed.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'data_source_id'?: number | null;
    /**
     * The amount item loaded with each page.
     * @type {number}
     * @memberof TableElementPublicElement
     */
    'items_per_page'?: number;
    /**
     * The label of the show more button
     * @type {string}
     * @memberof TableElementPublicElement
     */
    'button_load_more_label'?: string;
    /**
     *
     * @type {Array<CollectionField>}
     * @memberof TableElementPublicElement
     */
    'fields'?: Array<CollectionField>;
    /**
     * The table orientation (horizontal or vertical) for each device type
     * @type {any}
     * @memberof TableElementPublicElement
     */
    'orientation'?: any;
}
/**
 *
 * @export
 * @interface TableElementUpdateElement
 */
export interface TableElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof TableElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {ButtonTableConfigBlock}
     * @memberof TableElementUpdateElement
     */
    'styles'?: ButtonTableConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof TableElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof TableElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof TableElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof TableElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof TableElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof TableElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof TableElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof TableElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof TableElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof TableElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof TableElementUpdateElement
     */
    'roles'?: any;
    /**
     * The data source we want to show in the element for. Only data_sources that return list are allowed.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'data_source_id'?: number | null;
    /**
     * The amount item loaded with each page.
     * @type {number}
     * @memberof TableElementUpdateElement
     */
    'items_per_page'?: number;
    /**
     * The label of the show more button
     * @type {string}
     * @memberof TableElementUpdateElement
     */
    'button_load_more_label'?: string;
    /**
     *
     * @type {Array<CollectionField>}
     * @memberof TableElementUpdateElement
     */
    'fields'?: Array<CollectionField>;
    /**
     * The table orientation (horizontal or vertical) for each device type
     * @type {any}
     * @memberof TableElementUpdateElement
     */
    'orientation'?: any;
}
/**
 *
 * @export
 * @interface TableImport
 */
export interface TableImport {
    /**
     * A list of rows you want to add to the specified table. Each row is a list of values, one for each **writable** field. The field values must be ordered according to the field order in the table. All values must be compatible with the corresponding field type.  Ex:  ```json [   [\"row1_field1_value\", \"row1_field2_value\"],   [\"row2_field1_value\", \"row2_field2_value\"], ] ``` for adding two rows to a table with two writable fields.
     * @type {Array<any>}
     * @memberof TableImport
     */
    'data': Array<any>;
}
/**
 *
 * @export
 * @interface TableSerializerWithFields
 */
export interface TableSerializerWithFields {
    /**
     *
     * @type {number}
     * @memberof TableSerializerWithFields
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof TableSerializerWithFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof TableSerializerWithFields
     */
    'order': number;
    /**
     *
     * @type {number}
     * @memberof TableSerializerWithFields
     */
    'database_id': number;
    /**
     * Fields of this table
     * @type {Array<LocalBaserowField>}
     * @memberof TableSerializerWithFields
     */
    'fields': Array<LocalBaserowField>;
}
/**
 *
 * @export
 * @interface TableThemeConfigBlock
 */
export interface TableThemeConfigBlock {
    /**
     * The color of the table border
     * @type {string}
     * @memberof TableThemeConfigBlock
     */
    'table_border_color'?: string;
    /**
     * Table border size
     * @type {number}
     * @memberof TableThemeConfigBlock
     */
    'table_border_size'?: number;
    /**
     * Table border radius
     * @type {number}
     * @memberof TableThemeConfigBlock
     */
    'table_border_radius'?: number;
    /**
     * The background color of the table header cells
     * @type {string}
     * @memberof TableThemeConfigBlock
     */
    'table_header_background_color'?: string;
    /**
     * The text color of the table header cells
     * @type {string}
     * @memberof TableThemeConfigBlock
     */
    'table_header_text_color'?: string;
    /**
     * The font size of the header cells
     * @type {number}
     * @memberof TableThemeConfigBlock
     */
    'table_header_font_size'?: number;
    /**
     * The font family of the table header cells
     * @type {string}
     * @memberof TableThemeConfigBlock
     */
    'table_header_font_family'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof TableThemeConfigBlock
     */
    'table_header_text_alignment'?: TableCellAlignmentEnum;
    /**
     * The background color of the table cells
     * @type {string}
     * @memberof TableThemeConfigBlock
     */
    'table_cell_background_color'?: string;
    /**
     * The alternate background color of the table cells
     * @type {string}
     * @memberof TableThemeConfigBlock
     */
    'table_cell_alternate_background_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof TableThemeConfigBlock
     */
    'table_cell_alignment'?: TableCellAlignmentEnum;
    /**
     * Table cell vertical padding
     * @type {number}
     * @memberof TableThemeConfigBlock
     */
    'table_cell_vertical_padding'?: number;
    /**
     * Table cell horizontal padding
     * @type {number}
     * @memberof TableThemeConfigBlock
     */
    'table_cell_horizontal_padding'?: number;
    /**
     * The color of the table vertical separator
     * @type {string}
     * @memberof TableThemeConfigBlock
     */
    'table_vertical_separator_color'?: string;
    /**
     * Table vertical separator size
     * @type {number}
     * @memberof TableThemeConfigBlock
     */
    'table_vertical_separator_size'?: number;
    /**
     * The color of the table horizontal separator
     * @type {string}
     * @memberof TableThemeConfigBlock
     */
    'table_horizontal_separator_color'?: string;
    /**
     * Table horizontal separator size
     * @type {number}
     * @memberof TableThemeConfigBlock
     */
    'table_horizontal_separator_size'?: number;
}
/**
 *
 * @export
 * @interface TableWebhook
 */
export interface TableWebhook {
    /**
     *
     * @type {number}
     * @memberof TableWebhook
     */
    'id': number;
    /**
     * A list containing the events that will trigger this webhook.
     * @type {{ [key: string]: any; }}
     * @memberof TableWebhook
     */
    'events': {
        [key: string]: any;
    };
    /**
     * The additional headers as an object where the key is the name and the value the value.
     * @type {{ [key: string]: any; }}
     * @memberof TableWebhook
     */
    'headers': {
        [key: string]: any;
    };
    /**
     * All the calls that this webhook made.
     * @type {Array<TableWebhookCall>}
     * @memberof TableWebhook
     */
    'calls': Array<TableWebhookCall>;
    /**
     *
     * @type {string}
     * @memberof TableWebhook
     */
    'created_on': string;
    /**
     *
     * @type {string}
     * @memberof TableWebhook
     */
    'updated_on': string;
    /**
     * Indicates whether the field names must be used as payload key instead of the id.
     * @type {boolean}
     * @memberof TableWebhook
     */
    'use_user_field_names'?: boolean;
    /**
     * The URL that must be called when the webhook is triggered.
     * @type {string}
     * @memberof TableWebhook
     */
    'url': string;
    /**
     * The request method that be used when the event occurs.  * `POST` - Post * `GET` - Get * `PUT` - Put * `PATCH` - Patch * `DELETE` - Delete
     * @type {RequestMethodEnum}
     * @memberof TableWebhook
     */
    'request_method'?: RequestMethodEnum;
    /**
     * An internal name of the webhook.
     * @type {string}
     * @memberof TableWebhook
     */
    'name': string;
    /**
     * Indicates whether this webhook should listen to all events.
     * @type {boolean}
     * @memberof TableWebhook
     */
    'include_all_events'?: boolean;
    /**
     * The amount of failed webhook calls.
     * @type {number}
     * @memberof TableWebhook
     */
    'failed_triggers'?: number;
    /**
     * Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated.
     * @type {boolean}
     * @memberof TableWebhook
     */
    'active'?: boolean;
}
/**
 *
 * @export
 * @interface TableWebhookCall
 */
export interface TableWebhookCall {
    /**
     *
     * @type {number}
     * @memberof TableWebhookCall
     */
    'id': number;
    /**
     * Event ID where the call originated from.
     * @type {string}
     * @memberof TableWebhookCall
     */
    'event_id': string;
    /**
     *
     * @type {string}
     * @memberof TableWebhookCall
     */
    'event_type': string;
    /**
     *
     * @type {string}
     * @memberof TableWebhookCall
     */
    'called_time'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TableWebhookCall
     */
    'called_url': string;
    /**
     * A text copy of the request headers and body.
     * @type {string}
     * @memberof TableWebhookCall
     */
    'request'?: string | null;
    /**
     * A text copy of the response headers and body.
     * @type {string}
     * @memberof TableWebhookCall
     */
    'response'?: string | null;
    /**
     * The HTTP response status code.
     * @type {number}
     * @memberof TableWebhookCall
     */
    'response_status'?: number | null;
    /**
     * An internal error reflecting what went wrong.
     * @type {string}
     * @memberof TableWebhookCall
     */
    'error'?: string | null;
}
/**
 *
 * @export
 * @interface TableWebhookCreateRequest
 */
export interface TableWebhookCreateRequest {
    /**
     * The URL that must be called when the webhook is triggered.
     * @type {string}
     * @memberof TableWebhookCreateRequest
     */
    'url': string;
    /**
     * Indicates whether this webhook should listen to all events.
     * @type {boolean}
     * @memberof TableWebhookCreateRequest
     */
    'include_all_events'?: boolean;
    /**
     * A list containing the events that will trigger this webhook.
     * @type {Array<Events29bEnum>}
     * @memberof TableWebhookCreateRequest
     */
    'events'?: Array<Events29bEnum>;
    /**
     * The request method that be used when the event occurs.  * `POST` - Post * `GET` - Get * `PUT` - Put * `PATCH` - Patch * `DELETE` - Delete
     * @type {RequestMethodEnum}
     * @memberof TableWebhookCreateRequest
     */
    'request_method'?: RequestMethodEnum;
    /**
     * The additional headers as an object where the key is the name and the value the value.
     * @type {{ [key: string]: any; }}
     * @memberof TableWebhookCreateRequest
     */
    'headers'?: {
        [key: string]: any;
    };
    /**
     * An internal name of the webhook.
     * @type {string}
     * @memberof TableWebhookCreateRequest
     */
    'name': string;
    /**
     * Indicates whether the field names must be used as payload key instead of the id.
     * @type {boolean}
     * @memberof TableWebhookCreateRequest
     */
    'use_user_field_names'?: boolean;
}
/**
 *
 * @export
 * @interface TableWebhookTestCallRequest
 */
export interface TableWebhookTestCallRequest {
    /**
     * The URL that must be called when the webhook is triggered.
     * @type {string}
     * @memberof TableWebhookTestCallRequest
     */
    'url': string;
    /**
     * The event type that must be used for the test call.  * `rows.created` - rows.created * `row.created` - row.created * `rows.updated` - rows.updated * `row.updated` - row.updated * `rows.deleted` - rows.deleted * `row.deleted` - row.deleted
     * @type {EventTypeEnum}
     * @memberof TableWebhookTestCallRequest
     */
    'event_type': EventTypeEnum;
    /**
     * The request method that be used when the event occurs.  * `POST` - Post * `GET` - Get * `PUT` - Put * `PATCH` - Patch * `DELETE` - Delete
     * @type {RequestMethodEnum}
     * @memberof TableWebhookTestCallRequest
     */
    'request_method'?: RequestMethodEnum;
    /**
     * The additional headers as an object where the key is the name and the value the value.
     * @type {{ [key: string]: any; }}
     * @memberof TableWebhookTestCallRequest
     */
    'headers'?: {
        [key: string]: any;
    };
    /**
     * Indicates whether the field names must be used as payload key instead of the id.
     * @type {boolean}
     * @memberof TableWebhookTestCallRequest
     */
    'use_user_field_names'?: boolean;
}
/**
 *
 * @export
 * @interface TableWebhookTestCallResponse
 */
export interface TableWebhookTestCallResponse {
    /**
     * A text copy of the request headers and body.
     * @type {string}
     * @memberof TableWebhookTestCallResponse
     */
    'request': string;
    /**
     * A text copy of the response headers and body.
     * @type {string}
     * @memberof TableWebhookTestCallResponse
     */
    'response': string;
    /**
     * The HTTP response status code.
     * @type {number}
     * @memberof TableWebhookTestCallResponse
     */
    'status_code': number;
    /**
     * Indicates whether the provided URL could be reached.
     * @type {boolean}
     * @memberof TableWebhookTestCallResponse
     */
    'is_unreachable': boolean;
}
/**
 * * `self` - Self * `blank` - Blank
 * @export
 * @enum {string}
 */
export declare const TargetEnum: {
    readonly Self: "self";
    readonly Blank: "blank";
};
export type TargetEnum = typeof TargetEnum[keyof typeof TargetEnum];
/**
 * Mixin to a DRF serializer class to raise an exception if data with unknown fields is provided to the serializer.
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * A human friendly name for this team.
     * @type {string}
     * @memberof Team
     */
    'name': string;
    /**
     * The uid of the role you want to assign to the team in the given workspace. You can omit this property if you want to remove the role.
     * @type {string}
     * @memberof Team
     */
    'default_role'?: string | null;
    /**
     * An array of subject ID/type objects to be used during team create and update.
     * @type {Array<TeamSubject>}
     * @memberof Team
     */
    'subjects'?: Array<TeamSubject>;
}
/**
 *
 * @export
 * @interface TeamResponse
 */
export interface TeamResponse {
    /**
     *
     * @type {number}
     * @memberof TeamResponse
     */
    'id': number;
    /**
     * A human friendly name for this team.
     * @type {string}
     * @memberof TeamResponse
     */
    'name': string;
    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     * @type {number}
     * @memberof TeamResponse
     */
    'group': number;
    /**
     * The workspace that this team belongs to.
     * @type {number}
     * @memberof TeamResponse
     */
    'workspace': number;
    /**
     *
     * @type {string}
     * @memberof TeamResponse
     */
    'created_on': string;
    /**
     *
     * @type {string}
     * @memberof TeamResponse
     */
    'updated_on': string;
    /**
     * The uid of the role this team has in its workspace.
     * @type {string}
     * @memberof TeamResponse
     */
    'default_role'?: string;
    /**
     * The amount of subjects (e.g. users) that are currently assigned to this team.
     * @type {number}
     * @memberof TeamResponse
     */
    'subject_count': number;
    /**
     * A sample, by default 10, of the most recent subjects to join this team.
     * @type {Array<TeamSampleSubject>}
     * @memberof TeamResponse
     */
    'subject_sample'?: Array<TeamSampleSubject>;
}
/**
 *
 * @export
 * @interface TeamSampleSubject
 */
export interface TeamSampleSubject {
    /**
     * The subject\'s unique identifier.
     * @type {number}
     * @memberof TeamSampleSubject
     */
    'subject_id': number;
    /**
     * The type of subject who belongs to the team.  * `auth.User` - auth.User
     * @type {SubjectType0b2Enum}
     * @memberof TeamSampleSubject
     */
    'subject_type': SubjectType0b2Enum;
    /**
     * The subject\'s label. Defaults to a user\'s first name.
     * @type {string}
     * @memberof TeamSampleSubject
     */
    'subject_label': string;
    /**
     * The team subject unique identifier.
     * @type {number}
     * @memberof TeamSampleSubject
     */
    'team_subject_id': number;
}
/**
 * Mixin to a DRF serializer class to raise an exception if data with unknown fields is provided to the serializer.
 * @export
 * @interface TeamSubject
 */
export interface TeamSubject {
    /**
     *
     * @type {number}
     * @memberof TeamSubject
     */
    'id': number;
    /**
     * The subject\'s unique identifier.
     * @type {number}
     * @memberof TeamSubject
     */
    'subject_id'?: number;
    /**
     * The user subject\'s email address.
     * @type {string}
     * @memberof TeamSubject
     */
    'subject_user_email'?: string;
    /**
     * The type of subject that is being invited.  * `auth.User` - auth.User
     * @type {SubjectType0b2Enum}
     * @memberof TeamSubject
     */
    'subject_type': SubjectType0b2Enum;
}
/**
 *
 * @export
 * @interface TeamSubjectResponse
 */
export interface TeamSubjectResponse {
    /**
     *
     * @type {number}
     * @memberof TeamSubjectResponse
     */
    'id': number;
    /**
     * The unique subject ID.
     * @type {number}
     * @memberof TeamSubjectResponse
     */
    'subject_id': number;
    /**
     * Returns the TeamSubject\'s `subject_type` natural key.  :param obj: The TeamSubject record. :return: The subject\'s content type natural key.
     * @type {string}
     * @memberof TeamSubjectResponse
     */
    'subject_type': string;
    /**
     * The team this subject belongs to.
     * @type {number}
     * @memberof TeamSubjectResponse
     */
    'team': number;
}
/**
 *
 * @export
 * @interface Template
 */
export interface Template {
    /**
     *
     * @type {number}
     * @memberof Template
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'name': string;
    /**
     * The template slug that is used to match the template with the JSON file name.
     * @type {string}
     * @memberof Template
     */
    'slug': string;
    /**
     * The icon class name that can be used for displaying purposes.
     * @type {string}
     * @memberof Template
     */
    'icon': string;
    /**
     * Keywords related to the template that can be used for search.
     * @type {string}
     * @memberof Template
     */
    'keywords'?: string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'group_id': string;
    /**
     * The group containing the applications related to the template. The read endpoints related to that group are publicly accessible for preview purposes.
     * @type {number}
     * @memberof Template
     */
    'workspace_id': number | null;
    /**
     * Indicates if the template must be selected by default. The web-frontend automatically selects the first `is_default` template that it can find.
     * @type {string}
     * @memberof Template
     */
    'is_default': string;
}
/**
 *
 * @export
 * @interface TemplateCategories
 */
export interface TemplateCategories {
    /**
     *
     * @type {number}
     * @memberof TemplateCategories
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof TemplateCategories
     */
    'name': string;
    /**
     *
     * @type {Array<Template>}
     * @memberof TemplateCategories
     */
    'templates': Array<Template>;
}
/**
 * This serializer allow to set the type of an element and the element id before which we want to insert the new element.
 * @export
 * @interface TextElementCreateElement
 */
export interface TextElementCreateElement {
    /**
     * Lowest first.
     * @type {string}
     * @memberof TextElementCreateElement
     */
    'order': string;
    /**
     * If provided, creates the element before the element with the given id.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'before_id'?: number;
    /**
     * The type of the element.  * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
     * @type {TypeB6cEnum}
     * @memberof TextElementCreateElement
     */
    'type': TypeB6cEnum;
    /**
     * If provided, creates the element as a child of the element with the given id.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'parent_element_id'?: number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof TextElementCreateElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof TextElementCreateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {TypographyConfigBlock}
     * @memberof TextElementCreateElement
     */
    'styles'?: TypographyConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof TextElementCreateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof TextElementCreateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof TextElementCreateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof TextElementCreateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof TextElementCreateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof TextElementCreateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof TextElementCreateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof TextElementCreateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof TextElementCreateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof TextElementCreateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     * The value of the element. Must be a formula.
     * @type {string}
     * @memberof TextElementCreateElement
     */
    'value'?: string;
    /**
     * The format of the text  * `plain` - Plain * `markdown` - Markdown
     * @type {FormatEnum}
     * @memberof TextElementCreateElement
     */
    'format'?: FormatEnum;
}
/**
 * Basic element serializer mostly for returned values.  👉 Mind to update the baserow.contrib.builder.api.domains.serializer.PublicElementSerializer when you update this one.
 * @export
 * @interface TextElementElement
 */
export interface TextElementElement {
    /**
     *
     * @type {number}
     * @memberof TextElementElement
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof TextElementElement
     */
    'page_id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof TextElementElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof TextElementElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof TextElementElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof TextElementElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof TextElementElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {TypographyConfigBlock}
     * @memberof TextElementElement
     */
    'styles'?: TypographyConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof TextElementElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof TextElementElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof TextElementElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof TextElementElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof TextElementElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof TextElementElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof TextElementElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof TextElementElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof TextElementElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof TextElementElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof TextElementElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof TextElementElement
     */
    'roles'?: any;
    /**
     * The value of the element. Must be a formula.
     * @type {string}
     * @memberof TextElementElement
     */
    'value'?: string;
    /**
     * The format of the text  * `plain` - Plain * `markdown` - Markdown
     * @type {FormatEnum}
     * @memberof TextElementElement
     */
    'format'?: FormatEnum;
}
/**
 * Basic element serializer mostly for returned values.
 * @export
 * @interface TextElementPublicElement
 */
export interface TextElementPublicElement {
    /**
     *
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'id': number;
    /**
     * The type of the element.
     * @type {string}
     * @memberof TextElementPublicElement
     */
    'type': string;
    /**
     * Lowest first.
     * @type {string}
     * @memberof TextElementPublicElement
     */
    'order': string;
    /**
     * The parent element, if inside a container.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'parent_element_id': number | null;
    /**
     * The place in the container.
     * @type {string}
     * @memberof TextElementPublicElement
     */
    'place_in_container'?: string | null;
    /**
     *
     * @type {VisibilityEnum}
     * @memberof TextElementPublicElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {TypographyConfigBlock}
     * @memberof TextElementPublicElement
     */
    'styles'?: TypographyConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof TextElementPublicElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof TextElementPublicElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof TextElementPublicElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof TextElementPublicElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof TextElementPublicElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof TextElementPublicElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof TextElementPublicElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof TextElementPublicElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof TextElementPublicElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof TextElementPublicElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof TextElementPublicElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof TextElementPublicElement
     */
    'roles'?: any;
    /**
     * The value of the element. Must be a formula.
     * @type {string}
     * @memberof TextElementPublicElement
     */
    'value'?: string;
    /**
     * The format of the text  * `plain` - Plain * `markdown` - Markdown
     * @type {FormatEnum}
     * @memberof TextElementPublicElement
     */
    'format'?: FormatEnum;
}
/**
 *
 * @export
 * @interface TextElementUpdateElement
 */
export interface TextElementUpdateElement {
    /**
     *
     * @type {VisibilityEnum}
     * @memberof TextElementUpdateElement
     */
    'visibility'?: VisibilityEnum;
    /**
     *
     * @type {TypographyConfigBlock}
     * @memberof TextElementUpdateElement
     */
    'styles'?: TypographyConfigBlock;
    /**
     * Top border color.
     * @type {string}
     * @memberof TextElementUpdateElement
     */
    'style_border_top_color'?: string;
    /**
     * Pixel height of the top border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_border_top_size'?: number;
    /**
     * Padding size of the top border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_padding_top'?: number;
    /**
     * Margin size of the top border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_margin_top'?: number;
    /**
     * Bottom border color
     * @type {string}
     * @memberof TextElementUpdateElement
     */
    'style_border_bottom_color'?: string;
    /**
     * Pixel height of the bottom border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_border_bottom_size'?: number;
    /**
     * Padding size of the bottom border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_padding_bottom'?: number;
    /**
     * Margin size of the bottom border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_margin_bottom'?: number;
    /**
     * Left border color
     * @type {string}
     * @memberof TextElementUpdateElement
     */
    'style_border_left_color'?: string;
    /**
     * Pixel height of the left border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_border_left_size'?: number;
    /**
     * Padding size of the left border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_padding_left'?: number;
    /**
     * Margin size of the left border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_margin_left'?: number;
    /**
     * Right border color
     * @type {string}
     * @memberof TextElementUpdateElement
     */
    'style_border_right_color'?: string;
    /**
     * Pixel height of the right border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_border_right_size'?: number;
    /**
     * Padding size of the right border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_padding_right'?: number;
    /**
     * Margin size of the right border.
     * @type {number}
     * @memberof TextElementUpdateElement
     */
    'style_margin_right'?: number;
    /**
     * What type of background the element should have.  * `none` - None * `color` - Color * `image` - Image
     * @type {StyleBackgroundEnum}
     * @memberof TextElementUpdateElement
     */
    'style_background'?: StyleBackgroundEnum;
    /**
     * The background color if `style_background` is color.
     * @type {string}
     * @memberof TextElementUpdateElement
     */
    'style_background_color'?: string;
    /**
     * The background image file
     * @type {UserFile}
     * @memberof TextElementUpdateElement
     */
    'style_background_file'?: UserFile | null;
    /**
     * The mode of the background image  * `tile` - Tile * `fill` - Fill * `fit` - Fit
     * @type {StyleBackgroundModeEnum}
     * @memberof TextElementUpdateElement
     */
    'style_background_mode'?: StyleBackgroundModeEnum;
    /**
     * Indicates the width of the element.  * `full` - Full * `full-width` - Full Width * `normal` - Normal * `medium` - Medium * `small` - Small
     * @type {StyleWidthEnum}
     * @memberof TextElementUpdateElement
     */
    'style_width'?: StyleWidthEnum;
    /**
     *
     * @type {RoleTypeEnum}
     * @memberof TextElementUpdateElement
     */
    'role_type'?: RoleTypeEnum;
    /**
     * User roles associated with this element, used in conjunction with role_type.
     * @type {any}
     * @memberof TextElementUpdateElement
     */
    'roles'?: any;
    /**
     * The value of the element. Must be a formula.
     * @type {string}
     * @memberof TextElementUpdateElement
     */
    'value'?: string;
    /**
     * The format of the text  * `plain` - Plain * `markdown` - Markdown
     * @type {FormatEnum}
     * @memberof TextElementUpdateElement
     */
    'format'?: FormatEnum;
}
/**
 *
 * @export
 * @interface TextFieldCreateField
 */
export interface TextFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof TextFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof TextFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof TextFieldCreateField
     */
    'description'?: string | null;
    /**
     * If set, this value is going to be added every time a new row created.
     * @type {string}
     * @memberof TextFieldCreateField
     */
    'text_default'?: string;
}
/**
 *
 * @export
 * @interface TextFieldField
 */
export interface TextFieldField {
    /**
     *
     * @type {number}
     * @memberof TextFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof TextFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof TextFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof TextFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof TextFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof TextFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof TextFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof TextFieldField
     */
    'description'?: string | null;
    /**
     * If set, this value is going to be added every time a new row created.
     * @type {string}
     * @memberof TextFieldField
     */
    'text_default'?: string;
}
/**
 *
 * @export
 * @interface TextFieldFieldSerializerWithRelatedFields
 */
export interface TextFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
    /**
     * If set, this value is going to be added every time a new row created.
     * @type {string}
     * @memberof TextFieldFieldSerializerWithRelatedFields
     */
    'text_default'?: string;
}
/**
 *
 * @export
 * @interface TextFieldUpdateField
 */
export interface TextFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof TextFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof TextFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof TextFieldUpdateField
     */
    'description'?: string | null;
    /**
     * If set, this value is going to be added every time a new row created.
     * @type {string}
     * @memberof TextFieldUpdateField
     */
    'text_default'?: string;
}
/**
 * A mixin that allows us to rename the `group` field to `workspace` when serializing.
 * @export
 * @interface Token
 */
export interface Token {
    /**
     *
     * @type {number}
     * @memberof Token
     */
    'id': number;
    /**
     * The human readable name of the database token for the user.
     * @type {string}
     * @memberof Token
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Token
     */
    'group': string;
    /**
     * Only the tables of the workspace can be accessed.
     * @type {number}
     * @memberof Token
     */
    'workspace': number;
    /**
     * The unique token key that can be used to authorize for the table row endpoints.
     * @type {string}
     * @memberof Token
     */
    'key': string;
    /**
     *
     * @type {PatchedTokenUpdatePermissions}
     * @memberof Token
     */
    'permissions': PatchedTokenUpdatePermissions;
}
/**
 *
 * @export
 * @interface TokenAuth401Response
 */
export interface TokenAuth401Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof TokenAuth401Response
     */
    'error'?: TokenAuth401ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof TokenAuth401Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const TokenAuth401ResponseErrorEnum: {
    readonly InvalidCredentials: "ERROR_INVALID_CREDENTIALS";
    readonly DeactivatedUser: "ERROR_DEACTIVATED_USER";
    readonly AuthProviderDisabled: "ERROR_AUTH_PROVIDER_DISABLED";
    readonly EmailVerificationRequired: "ERROR_EMAIL_VERIFICATION_REQUIRED";
};
export type TokenAuth401ResponseErrorEnum = typeof TokenAuth401ResponseErrorEnum[keyof typeof TokenAuth401ResponseErrorEnum];
/**
 *
 * @export
 * @interface TokenBlacklist
 */
export interface TokenBlacklist {
    /**
     *
     * @type {string}
     * @memberof TokenBlacklist
     */
    'refresh': string;
}
/**
 * A mixin that allows us to rename the `group` field to `workspace` when serializing.
 * @export
 * @interface TokenCreate
 */
export interface TokenCreate {
    /**
     * The human readable name of the database token for the user.
     * @type {string}
     * @memberof TokenCreate
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof TokenCreate
     */
    'group': string;
    /**
     * Only the tables of the workspace can be accessed.
     * @type {number}
     * @memberof TokenCreate
     */
    'workspace': number;
}
/**
 *
 * @export
 * @interface TokenObtainPair
 */
export interface TokenObtainPair {
    /**
     *
     * @type {string}
     * @memberof TokenObtainPair
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof TokenObtainPair
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof TokenObtainPair
     */
    'access': string;
    /**
     *
     * @type {string}
     * @memberof TokenObtainPair
     */
    'refresh': string;
}
/**
 *
 * @export
 * @interface TokenObtainPairWithUser
 */
export interface TokenObtainPairWithUser {
    /**
     *
     * @type {string}
     * @memberof TokenObtainPairWithUser
     */
    'email'?: string;
    /**
     * Deprecated. Use `email` instead.
     * @type {string}
     * @memberof TokenObtainPairWithUser
     * @deprecated
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof TokenObtainPairWithUser
     */
    'password': string;
}
/**
 *
 * @export
 * @interface TokenRefresh401Response
 */
export interface TokenRefresh401Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof TokenRefresh401Response
     */
    'error'?: TokenRefresh401ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof TokenRefresh401Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const TokenRefresh401ResponseErrorEnum: {
    readonly InvalidRefreshToken: "ERROR_INVALID_REFRESH_TOKEN";
    readonly EmailVerificationRequired: "ERROR_EMAIL_VERIFICATION_REQUIRED";
};
export type TokenRefresh401ResponseErrorEnum = typeof TokenRefresh401ResponseErrorEnum[keyof typeof TokenRefresh401ResponseErrorEnum];
/**
 *
 * @export
 * @interface TokenRefreshWithUser
 */
export interface TokenRefreshWithUser {
    /**
     *
     * @type {string}
     * @memberof TokenRefreshWithUser
     */
    'access': string;
    /**
     *
     * @type {string}
     * @memberof TokenRefreshWithUser
     */
    'refresh_token'?: string;
    /**
     * Deprecated. Use `refresh_token` instead.
     * @type {string}
     * @memberof TokenRefreshWithUser
     * @deprecated
     */
    'token'?: string;
}
/**
 *
 * @export
 * @interface TokenVerify200Response
 */
export interface TokenVerify200Response {
    /**
     *
     * @type {AdminImpersonateUser200ResponseUser}
     * @memberof TokenVerify200Response
     */
    'user'?: AdminImpersonateUser200ResponseUser;
}
/**
 *
 * @export
 * @interface TokenVerifyWithUser
 */
export interface TokenVerifyWithUser {
    /**
     * Deprecated. Use `refresh_token` instead.
     * @type {string}
     * @memberof TokenVerifyWithUser
     * @deprecated
     */
    'token'?: string;
    /**
     *
     * @type {string}
     * @memberof TokenVerifyWithUser
     */
    'refresh_token': string;
}
/**
 *
 * @export
 * @interface TrashContents
 */
export interface TrashContents {
    /**
     *
     * @type {number}
     * @memberof TrashContents
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof TrashContents
     */
    'user_who_trashed': string;
    /**
     * If an API consumer hasn\'t yet adopted the \"workspace\" `trash_item_type`, give them the option to return \"group\" by testing the `respond_with_workspace_rename` querystring.
     * @type {string}
     * @memberof TrashContents
     */
    'trash_item_type': string;
    /**
     *
     * @type {number}
     * @memberof TrashContents
     */
    'trash_item_id': number;
    /**
     *
     * @type {number}
     * @memberof TrashContents
     */
    'parent_trash_item_id': number | null;
    /**
     *
     * @type {string}
     * @memberof TrashContents
     */
    'trashed_at': string;
    /**
     *
     * @type {number}
     * @memberof TrashContents
     */
    'application'?: number | null;
    /**
     *
     * @type {number}
     * @memberof TrashContents
     */
    'group': number;
    /**
     *
     * @type {number}
     * @memberof TrashContents
     */
    'workspace': number;
    /**
     *
     * @type {string}
     * @memberof TrashContents
     */
    'name': string;
    /**
     *
     * @type {Array<string>}
     * @memberof TrashContents
     */
    'names'?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof TrashContents
     */
    'parent_name'?: string | null;
}
/**
 * * `workspace` - workspace * `application` - application * `group` - group * `table` - table * `field` - field * `row` - row * `rows` - rows * `view` - view * `builder_domain` - builder_domain * `row_comment` - row_comment * `team` - team
 * @export
 * @enum {string}
 */
export declare const TrashItemTypeEnum: {
    readonly Workspace: "workspace";
    readonly Application: "application";
    readonly Group: "group";
    readonly Table: "table";
    readonly Field: "field";
    readonly Row: "row";
    readonly Rows: "rows";
    readonly View: "view";
    readonly BuilderDomain: "builder_domain";
    readonly RowComment: "row_comment";
    readonly Team: "team";
};
export type TrashItemTypeEnum = typeof TrashItemTypeEnum[keyof typeof TrashItemTypeEnum];
/**
 *
 * @export
 * @interface TrashStructure
 */
export interface TrashStructure {
    /**
     * An array of group trash structure records. Deprecated, please use `workspaces`.
     * @type {Array<TrashStructureGroup>}
     * @memberof TrashStructure
     */
    'groups': Array<TrashStructureGroup>;
    /**
     * An array of workspace trash structure records
     * @type {Array<TrashStructureGroup>}
     * @memberof TrashStructure
     */
    'workspaces': Array<TrashStructureGroup>;
}
/**
 *
 * @export
 * @interface TrashStructureApplication
 */
export interface TrashStructureApplication {
    /**
     *
     * @type {number}
     * @memberof TrashStructureApplication
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof TrashStructureApplication
     */
    'name': string;
    /**
     *
     * @type {boolean}
     * @memberof TrashStructureApplication
     */
    'trashed'?: boolean;
}
/**
 *
 * @export
 * @interface TrashStructureGroup
 */
export interface TrashStructureGroup {
    /**
     *
     * @type {number}
     * @memberof TrashStructureGroup
     */
    'id': number;
    /**
     *
     * @type {boolean}
     * @memberof TrashStructureGroup
     */
    'trashed': boolean;
    /**
     *
     * @type {string}
     * @memberof TrashStructureGroup
     */
    'name': string;
    /**
     *
     * @type {Array<TrashStructureApplication>}
     * @memberof TrashStructureGroup
     */
    'applications': Array<TrashStructureApplication>;
}
/**
 * * `local_baserow` - local_baserow
 * @export
 * @enum {string}
 */
export declare const Type050Enum: {
    readonly LocalBaserow: "local_baserow";
};
export type Type050Enum = typeof Type050Enum[keyof typeof Type050Enum];
/**
 * * `notification` - notification * `open_page` - open_page * `create_row` - create_row * `update_row` - update_row * `delete_row` - delete_row * `logout` - logout * `refresh_data_source` - refresh_data_source
 * @export
 * @enum {string}
 */
export declare const Type051Enum: {
    readonly Notification: "notification";
    readonly OpenPage: "open_page";
    readonly CreateRow: "create_row";
    readonly UpdateRow: "update_row";
    readonly DeleteRow: "delete_row";
    readonly Logout: "logout";
    readonly RefreshDataSource: "refresh_data_source";
};
export type Type051Enum = typeof Type051Enum[keyof typeof Type051Enum];
/**
 * * `equal` - equal * `not_equal` - not_equal * `filename_contains` - filename_contains * `files_lower_than` - files_lower_than * `has_file_type` - has_file_type * `contains` - contains * `contains_not` - contains_not * `contains_word` - contains_word * `doesnt_contain_word` - doesnt_contain_word * `length_is_lower_than` - length_is_lower_than * `higher_than` - higher_than * `higher_than_or_equal` - higher_than_or_equal * `lower_than` - lower_than * `lower_than_or_equal` - lower_than_or_equal * `is_even_and_whole` - is_even_and_whole * `date_equal` - date_equal * `date_before` - date_before * `date_before_or_equal` - date_before_or_equal * `date_after_days_ago` - date_after_days_ago * `date_after` - date_after * `date_after_or_equal` - date_after_or_equal * `date_not_equal` - date_not_equal * `date_equals_today` - date_equals_today * `date_before_today` - date_before_today * `date_after_today` - date_after_today * `date_within_days` - date_within_days * `date_within_weeks` - date_within_weeks * `date_within_months` - date_within_months * `date_equals_days_ago` - date_equals_days_ago * `date_equals_months_ago` - date_equals_months_ago * `date_equals_years_ago` - date_equals_years_ago * `date_equals_week` - date_equals_week * `date_equals_month` - date_equals_month * `date_equals_day_of_month` - date_equals_day_of_month * `date_equals_year` - date_equals_year * `date_is` - date_is * `date_is_not` - date_is_not * `date_is_before` - date_is_before * `date_is_on_or_before` - date_is_on_or_before * `date_is_after` - date_is_after * `date_is_on_or_after` - date_is_on_or_after * `date_is_within` - date_is_within * `single_select_equal` - single_select_equal * `single_select_not_equal` - single_select_not_equal * `single_select_is_any_of` - single_select_is_any_of * `single_select_is_none_of` - single_select_is_none_of * `link_row_has` - link_row_has * `link_row_has_not` - link_row_has_not * `link_row_contains` - link_row_contains * `link_row_not_contains` - link_row_not_contains * `boolean` - boolean * `empty` - empty * `not_empty` - not_empty * `multiple_select_has` - multiple_select_has * `multiple_select_has_not` - multiple_select_has_not * `multiple_collaborators_has` - multiple_collaborators_has * `multiple_collaborators_has_not` - multiple_collaborators_has_not * `user_is` - user_is * `user_is_not` - user_is_not * `has_value_equal` - has_value_equal * `has_not_value_equal` - has_not_value_equal * `has_value_contains` - has_value_contains * `has_not_value_contains` - has_not_value_contains * `has_value_contains_word` - has_value_contains_word * `has_not_value_contains_word` - has_not_value_contains_word * `has_value_length_is_lower_than` - has_value_length_is_lower_than * `has_empty_value` - has_empty_value * `has_not_empty_value` - has_not_empty_value
 * @export
 * @enum {string}
 */
export declare const Type083Enum: {
    readonly Equal: "equal";
    readonly NotEqual: "not_equal";
    readonly FilenameContains: "filename_contains";
    readonly FilesLowerThan: "files_lower_than";
    readonly HasFileType: "has_file_type";
    readonly Contains: "contains";
    readonly ContainsNot: "contains_not";
    readonly ContainsWord: "contains_word";
    readonly DoesntContainWord: "doesnt_contain_word";
    readonly LengthIsLowerThan: "length_is_lower_than";
    readonly HigherThan: "higher_than";
    readonly HigherThanOrEqual: "higher_than_or_equal";
    readonly LowerThan: "lower_than";
    readonly LowerThanOrEqual: "lower_than_or_equal";
    readonly IsEvenAndWhole: "is_even_and_whole";
    readonly DateEqual: "date_equal";
    readonly DateBefore: "date_before";
    readonly DateBeforeOrEqual: "date_before_or_equal";
    readonly DateAfterDaysAgo: "date_after_days_ago";
    readonly DateAfter: "date_after";
    readonly DateAfterOrEqual: "date_after_or_equal";
    readonly DateNotEqual: "date_not_equal";
    readonly DateEqualsToday: "date_equals_today";
    readonly DateBeforeToday: "date_before_today";
    readonly DateAfterToday: "date_after_today";
    readonly DateWithinDays: "date_within_days";
    readonly DateWithinWeeks: "date_within_weeks";
    readonly DateWithinMonths: "date_within_months";
    readonly DateEqualsDaysAgo: "date_equals_days_ago";
    readonly DateEqualsMonthsAgo: "date_equals_months_ago";
    readonly DateEqualsYearsAgo: "date_equals_years_ago";
    readonly DateEqualsWeek: "date_equals_week";
    readonly DateEqualsMonth: "date_equals_month";
    readonly DateEqualsDayOfMonth: "date_equals_day_of_month";
    readonly DateEqualsYear: "date_equals_year";
    readonly DateIs: "date_is";
    readonly DateIsNot: "date_is_not";
    readonly DateIsBefore: "date_is_before";
    readonly DateIsOnOrBefore: "date_is_on_or_before";
    readonly DateIsAfter: "date_is_after";
    readonly DateIsOnOrAfter: "date_is_on_or_after";
    readonly DateIsWithin: "date_is_within";
    readonly SingleSelectEqual: "single_select_equal";
    readonly SingleSelectNotEqual: "single_select_not_equal";
    readonly SingleSelectIsAnyOf: "single_select_is_any_of";
    readonly SingleSelectIsNoneOf: "single_select_is_none_of";
    readonly LinkRowHas: "link_row_has";
    readonly LinkRowHasNot: "link_row_has_not";
    readonly LinkRowContains: "link_row_contains";
    readonly LinkRowNotContains: "link_row_not_contains";
    readonly Boolean: "boolean";
    readonly Empty: "empty";
    readonly NotEmpty: "not_empty";
    readonly MultipleSelectHas: "multiple_select_has";
    readonly MultipleSelectHasNot: "multiple_select_has_not";
    readonly MultipleCollaboratorsHas: "multiple_collaborators_has";
    readonly MultipleCollaboratorsHasNot: "multiple_collaborators_has_not";
    readonly UserIs: "user_is";
    readonly UserIsNot: "user_is_not";
    readonly HasValueEqual: "has_value_equal";
    readonly HasNotValueEqual: "has_not_value_equal";
    readonly HasValueContains: "has_value_contains";
    readonly HasNotValueContains: "has_not_value_contains";
    readonly HasValueContainsWord: "has_value_contains_word";
    readonly HasNotValueContainsWord: "has_not_value_contains_word";
    readonly HasValueLengthIsLowerThan: "has_value_length_is_lower_than";
    readonly HasEmptyValue: "has_empty_value";
    readonly HasNotEmptyValue: "has_not_empty_value";
};
export type Type083Enum = typeof Type083Enum[keyof typeof Type083Enum];
/**
 * * `custom` - custom * `sub_domain` - sub_domain
 * @export
 * @enum {string}
 */
export declare const Type509Enum: {
    readonly Custom: "custom";
    readonly SubDomain: "sub_domain";
};
export type Type509Enum = typeof Type509Enum[keyof typeof Type509Enum];
/**
 * * `text` - text * `long_text` - long_text * `url` - url * `email` - email * `number` - number * `rating` - rating * `boolean` - boolean * `date` - date * `last_modified` - last_modified * `last_modified_by` - last_modified_by * `created_on` - created_on * `created_by` - created_by * `duration` - duration * `link_row` - link_row * `file` - file * `single_select` - single_select * `multiple_select` - multiple_select * `phone_number` - phone_number * `formula` - formula * `count` - count * `rollup` - rollup * `lookup` - lookup * `multiple_collaborators` - multiple_collaborators * `uuid` - uuid * `autonumber` - autonumber * `password` - password * `ai` - ai
 * @export
 * @enum {string}
 */
export declare const Type6ebEnum: {
    readonly Text: "text";
    readonly LongText: "long_text";
    readonly Url: "url";
    readonly Email: "email";
    readonly Number: "number";
    readonly Rating: "rating";
    readonly Boolean: "boolean";
    readonly Date: "date";
    readonly LastModified: "last_modified";
    readonly LastModifiedBy: "last_modified_by";
    readonly CreatedOn: "created_on";
    readonly CreatedBy: "created_by";
    readonly Duration: "duration";
    readonly LinkRow: "link_row";
    readonly File: "file";
    readonly SingleSelect: "single_select";
    readonly MultipleSelect: "multiple_select";
    readonly PhoneNumber: "phone_number";
    readonly Formula: "formula";
    readonly Count: "count";
    readonly Rollup: "rollup";
    readonly Lookup: "lookup";
    readonly MultipleCollaborators: "multiple_collaborators";
    readonly Uuid: "uuid";
    readonly Autonumber: "autonumber";
    readonly Password: "password";
    readonly Ai: "ai";
};
export type Type6ebEnum = typeof Type6ebEnum[keyof typeof Type6ebEnum];
/**
 * * `database` - database * `builder` - builder
 * @export
 * @enum {string}
 */
export declare const Type8b0Enum: {
    readonly Database: "database";
    readonly Builder: "builder";
};
export type Type8b0Enum = typeof Type8b0Enum[keyof typeof Type8b0Enum];
/**
 * * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `duplicate_page` - duplicate_page * `publish_domain` - publish_domain * `audit_log_export` - audit_log_export
 * @export
 * @enum {string}
 */
export declare const Type8b6Enum: {
    readonly DuplicateApplication: "duplicate_application";
    readonly InstallTemplate: "install_template";
    readonly CreateSnapshot: "create_snapshot";
    readonly RestoreSnapshot: "restore_snapshot";
    readonly Airtable: "airtable";
    readonly FileImport: "file_import";
    readonly DuplicateTable: "duplicate_table";
    readonly DuplicateField: "duplicate_field";
    readonly DuplicatePage: "duplicate_page";
    readonly PublishDomain: "publish_domain";
    readonly AuditLogExport: "audit_log_export";
};
export type Type8b6Enum = typeof Type8b6Enum[keyof typeof Type8b6Enum];
/**
 * * `left_border_color` - left_border_color * `background_color` - background_color
 * @export
 * @enum {string}
 */
export declare const Type9c4Enum: {
    readonly LeftBorderColor: "left_border_color";
    readonly BackgroundColor: "background_color";
};
export type Type9c4Enum = typeof Type9c4Enum[keyof typeof Type9c4Enum];
/**
 * * `heading` - heading * `text` - text * `link` - link * `image` - image * `input_text` - input_text * `column` - column * `button` - button * `table` - table * `repeat` - repeat * `form_container` - form_container * `choice` - choice * `checkbox` - checkbox * `iframe` - iframe * `auth_form` - auth_form
 * @export
 * @enum {string}
 */
export declare const TypeB6cEnum: {
    readonly Heading: "heading";
    readonly Text: "text";
    readonly Link: "link";
    readonly Image: "image";
    readonly InputText: "input_text";
    readonly Column: "column";
    readonly Button: "button";
    readonly Table: "table";
    readonly Repeat: "repeat";
    readonly FormContainer: "form_container";
    readonly Choice: "choice";
    readonly Checkbox: "checkbox";
    readonly Iframe: "iframe";
    readonly AuthForm: "auth_form";
};
export type TypeB6cEnum = typeof TypeB6cEnum[keyof typeof TypeB6cEnum];
/**
 * * `local_baserow_get_row` - local_baserow_get_row * `local_baserow_list_rows` - local_baserow_list_rows * `local_baserow_upsert_row` - local_baserow_upsert_row * `local_baserow_delete_row` - local_baserow_delete_row
 * @export
 * @enum {string}
 */
export declare const TypeC66Enum: {
    readonly GetRow: "local_baserow_get_row";
    readonly ListRows: "local_baserow_list_rows";
    readonly UpsertRow: "local_baserow_upsert_row";
    readonly DeleteRow: "local_baserow_delete_row";
};
export type TypeC66Enum = typeof TypeC66Enum[keyof typeof TypeC66Enum];
/**
 *
 * @export
 * @interface TypeFormulaField400Response
 */
export interface TypeFormulaField400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof TypeFormulaField400Response
     */
    'error'?: TypeFormulaField400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof TypeFormulaField400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const TypeFormulaField400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly WithFormula: "ERROR_WITH_FORMULA";
    readonly FieldSelfReference: "ERROR_FIELD_SELF_REFERENCE";
};
export type TypeFormulaField400ResponseErrorEnum = typeof TypeFormulaField400ResponseErrorEnum[keyof typeof TypeFormulaField400ResponseErrorEnum];
/**
 *
 * @export
 * @interface TypeFormulaRequest
 */
export interface TypeFormulaRequest {
    /**
     *
     * @type {string}
     * @memberof TypeFormulaRequest
     */
    'formula': string;
    /**
     *
     * @type {string}
     * @memberof TypeFormulaRequest
     */
    'name': string;
}
/**
 *
 * @export
 * @interface TypeFormulaResult
 */
export interface TypeFormulaResult {
    /**
     *
     * @type {DurationFormatEnum}
     * @memberof TypeFormulaResult
     */
    'duration_format'?: DurationFormatEnum | null;
    /**
     * Indicates if the field also includes a time.
     * @type {boolean}
     * @memberof TypeFormulaResult
     */
    'date_include_time'?: boolean | null;
    /**
     *
     * @type {ArrayFormulaTypeEnum}
     * @memberof TypeFormulaResult
     */
    'array_formula_type'?: ArrayFormulaTypeEnum | null;
    /**
     *
     * @type {DateTimeFormatEnum}
     * @memberof TypeFormulaResult
     */
    'date_time_format'?: DateTimeFormatEnum | null;
    /**
     *
     * @type {NumberDecimalPlacesEnum}
     * @memberof TypeFormulaResult
     */
    'number_decimal_places'?: NumberDecimalPlacesEnum | null;
    /**
     * Indicates if the time zone should be shown.
     * @type {boolean}
     * @memberof TypeFormulaResult
     */
    'date_show_tzinfo'?: boolean | null;
    /**
     *
     * @type {DateFormatEnum}
     * @memberof TypeFormulaResult
     */
    'date_format'?: DateFormatEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof TypeFormulaResult
     */
    'nullable': boolean;
    /**
     * Force a timezone for the field overriding user profile settings.
     * @type {string}
     * @memberof TypeFormulaResult
     */
    'date_force_timezone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TypeFormulaResult
     */
    'error'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TypeFormulaResult
     */
    'formula': string;
    /**
     *
     * @type {FormulaTypeEnum}
     * @memberof TypeFormulaResult
     */
    'formula_type'?: FormulaTypeEnum;
}
/**
 * Style overrides for this element.
 * @export
 * @interface TypographyConfigBlock
 */
export interface TypographyConfigBlock {
    /**
     * Styles overrides for typography
     * @type {TypographyThemeConfigBlock}
     * @memberof TypographyConfigBlock
     */
    'typography'?: TypographyThemeConfigBlock;
}
/**
 *
 * @export
 * @interface TypographyThemeConfigBlock
 */
export interface TypographyThemeConfigBlock {
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'body_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof TypographyThemeConfigBlock
     */
    'body_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'body_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof TypographyThemeConfigBlock
     */
    'body_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_1_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_1_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_1_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_1_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_2_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_2_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_2_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_2_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_3_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_3_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_3_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_3_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_4_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_4_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_4_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_4_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_5_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_5_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_5_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_5_text_alignment'?: TableCellAlignmentEnum;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_6_font_family'?: string;
    /**
     *
     * @type {number}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_6_font_size'?: number;
    /**
     *
     * @type {string}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_6_text_color'?: string;
    /**
     *
     * @type {TableCellAlignmentEnum}
     * @memberof TypographyThemeConfigBlock
     */
    'heading_6_text_alignment'?: TableCellAlignmentEnum;
}
/**
 *
 * @export
 * @interface URLFieldCreateField
 */
export interface URLFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof URLFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof URLFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof URLFieldCreateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface URLFieldField
 */
export interface URLFieldField {
    /**
     *
     * @type {number}
     * @memberof URLFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof URLFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof URLFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof URLFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof URLFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof URLFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof URLFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof URLFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface URLFieldFieldSerializerWithRelatedFields
 */
export interface URLFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof URLFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof URLFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof URLFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof URLFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof URLFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof URLFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof URLFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof URLFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof URLFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface URLFieldUpdateField
 */
export interface URLFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof URLFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof URLFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof URLFieldUpdateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface UUIDFieldCreateField
 */
export interface UUIDFieldCreateField {
    /**
     *
     * @type {string}
     * @memberof UUIDFieldCreateField
     */
    'name': string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof UUIDFieldCreateField
     */
    'type': Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof UUIDFieldCreateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface UUIDFieldField
 */
export interface UUIDFieldField {
    /**
     *
     * @type {number}
     * @memberof UUIDFieldField
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof UUIDFieldField
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof UUIDFieldField
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof UUIDFieldField
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof UUIDFieldField
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof UUIDFieldField
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof UUIDFieldField
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof UUIDFieldField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface UUIDFieldFieldSerializerWithRelatedFields
 */
export interface UUIDFieldFieldSerializerWithRelatedFields {
    /**
     *
     * @type {number}
     * @memberof UUIDFieldFieldSerializerWithRelatedFields
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof UUIDFieldFieldSerializerWithRelatedFields
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof UUIDFieldFieldSerializerWithRelatedFields
     */
    'name': string;
    /**
     * Lowest first.
     * @type {number}
     * @memberof UUIDFieldFieldSerializerWithRelatedFields
     */
    'order': number;
    /**
     * The type of the related field.
     * @type {string}
     * @memberof UUIDFieldFieldSerializerWithRelatedFields
     */
    'type': string;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     * @type {boolean}
     * @memberof UUIDFieldFieldSerializerWithRelatedFields
     */
    'primary'?: boolean;
    /**
     * Indicates whether the field is a read only field. If true, it\'s not possible to update the cell value.
     * @type {boolean}
     * @memberof UUIDFieldFieldSerializerWithRelatedFields
     */
    'read_only': boolean;
    /**
     * Field description
     * @type {string}
     * @memberof UUIDFieldFieldSerializerWithRelatedFields
     */
    'description'?: string | null;
    /**
     * A list of related fields which also changed.
     * @type {Array<Field>}
     * @memberof UUIDFieldFieldSerializerWithRelatedFields
     */
    'related_fields': Array<Field>;
}
/**
 *
 * @export
 * @interface UUIDFieldUpdateField
 */
export interface UUIDFieldUpdateField {
    /**
     *
     * @type {string}
     * @memberof UUIDFieldUpdateField
     */
    'name'?: string;
    /**
     *
     * @type {Type6ebEnum}
     * @memberof UUIDFieldUpdateField
     */
    'type'?: Type6ebEnum;
    /**
     * Field description
     * @type {string}
     * @memberof UUIDFieldUpdateField
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface UndoRedoAction
 */
export interface UndoRedoAction {
    /**
     * If an action was undone/redone/skipped due to an error this field will contain the type of the action that was undone/redone.
     * @type {string}
     * @memberof UndoRedoAction
     */
    'action_type'?: string | null;
    /**
     * If an action was undone/redone/skipped due to an error this field will contain the scope of the action that was undone/redone.
     * @type {string}
     * @memberof UndoRedoAction
     */
    'action_scope'?: string | null;
}
/**
 *
 * @export
 * @interface UndoRedoResponse
 */
export interface UndoRedoResponse {
    /**
     *
     * @type {Array<UndoRedoAction>}
     * @memberof UndoRedoResponse
     */
    'actions': Array<UndoRedoAction>;
    /**
     * Indicates the result of the undo/redo operation. Will be \'SUCCESS\' on success, \'NOTHING_TO_DO\' when there is no action to undo/redo and \'SKIPPED_DUE_TO_ERROR\' when the undo/redo failed due to a conflict or error and was skipped over.
     * @type {string}
     * @memberof UndoRedoResponse
     */
    'result_code': string;
}
/**
 *
 * @export
 * @interface UniqueRowValues
 */
export interface UniqueRowValues {
    /**
     *
     * @type {Array<string>}
     * @memberof UniqueRowValues
     */
    'values': Array<string>;
}
/**
 *
 * @export
 * @interface UpdateBuilderPage404Response
 */
export interface UpdateBuilderPage404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateBuilderPage404Response
     */
    'error'?: UpdateBuilderPage404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateBuilderPage404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateBuilderPage404ResponseErrorEnum: {
    readonly PageDoesNotExist: "ERROR_PAGE_DOES_NOT_EXIST";
    readonly ApplicationDoesNotExist: "ERROR_APPLICATION_DOES_NOT_EXIST";
};
export type UpdateBuilderPage404ResponseErrorEnum = typeof UpdateBuilderPage404ResponseErrorEnum[keyof typeof UpdateBuilderPage404ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateDatabaseTableField400Response
 */
export interface UpdateDatabaseTableField400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateDatabaseTableField400Response
     */
    'error'?: UpdateDatabaseTableField400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateDatabaseTableField400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateDatabaseTableField400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly CannotChangeFieldType: "ERROR_CANNOT_CHANGE_FIELD_TYPE";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly ReservedBaserowFieldName: "ERROR_RESERVED_BASEROW_FIELD_NAME";
    readonly FieldWithSameNameAlreadyExists: "ERROR_FIELD_WITH_SAME_NAME_ALREADY_EXISTS";
    readonly InvalidBaserowFieldName: "ERROR_INVALID_BASEROW_FIELD_NAME";
    readonly FieldSelfReference: "ERROR_FIELD_SELF_REFERENCE";
    readonly FieldCircularReference: "ERROR_FIELD_CIRCULAR_REFERENCE";
};
export type UpdateDatabaseTableField400ResponseErrorEnum = typeof UpdateDatabaseTableField400ResponseErrorEnum[keyof typeof UpdateDatabaseTableField400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateDatabaseTableView400Response
 */
export interface UpdateDatabaseTableView400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateDatabaseTableView400Response
     */
    'error'?: UpdateDatabaseTableView400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateDatabaseTableView400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateDatabaseTableView400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly FieldNotInTable: "ERROR_FIELD_NOT_IN_TABLE";
};
export type UpdateDatabaseTableView400ResponseErrorEnum = typeof UpdateDatabaseTableView400ResponseErrorEnum[keyof typeof UpdateDatabaseTableView400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateDatabaseTableViewGroup400Response
 */
export interface UpdateDatabaseTableViewGroup400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateDatabaseTableViewGroup400Response
     */
    'error'?: UpdateDatabaseTableViewGroup400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateDatabaseTableViewGroup400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateDatabaseTableViewGroup400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly FieldNotInTable: "ERROR_FIELD_NOT_IN_TABLE";
    readonly ViewGroupByFieldAlreadyExists: "ERROR_VIEW_GROUP_BY_FIELD_ALREADY_EXISTS";
};
export type UpdateDatabaseTableViewGroup400ResponseErrorEnum = typeof UpdateDatabaseTableViewGroup400ResponseErrorEnum[keyof typeof UpdateDatabaseTableViewGroup400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateDatabaseTableViewSort400Response
 */
export interface UpdateDatabaseTableViewSort400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateDatabaseTableViewSort400Response
     */
    'error'?: UpdateDatabaseTableViewSort400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateDatabaseTableViewSort400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateDatabaseTableViewSort400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly FieldNotInTable: "ERROR_FIELD_NOT_IN_TABLE";
    readonly ViewSortFieldAlreadyExists: "ERROR_VIEW_SORT_FIELD_ALREADY_EXISTS";
};
export type UpdateDatabaseTableViewSort400ResponseErrorEnum = typeof UpdateDatabaseTableViewSort400ResponseErrorEnum[keyof typeof UpdateDatabaseTableViewSort400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateDatabaseToken400Response
 */
export interface UpdateDatabaseToken400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateDatabaseToken400Response
     */
    'error'?: UpdateDatabaseToken400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateDatabaseToken400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateDatabaseToken400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly DatabaseDoesNotBelongToGroup: "ERROR_DATABASE_DOES_NOT_BELONG_TO_GROUP";
    readonly TableDoesNotBelongToGroup: "ERROR_TABLE_DOES_NOT_BELONG_TO_GROUP";
};
export type UpdateDatabaseToken400ResponseErrorEnum = typeof UpdateDatabaseToken400ResponseErrorEnum[keyof typeof UpdateDatabaseToken400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateGroup400Response
 */
export interface UpdateGroup400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateGroup400Response
     */
    'error'?: UpdateGroup400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateGroup400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateGroup400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
    readonly UserInvalidGroupPermissions: "ERROR_USER_INVALID_GROUP_PERMISSIONS";
};
export type UpdateGroup400ResponseErrorEnum = typeof UpdateGroup400ResponseErrorEnum[keyof typeof UpdateGroup400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateGroupInvitation400Response
 */
export interface UpdateGroupInvitation400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateGroupInvitation400Response
     */
    'error'?: UpdateGroupInvitation400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateGroupInvitation400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateGroupInvitation400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly UserInvalidGroupPermissions: "ERROR_USER_INVALID_GROUP_PERMISSIONS";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
};
export type UpdateGroupInvitation400ResponseErrorEnum = typeof UpdateGroupInvitation400ResponseErrorEnum[keyof typeof UpdateGroupInvitation400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateGroupUser404Response
 */
export interface UpdateGroupUser404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateGroupUser404Response
     */
    'error'?: UpdateGroupUser404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateGroupUser404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateGroupUser404ResponseErrorEnum: {
    readonly ErrorGroupUserDoesNotExist: "ERROR_GROUP_USER_DOES_NOT_EXIST";
};
export type UpdateGroupUser404ResponseErrorEnum = typeof UpdateGroupUser404ResponseErrorEnum[keyof typeof UpdateGroupUser404ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateRowComment400Response
 */
export interface UpdateRowComment400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateRowComment400Response
     */
    'error'?: UpdateRowComment400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateRowComment400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateRowComment400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly UserNotCommentAuthor: "ERROR_USER_NOT_COMMENT_AUTHOR";
    readonly InvalidCommentMention: "ERROR_INVALID_COMMENT_MENTION";
    readonly BodyValidation: "ERROR_BODY_VALIDATION";
};
export type UpdateRowComment400ResponseErrorEnum = typeof UpdateRowComment400ResponseErrorEnum[keyof typeof UpdateRowComment400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateTeam400Response
 */
export interface UpdateTeam400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateTeam400Response
     */
    'error'?: UpdateTeam400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateTeam400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateTeam400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly TeamNameNotUnique: "ERROR_TEAM_NAME_NOT_UNIQUE";
    readonly SubjectBadRequest: "ERROR_SUBJECT_BAD_REQUEST\"";
};
export type UpdateTeam400ResponseErrorEnum = typeof UpdateTeam400ResponseErrorEnum[keyof typeof UpdateTeam400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UpdateTeam404Response
 */
export interface UpdateTeam404Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UpdateTeam404Response
     */
    'error'?: UpdateTeam404ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UpdateTeam404Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UpdateTeam404ResponseErrorEnum: {
    readonly TeamDoesNotExist: "ERROR_TEAM_DOES_NOT_EXIST";
    readonly SubjectDoesNotExist: "ERROR_SUBJECT_DOES_NOT_EXIST";
    readonly RoleDoesNotExist: "ERROR_ROLE_DOES_NOT_EXIST";
};
export type UpdateTeam404ResponseErrorEnum = typeof UpdateTeam404ResponseErrorEnum[keyof typeof UpdateTeam404ResponseErrorEnum];
/**
 *
 * @export
 * @interface UploadFile400Response
 */
export interface UploadFile400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UploadFile400Response
     */
    'error'?: UploadFile400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UploadFile400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UploadFile400ResponseErrorEnum: {
    readonly InvalidFile: "ERROR_INVALID_FILE";
    readonly FileSizeTooLarge: "ERROR_FILE_SIZE_TOO_LARGE";
};
export type UploadFile400ResponseErrorEnum = typeof UploadFile400ResponseErrorEnum[keyof typeof UploadFile400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UploadFileFormView400Response
 */
export interface UploadFileFormView400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UploadFileFormView400Response
     */
    'error'?: UploadFileFormView400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UploadFileFormView400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UploadFileFormView400ResponseErrorEnum: {
    readonly InvalidFile: "ERROR_INVALID_FILE";
    readonly FileSizeTooLarge: "ERROR_FILE_SIZE_TOO_LARGE";
    readonly ViewHasNoPublicFileField: "ERROR_VIEW_HAS_NO_PUBLIC_FILE_FIELD";
};
export type UploadFileFormView400ResponseErrorEnum = typeof UploadFileFormView400ResponseErrorEnum[keyof typeof UploadFileFormView400ResponseErrorEnum];
/**
 *
 * @export
 * @interface UploadViaUrl400Response
 */
export interface UploadViaUrl400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof UploadViaUrl400Response
     */
    'error'?: UploadViaUrl400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof UploadViaUrl400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const UploadViaUrl400ResponseErrorEnum: {
    readonly InvalidFile: "ERROR_INVALID_FILE";
    readonly FileSizeTooLarge: "ERROR_FILE_SIZE_TOO_LARGE";
    readonly FileUrlCouldNotBeReached: "ERROR_FILE_URL_COULD_NOT_BE_REACHED";
    readonly InvalidFileUrl: "ERROR_INVALID_FILE_URL";
};
export type UploadViaUrl400ResponseErrorEnum = typeof UploadViaUrl400ResponseErrorEnum[keyof typeof UploadViaUrl400ResponseErrorEnum];
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof User
     */
    'username': string;
}
/**
 * Serializes a request body for creating a new user. Do not use for returning user data as the password will be returned also.
 * @export
 * @interface UserAdminCreate
 */
export interface UserAdminCreate {
    /**
     *
     * @type {string}
     * @memberof UserAdminCreate
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof UserAdminCreate
     */
    'name': string;
    /**
     * Designates whether this user should be treated as active. Set this to false instead of deleting accounts.
     * @type {boolean}
     * @memberof UserAdminCreate
     */
    'is_active'?: boolean;
    /**
     * Designates whether this user is an admin and has access to all workspaces and Baserow\'s admin areas.
     * @type {boolean}
     * @memberof UserAdminCreate
     */
    'is_staff'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserAdminCreate
     */
    'password': string;
}
/**
 *
 * @export
 * @interface UserAdminGroups
 */
export interface UserAdminGroups {
    /**
     *
     * @type {number}
     * @memberof UserAdminGroups
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof UserAdminGroups
     */
    'name': string;
    /**
     * The permissions that the user has within the workspace.
     * @type {string}
     * @memberof UserAdminGroups
     */
    'permissions'?: string;
}
/**
 * Serializes the safe user attributes to expose for a response back to the user.
 * @export
 * @interface UserAdminResponse
 */
export interface UserAdminResponse {
    /**
     *
     * @type {number}
     * @memberof UserAdminResponse
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof UserAdminResponse
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof UserAdminResponse
     */
    'name': string;
    /**
     *
     * @type {Array<UserAdminGroups>}
     * @memberof UserAdminResponse
     */
    'groups': Array<UserAdminGroups>;
    /**
     *
     * @type {Array<UserAdminGroups>}
     * @memberof UserAdminResponse
     */
    'workspaces': Array<UserAdminGroups>;
    /**
     *
     * @type {string}
     * @memberof UserAdminResponse
     */
    'last_login'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserAdminResponse
     */
    'date_joined'?: string;
    /**
     * Designates whether this user should be treated as active. Set this to false instead of deleting accounts.
     * @type {boolean}
     * @memberof UserAdminResponse
     */
    'is_active'?: boolean;
    /**
     * Designates whether this user is an admin and has access to all workspaces and Baserow\'s admin areas.
     * @type {boolean}
     * @memberof UserAdminResponse
     */
    'is_staff'?: boolean;
}
/**
 *
 * @export
 * @interface UserFile
 */
export interface UserFile {
    /**
     *
     * @type {number}
     * @memberof UserFile
     */
    'size': number;
    /**
     *
     * @type {string}
     * @memberof UserFile
     */
    'mime_type'?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserFile
     */
    'is_image'?: boolean;
    /**
     *
     * @type {number}
     * @memberof UserFile
     */
    'image_width'?: number | null;
    /**
     *
     * @type {number}
     * @memberof UserFile
     */
    'image_height'?: number | null;
    /**
     *
     * @type {string}
     * @memberof UserFile
     */
    'uploaded_at': string;
    /**
     *
     * @type {string}
     * @memberof UserFile
     */
    'url': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UserFile
     */
    'thumbnails': {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof UserFile
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UserFile
     */
    'original_name': string;
}
/**
 *
 * @export
 * @interface UserFileUploadViaURLRequest
 */
export interface UserFileUploadViaURLRequest {
    /**
     *
     * @type {string}
     * @memberof UserFileUploadViaURLRequest
     */
    'url': string;
}
/**
 * @type UserSourceBasePublicUserSource
 * @export
 */
export type UserSourceBasePublicUserSource = {
    type: 'local_baserow';
} & LocalBaserowUserSourceBasePublicUserSource;
/**
 * @type UserSourceCreateUserSource
 * @export
 */
export type UserSourceCreateUserSource = {
    type: 'local_baserow';
} & LocalBaserowUserSourceCreateUserSource;
/**
 *
 * @export
 * @interface UserSourceForceTokenAuth200Response
 */
export interface UserSourceForceTokenAuth200Response {
    /**
     * \'access_token\' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
     * @type {string}
     * @memberof UserSourceForceTokenAuth200Response
     */
    'access_token'?: string;
    /**
     * \'refresh_token\' can be used to get a new valid \'access_token\'. This token will be valid for 168 hours.
     * @type {string}
     * @memberof UserSourceForceTokenAuth200Response
     */
    'refresh_token'?: string;
}
/**
 *
 * @export
 * @interface UserSourceTokenRefresh200Response
 */
export interface UserSourceTokenRefresh200Response {
    /**
     * \'access_token\' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
     * @type {string}
     * @memberof UserSourceTokenRefresh200Response
     */
    'access_token'?: string;
}
/**
 * A serializer used to serialize a UserSourceUser object.
 * @export
 * @interface UserSourceUser
 */
export interface UserSourceUser {
    /**
     *
     * @type {number}
     * @memberof UserSourceUser
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof UserSourceUser
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof UserSourceUser
     */
    'email': string;
    /**
     *
     * @type {number}
     * @memberof UserSourceUser
     */
    'user_source_id': number;
    /**
     *
     * @type {string}
     * @memberof UserSourceUser
     */
    'role': string;
}
/**
 * @type UserSourceUserSource
 * @export
 */
export type UserSourceUserSource = {
    type: 'local_baserow';
} & LocalBaserowUserSourceUserSource;
/**
 * @type UserSourceUserSourceRoles
 * @export
 */
export type UserSourceUserSourceRoles = {
    type: 'local_baserow';
} & LocalBaserowUserSourceUserSourceRoles;
/**
 * This serializer is used for displaying the invitation to the user that doesn\'t have access to the workspace yet, so not for invitation management purposes.
 * @export
 * @interface UserWorkspaceInvitation
 */
export interface UserWorkspaceInvitation {
    /**
     *
     * @type {number}
     * @memberof UserWorkspaceInvitation
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof UserWorkspaceInvitation
     */
    'invited_by': string;
    /**
     *
     * @type {string}
     * @memberof UserWorkspaceInvitation
     */
    'group': string;
    /**
     *
     * @type {string}
     * @memberof UserWorkspaceInvitation
     */
    'workspace': string;
    /**
     * The email address of the user that the invitation is meant for. Only a user with that email address can accept it.
     * @type {string}
     * @memberof UserWorkspaceInvitation
     */
    'email': string;
    /**
     * An optional message that the invitor can provide. This will be visible to the receiver of the invitation.
     * @type {string}
     * @memberof UserWorkspaceInvitation
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof UserWorkspaceInvitation
     */
    'created_on': string;
    /**
     *
     * @type {boolean}
     * @memberof UserWorkspaceInvitation
     */
    'email_exists': boolean;
}
/**
 * The response of the list user source users endpoint.
 * @export
 * @interface UsersPerUserSource
 */
export interface UsersPerUserSource {
    /**
     * An object keyed by the id of the user source and the value being the list of users for this user source.
     * @type {{ [key: string]: Array<UserSourceUser>; }}
     * @memberof UsersPerUserSource
     */
    'users_per_user_sources': {
        [key: string]: Array<UserSourceUser>;
    };
}
/**
 * * `any` - Any * `email` - Email * `integer` - Integer
 * @export
 * @enum {string}
 */
export declare const ValidationTypeEnum: {
    readonly Any: "any";
    readonly Email: "email";
    readonly Integer: "integer";
};
export type ValidationTypeEnum = typeof ValidationTypeEnum[keyof typeof ValidationTypeEnum];
/**
 * * `` -  * `single_select_color` - single_select_color * `conditional_color` - conditional_color
 * @export
 * @enum {string}
 */
export declare const ValueProviderTypeEnum: {
    readonly SingleSelectColor: "single_select_color";
    readonly ConditionalColor: "conditional_color";
};
export type ValueProviderTypeEnum = typeof ValueProviderTypeEnum[keyof typeof ValueProviderTypeEnum];
/**
 * * `link` - Link * `button` - Button
 * @export
 * @enum {string}
 */
export declare const VariantEnum: {
    readonly Link: "link";
    readonly Button: "button";
};
export type VariantEnum = typeof VariantEnum[keyof typeof VariantEnum];
/**
 *
 * @export
 * @interface VerifyEmail400Response
 */
export interface VerifyEmail400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof VerifyEmail400Response
     */
    'error'?: VerifyEmail400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof VerifyEmail400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const VerifyEmail400ResponseErrorEnum: {
    readonly InvalidVerificationToken: "ERROR_INVALID_VERIFICATION_TOKEN";
    readonly EmailAlreadyVerified: "ERROR_EMAIL_ALREADY_VERIFIED";
};
export type VerifyEmail400ResponseErrorEnum = typeof VerifyEmail400ResponseErrorEnum[keyof typeof VerifyEmail400ResponseErrorEnum];
/**
 *
 * @export
 * @interface VerifyEmail401Response
 */
export interface VerifyEmail401Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof VerifyEmail401Response
     */
    'error'?: VerifyEmail401ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof VerifyEmail401Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const VerifyEmail401ResponseErrorEnum: {
    readonly DeactivatedUser: "ERROR_DEACTIVATED_USER";
    readonly AuthProviderDisabled: "ERROR_AUTH_PROVIDER_DISABLED";
};
export type VerifyEmail401ResponseErrorEnum = typeof VerifyEmail401ResponseErrorEnum[keyof typeof VerifyEmail401ResponseErrorEnum];
/**
 *
 * @export
 * @interface VerifyEmailAddress
 */
export interface VerifyEmailAddress {
    /**
     *
     * @type {string}
     * @memberof VerifyEmailAddress
     */
    'token': string;
}
/**
 *
 * @export
 * @interface View
 */
export interface View {
    /**
     *
     * @type {number}
     * @memberof View
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof View
     */
    'table_id': number;
    /**
     *
     * @type {string}
     * @memberof View
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof View
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof View
     */
    'type': string;
    /**
     *
     * @type {Table}
     * @memberof View
     */
    'table': Table;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof View
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     *
     * @type {Array<ViewFilter>}
     * @memberof View
     */
    'filters'?: Array<ViewFilter>;
    /**
     *
     * @type {Array<ViewFilterGroup>}
     * @memberof View
     */
    'filter_groups'?: Array<ViewFilterGroup>;
    /**
     *
     * @type {Array<ViewSort>}
     * @memberof View
     */
    'sortings'?: Array<ViewSort>;
    /**
     *
     * @type {Array<ViewGroupBy>}
     * @memberof View
     */
    'group_bys'?: Array<ViewGroupBy>;
    /**
     *
     * @type {Array<ViewDecoration>}
     * @memberof View
     */
    'decorations'?: Array<ViewDecoration>;
    /**
     * Allows users to see results unfiltered while still keeping the filters saved for the view.
     * @type {boolean}
     * @memberof View
     */
    'filters_disabled'?: boolean;
    /**
     * Indicates whether the public view is password protected or not.  :return: True if the public view is password protected, False otherwise.
     * @type {boolean}
     * @memberof View
     */
    'public_view_has_password': boolean;
    /**
     *
     * @type {boolean}
     * @memberof View
     */
    'show_logo'?: boolean;
    /**
     *
     * @type {string}
     * @memberof View
     */
    'ownership_type': string;
    /**
     *
     * @type {number}
     * @memberof View
     */
    'owned_by_id'?: number;
}
/**
 * @type ViewCreateView
 * @export
 */
export type ViewCreateView = {
    type: 'calendar';
} & CalendarViewCreateView | {
    type: 'form';
} & FormViewCreateView | {
    type: 'gallery';
} & GalleryViewCreateView | {
    type: 'grid';
} & GridViewCreateView | {
    type: 'kanban';
} & KanbanViewCreateView;
/**
 *
 * @export
 * @interface ViewDecoration
 */
export interface ViewDecoration {
    /**
     *
     * @type {number}
     * @memberof ViewDecoration
     */
    'id': number;
    /**
     * The view to which the decoration applies. Each view can have his own decorations.
     * @type {number}
     * @memberof ViewDecoration
     */
    'view'?: number;
    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.
     * @type {string}
     * @memberof ViewDecoration
     */
    'type'?: string;
    /**
     * The value provider type that gives the value to the decorator.
     * @type {string}
     * @memberof ViewDecoration
     */
    'value_provider_type'?: string;
    /**
     * The configuration consumed by the value provider.
     * @type {any}
     * @memberof ViewDecoration
     */
    'value_provider_conf'?: any;
    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     * @type {number}
     * @memberof ViewDecoration
     */
    'order'?: number;
}
/**
 *
 * @export
 * @interface ViewFieldOptions
 */
export interface ViewFieldOptions {
    /**
     * An object containing the field id as key and the properties related to view as value.
     * @type {{ [key: string]: CalendarViewFieldOptions; }}
     * @memberof ViewFieldOptions
     */
    'field_options': {
        [key: string]: CalendarViewFieldOptions;
    };
}
/**
 *
 * @export
 * @interface ViewFilter
 */
export interface ViewFilter {
    /**
     *
     * @type {number}
     * @memberof ViewFilter
     */
    'id': number;
    /**
     * The view to which the filter applies. Each view can have his own filters.
     * @type {number}
     * @memberof ViewFilter
     */
    'view': number;
    /**
     * The field of which the value must be compared to the filter value.
     * @type {number}
     * @memberof ViewFilter
     */
    'field': number;
    /**
     * Indicates how the field\'s value must be compared to the filter\'s value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
     * @type {string}
     * @memberof ViewFilter
     */
    'type': string;
    /**
     * The filter value that must be compared to the field\'s value.
     * @type {string}
     * @memberof ViewFilter
     */
    'value'?: string;
    /**
     * Can contain unique preloaded values per filter. This is for example used by the `link_row_has` filter to communicate the display name if a value is provided.
     * @type {{ [key: string]: any; }}
     * @memberof ViewFilter
     */
    'preload_values': {
        [key: string]: any;
    };
    /**
     * The id of the filter group this filter belongs to. If this is null, the filter is not part of a filter group.
     * @type {number}
     * @memberof ViewFilter
     */
    'group'?: number | null;
}
/**
 *
 * @export
 * @interface ViewFilterGroup
 */
export interface ViewFilterGroup {
    /**
     *
     * @type {number}
     * @memberof ViewFilterGroup
     */
    'id': number;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR) in the group to be shown.  * `AND` - And * `OR` - Or
     * @type {ConditionTypeEnum}
     * @memberof ViewFilterGroup
     */
    'filter_type'?: ConditionTypeEnum;
    /**
     * The view to which the filter group applies to. Each view can have its own filter groups.
     * @type {number}
     * @memberof ViewFilterGroup
     */
    'view': number;
    /**
     *
     * @type {number}
     * @memberof ViewFilterGroup
     */
    'parent_group'?: number | null;
}
/**
 *
 * @export
 * @interface ViewGroupBy
 */
export interface ViewGroupBy {
    /**
     *
     * @type {number}
     * @memberof ViewGroupBy
     */
    'id': number;
    /**
     * The view to which the group by applies. Each view can have his own group bys.
     * @type {number}
     * @memberof ViewGroupBy
     */
    'view': number;
    /**
     * The field that must be grouped by.
     * @type {number}
     * @memberof ViewGroupBy
     */
    'field': number;
    /**
     * Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A.  * `ASC` - Ascending * `DESC` - Descending
     * @type {OrderEnum}
     * @memberof ViewGroupBy
     */
    'order'?: OrderEnum;
    /**
     * The pixel width of the group by in the related view.
     * @type {number}
     * @memberof ViewGroupBy
     */
    'width'?: number;
}
/**
 *
 * @export
 * @interface ViewSort
 */
export interface ViewSort {
    /**
     *
     * @type {number}
     * @memberof ViewSort
     */
    'id': number;
    /**
     * The view to which the sort applies. Each view can have his own sortings.
     * @type {number}
     * @memberof ViewSort
     */
    'view': number;
    /**
     * The field that must be sorted on.
     * @type {number}
     * @memberof ViewSort
     */
    'field': number;
    /**
     * Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A.  * `ASC` - Ascending * `DESC` - Descending
     * @type {OrderEnum}
     * @memberof ViewSort
     */
    'order'?: OrderEnum;
}
/**
 * * `grid` - grid * `gallery` - gallery * `form` - form * `kanban` - kanban * `calendar` - calendar
 * @export
 * @enum {string}
 */
export declare const ViewTypesEnum: {
    readonly Grid: "grid";
    readonly Gallery: "gallery";
    readonly Form: "form";
    readonly Kanban: "kanban";
    readonly Calendar: "calendar";
};
export type ViewTypesEnum = typeof ViewTypesEnum[keyof typeof ViewTypesEnum];
/**
 * @type ViewView
 * @export
 */
export type ViewView = {
    type: 'calendar';
} & CalendarViewView | {
    type: 'form';
} & FormViewView | {
    type: 'gallery';
} & GalleryViewView | {
    type: 'grid';
} & GridViewView | {
    type: 'kanban';
} & KanbanViewView;
/**
 * * `all` - All * `logged-in` - Logged In * `not-logged` - Not Logged
 * @export
 * @enum {string}
 */
export declare const VisibilityEnum: {
    readonly All: "all";
    readonly LoggedIn: "logged-in";
    readonly NotLogged: "not-logged";
};
export type VisibilityEnum = typeof VisibilityEnum[keyof typeof VisibilityEnum];
/**
 *
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     *
     * @type {number}
     * @memberof Workspace
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'generative_ai_models_enabled': string;
}
/**
 *
 * @export
 * @interface WorkspaceAdminUsers
 */
export interface WorkspaceAdminUsers {
    /**
     *
     * @type {number}
     * @memberof WorkspaceAdminUsers
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof WorkspaceAdminUsers
     */
    'email': string;
    /**
     * The permissions that the user has within the workspace.
     * @type {string}
     * @memberof WorkspaceAdminUsers
     */
    'permissions'?: string;
}
/**
 *
 * @export
 * @interface WorkspaceGetApplication400Response
 */
export interface WorkspaceGetApplication400Response {
    /**
     * Machine readable error indicating what went wrong.
     * @type {string}
     * @memberof WorkspaceGetApplication400Response
     */
    'error'?: WorkspaceGetApplication400ResponseErrorEnum;
    /**
     *
     * @type {EmailTester400ResponseDetail}
     * @memberof WorkspaceGetApplication400Response
     */
    'detail'?: EmailTester400ResponseDetail;
}
export declare const WorkspaceGetApplication400ResponseErrorEnum: {
    readonly UserNotInGroup: "ERROR_USER_NOT_IN_GROUP";
    readonly RequestBodyValidation: "ERROR_REQUEST_BODY_VALIDATION";
};
export type WorkspaceGetApplication400ResponseErrorEnum = typeof WorkspaceGetApplication400ResponseErrorEnum[keyof typeof WorkspaceGetApplication400ResponseErrorEnum];
/**
 *
 * @export
 * @interface WorkspaceInvitation
 */
export interface WorkspaceInvitation {
    /**
     *
     * @type {number}
     * @memberof WorkspaceInvitation
     */
    'id': number;
    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     * @type {number}
     * @memberof WorkspaceInvitation
     */
    'group': number;
    /**
     * The workspace that the user will get access to once the invitation is accepted.
     * @type {number}
     * @memberof WorkspaceInvitation
     */
    'workspace': number;
    /**
     * The email address of the user that the invitation is meant for. Only a user with that email address can accept it.
     * @type {string}
     * @memberof WorkspaceInvitation
     */
    'email': string;
    /**
     * The permissions that the user is going to get within the workspace after accepting the invitation.
     * @type {string}
     * @memberof WorkspaceInvitation
     */
    'permissions'?: string;
    /**
     * An optional message that the invitor can provide. This will be visible to the receiver of the invitation.
     * @type {string}
     * @memberof WorkspaceInvitation
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceInvitation
     */
    'created_on': string;
}
/**
 *
 * @export
 * @interface WorkspaceUser
 */
export interface WorkspaceUser {
    /**
     *
     * @type {number}
     * @memberof WorkspaceUser
     */
    'id': number;
    /**
     * User defined name.
     * @type {string}
     * @memberof WorkspaceUser
     */
    'name': string;
    /**
     * User email.
     * @type {string}
     * @memberof WorkspaceUser
     */
    'email': string;
    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     * @type {number}
     * @memberof WorkspaceUser
     */
    'group': number;
    /**
     * The workspace that the user has access to.
     * @type {number}
     * @memberof WorkspaceUser
     */
    'workspace': number;
    /**
     * The permissions that the user has within the workspace.
     * @type {string}
     * @memberof WorkspaceUser
     */
    'permissions'?: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceUser
     */
    'created_on': string;
    /**
     * The user that has access to the workspace.
     * @type {number}
     * @memberof WorkspaceUser
     */
    'user_id': number;
    /**
     * True if user account is pending deletion.
     * @type {boolean}
     * @memberof WorkspaceUser
     */
    'to_be_deleted': boolean;
}
/**
 * A serializer for the `WorkspaceUserSerializer.teams` field.
 * @export
 * @interface WorkspaceUserEnterpriseTeam
 */
export interface WorkspaceUserEnterpriseTeam {
    /**
     * The unique identifier for this team.
     * @type {number}
     * @memberof WorkspaceUserEnterpriseTeam
     */
    'id': number;
    /**
     * The team name that this group user belongs to.
     * @type {string}
     * @memberof WorkspaceUserEnterpriseTeam
     */
    'name': string;
}
/**
 * This serializers includes relevant fields of the Workspace model, but also some WorkspaceUser specific fields related to the workspace user relation.  Additionally, the list of users are included for each workspace.
 * @export
 * @interface WorkspaceUserWorkspace
 */
export interface WorkspaceUserWorkspace {
    /**
     * Workspace id.
     * @type {number}
     * @memberof WorkspaceUserWorkspace
     */
    'id': number;
    /**
     * Workspace name.
     * @type {string}
     * @memberof WorkspaceUserWorkspace
     */
    'name': string;
    /**
     * List of all workspace users.
     * @type {Array<WorkspaceUser>}
     * @memberof WorkspaceUserWorkspace
     */
    'users': Array<WorkspaceUser>;
    /**
     * The requesting user\'s order within the workspace users.
     * @type {number}
     * @memberof WorkspaceUserWorkspace
     */
    'order': number;
    /**
     * The requesting user\'s permissions for the workspace.
     * @type {string}
     * @memberof WorkspaceUserWorkspace
     */
    'permissions': string;
    /**
     * The number of unread notifications for the requesting user.
     * @type {number}
     * @memberof WorkspaceUserWorkspace
     */
    'unread_notifications_count': number;
    /**
     * Generative AI models available in this workspace.
     * @type {string}
     * @memberof WorkspaceUserWorkspace
     */
    'generative_ai_models_enabled': string;
}
/**
 *
 * @export
 * @interface WorkspacesAdminResponse
 */
export interface WorkspacesAdminResponse {
    /**
     *
     * @type {number}
     * @memberof WorkspacesAdminResponse
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof WorkspacesAdminResponse
     */
    'name': string;
    /**
     *
     * @type {Array<WorkspaceAdminUsers>}
     * @memberof WorkspacesAdminResponse
     */
    'users': Array<WorkspaceAdminUsers>;
    /**
     *
     * @type {number}
     * @memberof WorkspacesAdminResponse
     */
    'application_count': number;
    /**
     *
     * @type {number}
     * @memberof WorkspacesAdminResponse
     */
    'row_count': number;
    /**
     *
     * @type {number}
     * @memberof WorkspacesAdminResponse
     */
    'storage_usage'?: number | null;
    /**
     *
     * @type {number}
     * @memberof WorkspacesAdminResponse
     */
    'seats_taken': number;
    /**
     *
     * @type {number}
     * @memberof WorkspacesAdminResponse
     */
    'free_users': number;
    /**
     *
     * @type {string}
     * @memberof WorkspacesAdminResponse
     */
    'created_on': string;
}
/**
 * AdminApi - axios parameter creator
 * @export
 */
export declare const AdminApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds the user related to the provided parameter and to the license related to the parameter. This only happens if there are enough seats left on the license and if the user is not already on the license.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {number} userId The ID of the user that must be added to the license.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAddUserToLicense: (id: number, userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates and returns a new user if the requesting user is staff. This works even if new signups are disabled.   This is a **premium** feature.
     * @param {UserAdminCreate} userAdminCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateUser: (userAdminCreate: UserAdminCreate, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the new and active users for the last 24 hours, 7 days and 30 days. The `previous_` values are the values of the period before, so for example `previous_new_users_last_24_hours` are the new users that signed up from 48 to 24 hours ago. It can be used to calculate an increase or decrease in the amount of signups. A list of the new and active users for every day for the last 30 days is also included.  This is a **premium** feature.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDashboard: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [admin_delete_workspace](#tag/Admin/operation/admin_delete_workspace).**  **Support for this endpoint will end in 2024.**   Deletes the specified group and the applications inside that group, if the requesting user is staff.   This is a **premium** feature.
     * @param {number} groupId The id of the group to delete
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    adminDeleteGroup: (groupId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the specified user, if the requesting user has admin permissions. You cannot delete yourself.   This is a **premium** feature.
     * @param {number} userId The id of the user to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteUser: (userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the specified workspace and the applications inside that workspace, if the requesting user is staff.   This is a **premium** feature.
     * @param {number} workspaceId The id of the workspace to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteWorkspace: (workspaceId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates specified user attributes and returns the updated user if the requesting user is staff. You cannot update yourself to no longer be an admin or active.   This is a **premium** feature.
     * @param {number} userId The id of the user to edit
     * @param {PatchedUserAdminUpdate} [patchedUserAdminUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEditUser: (userId: number, patchedUserAdminUpdate?: PatchedUserAdminUpdate, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fills the remaining empty seats of the license with the first users that are found.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminFillRemainingSeatsOfLicense: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with detailed information about the license related to the provided parameter.
     * @param {number} id The internal identifier of the license.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetLicense: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint allows staff to impersonate another user by requesting a JWT token and user object. The requesting user must have staff access in order to do this. It\'s not possible to impersonate a superuser or staff.  This is a **premium** feature.
     * @param {BaserowImpersonateAuthToken} baserowImpersonateAuthToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminImpersonateUser: (baserowImpersonateAuthToken: BaserowImpersonateAuthToken, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint checks with the authority if the license needs to be updated. It also checks if the license is operating within its limits and might take action on that. It could also happen that the license has been deleted because there is an instance id mismatch or because it\'s invalid. In that case a `204` status code is returned.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLicenseCheck: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint can be used to lookup users that can be added to a  license. Users that are already in the license are not returned here. Optionally a `search` query parameter can be provided to filter the results.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {number} [page] Defines which page of users should be returned.
     * @param {string} [search] If provided, only users where the name or email contains the value are returned.
     * @param {number} [size] Defines how many users should be returned per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLicenseLookupUsers: (id: number, page?: number, search?: string, size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the valid licenses that are registered to this instance. A premium license can be used to unlock the premium features for a fixed amount of users. An enterprise license can similarly be used to unlock enterpise features. More information about self hosted licenses can be found on our pricing page https://baserow.io/pricing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLicenses: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [admin_list_workspaces](#tag/Admin/operation/admin_list_workspaces).**  **Support for this endpoint will end in 2024.**   Returns all groups with detailed information on each group, if the requesting user is staff.  This is a **premium** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only groups with id or name that match the query will be returned.
     * @param {number} [size] Defines how many groups should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;id, name, application_count, created_on, row_count, storage_usage&#x60;. For example &#x60;sorts&#x3D;-id,-name&#x60; will sort the groups first by descending id and then ascending name. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    adminListGroups: (page?: number, search?: string, size?: number, sorts?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all users with detailed information on each user, if the requesting user is staff.   This is a **premium** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only users with id or username or first_name that match the query will be returned.
     * @param {number} [size] Defines how many users should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;id, is_active, name, username, date_joined, last_login&#x60;. For example &#x60;sorts&#x3D;-id,-is_active&#x60; will sort the users first by descending id and then ascending is_active. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListUsers: (page?: number, search?: string, size?: number, sorts?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all workspaces with detailed information on each workspace, if the requesting user is staff.  This is a **premium** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only workspaces with id or name that match the query will be returned.
     * @param {number} [size] Defines how many workspaces should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;id, name, application_count, created_on, row_count, storage_usage&#x60;. For example &#x60;sorts&#x3D;-id,-name&#x60; will sort the workspaces first by descending id and then ascending name. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListWorkspaces: (page?: number, search?: string, size?: number, sorts?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers a new license. After registering you can assign users to the license that will be able to use the license\'s features while the license is active. If an existing license with the same `license_id` already exists and the provided license has been issued later than that one, the existing one will be upgraded.
     * @param {RegisterLicense} registerLicense
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRegisterLicense: (registerLicense: RegisterLicense, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Removes all the users that are on the license. This will empty all the seats.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRemoveAllUsersFromLicense: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Removes the existing license related to the provided parameter. If the license is active, then all the users that are using the license will lose access to the features granted by that license.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRemoveLicense: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Removes the user related to the provided parameter and to the license related to the parameter. This only happens if the user is on the license, otherwise nothing will happen.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {number} userId The ID of the user that must be removed from the license.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRemoveUserFromLicense: (id: number, userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminApi - functional programming interface
 * @export
 */
export declare const AdminApiFp: (configuration?: Configuration) => {
    /**
     * Adds the user related to the provided parameter and to the license related to the parameter. This only happens if there are enough seats left on the license and if the user is not already on the license.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {number} userId The ID of the user that must be added to the license.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAddUserToLicense(id: number, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseUser>>;
    /**
     * Creates and returns a new user if the requesting user is staff. This works even if new signups are disabled.   This is a **premium** feature.
     * @param {UserAdminCreate} userAdminCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateUser(userAdminCreate: UserAdminCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAdminResponse>>;
    /**
     * Returns the new and active users for the last 24 hours, 7 days and 30 days. The `previous_` values are the values of the period before, so for example `previous_new_users_last_24_hours` are the new users that signed up from 48 to 24 hours ago. It can be used to calculate an increase or decrease in the amount of signups. A list of the new and active users for every day for the last 30 days is also included.  This is a **premium** feature.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDashboard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDashboard>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [admin_delete_workspace](#tag/Admin/operation/admin_delete_workspace).**  **Support for this endpoint will end in 2024.**   Deletes the specified group and the applications inside that group, if the requesting user is staff.   This is a **premium** feature.
     * @param {number} groupId The id of the group to delete
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    adminDeleteGroup(groupId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes the specified user, if the requesting user has admin permissions. You cannot delete yourself.   This is a **premium** feature.
     * @param {number} userId The id of the user to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes the specified workspace and the applications inside that workspace, if the requesting user is staff.   This is a **premium** feature.
     * @param {number} workspaceId The id of the workspace to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteWorkspace(workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates specified user attributes and returns the updated user if the requesting user is staff. You cannot update yourself to no longer be an admin or active.   This is a **premium** feature.
     * @param {number} userId The id of the user to edit
     * @param {PatchedUserAdminUpdate} [patchedUserAdminUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEditUser(userId: number, patchedUserAdminUpdate?: PatchedUserAdminUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAdminResponse>>;
    /**
     * Fills the remaining empty seats of the license with the first users that are found.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminFillRemainingSeatsOfLicense(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LicenseUser>>>;
    /**
     * Responds with detailed information about the license related to the provided parameter.
     * @param {number} id The internal identifier of the license.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetLicense(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseWithUsers>>;
    /**
     * This endpoint allows staff to impersonate another user by requesting a JWT token and user object. The requesting user must have staff access in order to do this. It\'s not possible to impersonate a superuser or staff.  This is a **premium** feature.
     * @param {BaserowImpersonateAuthToken} baserowImpersonateAuthToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminImpersonateUser(baserowImpersonateAuthToken: BaserowImpersonateAuthToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminImpersonateUser200Response>>;
    /**
     * This endpoint checks with the authority if the license needs to be updated. It also checks if the license is operating within its limits and might take action on that. It could also happen that the license has been deleted because there is an instance id mismatch or because it\'s invalid. In that case a `204` status code is returned.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLicenseCheck(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseWithUsers>>;
    /**
     * This endpoint can be used to lookup users that can be added to a  license. Users that are already in the license are not returned here. Optionally a `search` query parameter can be provided to filter the results.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {number} [page] Defines which page of users should be returned.
     * @param {string} [search] If provided, only users where the name or email contains the value are returned.
     * @param {number} [size] Defines how many users should be returned per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLicenseLookupUsers(id: number, page?: number, search?: string, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerLicenseUserLookup>>;
    /**
     * Lists all the valid licenses that are registered to this instance. A premium license can be used to unlock the premium features for a fixed amount of users. An enterprise license can similarly be used to unlock enterpise features. More information about self hosted licenses can be found on our pricing page https://baserow.io/pricing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLicenses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<License>>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [admin_list_workspaces](#tag/Admin/operation/admin_list_workspaces).**  **Support for this endpoint will end in 2024.**   Returns all groups with detailed information on each group, if the requesting user is staff.  This is a **premium** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only groups with id or name that match the query will be returned.
     * @param {number} [size] Defines how many groups should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;id, name, application_count, created_on, row_count, storage_usage&#x60;. For example &#x60;sorts&#x3D;-id,-name&#x60; will sort the groups first by descending id and then ascending name. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    adminListGroups(page?: number, search?: string, size?: number, sorts?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerWorkspacesAdminResponse>>;
    /**
     * Returns all users with detailed information on each user, if the requesting user is staff.   This is a **premium** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only users with id or username or first_name that match the query will be returned.
     * @param {number} [size] Defines how many users should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;id, is_active, name, username, date_joined, last_login&#x60;. For example &#x60;sorts&#x3D;-id,-is_active&#x60; will sort the users first by descending id and then ascending is_active. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListUsers(page?: number, search?: string, size?: number, sorts?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerUserAdminResponse>>;
    /**
     * Returns all workspaces with detailed information on each workspace, if the requesting user is staff.  This is a **premium** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only workspaces with id or name that match the query will be returned.
     * @param {number} [size] Defines how many workspaces should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;id, name, application_count, created_on, row_count, storage_usage&#x60;. For example &#x60;sorts&#x3D;-id,-name&#x60; will sort the workspaces first by descending id and then ascending name. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListWorkspaces(page?: number, search?: string, size?: number, sorts?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerWorkspacesAdminResponse>>;
    /**
     * Registers a new license. After registering you can assign users to the license that will be able to use the license\'s features while the license is active. If an existing license with the same `license_id` already exists and the provided license has been issued later than that one, the existing one will be upgraded.
     * @param {RegisterLicense} registerLicense
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRegisterLicense(registerLicense: RegisterLicense, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<License>>;
    /**
     * Removes all the users that are on the license. This will empty all the seats.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRemoveAllUsersFromLicense(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Removes the existing license related to the provided parameter. If the license is active, then all the users that are using the license will lose access to the features granted by that license.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRemoveLicense(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Removes the user related to the provided parameter and to the license related to the parameter. This only happens if the user is on the license, otherwise nothing will happen.
     * @param {number} id The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @param {number} userId The ID of the user that must be removed from the license.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRemoveUserFromLicense(id: number, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AdminApi - factory interface
 * @export
 */
export declare const AdminApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds the user related to the provided parameter and to the license related to the parameter. This only happens if there are enough seats left on the license and if the user is not already on the license.
     * @param {AdminApiAdminAddUserToLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAddUserToLicense(requestParameters: AdminApiAdminAddUserToLicenseRequest, options?: RawAxiosRequestConfig): AxiosPromise<LicenseUser>;
    /**
     * Creates and returns a new user if the requesting user is staff. This works even if new signups are disabled.   This is a **premium** feature.
     * @param {AdminApiAdminCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateUser(requestParameters: AdminApiAdminCreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAdminResponse>;
    /**
     * Returns the new and active users for the last 24 hours, 7 days and 30 days. The `previous_` values are the values of the period before, so for example `previous_new_users_last_24_hours` are the new users that signed up from 48 to 24 hours ago. It can be used to calculate an increase or decrease in the amount of signups. A list of the new and active users for every day for the last 30 days is also included.  This is a **premium** feature.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDashboard(options?: RawAxiosRequestConfig): AxiosPromise<AdminDashboard>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [admin_delete_workspace](#tag/Admin/operation/admin_delete_workspace).**  **Support for this endpoint will end in 2024.**   Deletes the specified group and the applications inside that group, if the requesting user is staff.   This is a **premium** feature.
     * @param {AdminApiAdminDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    adminDeleteGroup(requestParameters: AdminApiAdminDeleteGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes the specified user, if the requesting user has admin permissions. You cannot delete yourself.   This is a **premium** feature.
     * @param {AdminApiAdminDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteUser(requestParameters: AdminApiAdminDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes the specified workspace and the applications inside that workspace, if the requesting user is staff.   This is a **premium** feature.
     * @param {AdminApiAdminDeleteWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteWorkspace(requestParameters: AdminApiAdminDeleteWorkspaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates specified user attributes and returns the updated user if the requesting user is staff. You cannot update yourself to no longer be an admin or active.   This is a **premium** feature.
     * @param {AdminApiAdminEditUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEditUser(requestParameters: AdminApiAdminEditUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserAdminResponse>;
    /**
     * Fills the remaining empty seats of the license with the first users that are found.
     * @param {AdminApiAdminFillRemainingSeatsOfLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminFillRemainingSeatsOfLicense(requestParameters: AdminApiAdminFillRemainingSeatsOfLicenseRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<LicenseUser>>;
    /**
     * Responds with detailed information about the license related to the provided parameter.
     * @param {AdminApiAdminGetLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetLicense(requestParameters: AdminApiAdminGetLicenseRequest, options?: RawAxiosRequestConfig): AxiosPromise<LicenseWithUsers>;
    /**
     * This endpoint allows staff to impersonate another user by requesting a JWT token and user object. The requesting user must have staff access in order to do this. It\'s not possible to impersonate a superuser or staff.  This is a **premium** feature.
     * @param {AdminApiAdminImpersonateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminImpersonateUser(requestParameters: AdminApiAdminImpersonateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdminImpersonateUser200Response>;
    /**
     * This endpoint checks with the authority if the license needs to be updated. It also checks if the license is operating within its limits and might take action on that. It could also happen that the license has been deleted because there is an instance id mismatch or because it\'s invalid. In that case a `204` status code is returned.
     * @param {AdminApiAdminLicenseCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLicenseCheck(requestParameters: AdminApiAdminLicenseCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<LicenseWithUsers>;
    /**
     * This endpoint can be used to lookup users that can be added to a  license. Users that are already in the license are not returned here. Optionally a `search` query parameter can be provided to filter the results.
     * @param {AdminApiAdminLicenseLookupUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLicenseLookupUsers(requestParameters: AdminApiAdminLicenseLookupUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerLicenseUserLookup>;
    /**
     * Lists all the valid licenses that are registered to this instance. A premium license can be used to unlock the premium features for a fixed amount of users. An enterprise license can similarly be used to unlock enterpise features. More information about self hosted licenses can be found on our pricing page https://baserow.io/pricing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLicenses(options?: RawAxiosRequestConfig): AxiosPromise<Array<License>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [admin_list_workspaces](#tag/Admin/operation/admin_list_workspaces).**  **Support for this endpoint will end in 2024.**   Returns all groups with detailed information on each group, if the requesting user is staff.  This is a **premium** feature.
     * @param {AdminApiAdminListGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    adminListGroups(requestParameters?: AdminApiAdminListGroupsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerWorkspacesAdminResponse>;
    /**
     * Returns all users with detailed information on each user, if the requesting user is staff.   This is a **premium** feature.
     * @param {AdminApiAdminListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListUsers(requestParameters?: AdminApiAdminListUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerUserAdminResponse>;
    /**
     * Returns all workspaces with detailed information on each workspace, if the requesting user is staff.  This is a **premium** feature.
     * @param {AdminApiAdminListWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListWorkspaces(requestParameters?: AdminApiAdminListWorkspacesRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerWorkspacesAdminResponse>;
    /**
     * Registers a new license. After registering you can assign users to the license that will be able to use the license\'s features while the license is active. If an existing license with the same `license_id` already exists and the provided license has been issued later than that one, the existing one will be upgraded.
     * @param {AdminApiAdminRegisterLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRegisterLicense(requestParameters: AdminApiAdminRegisterLicenseRequest, options?: RawAxiosRequestConfig): AxiosPromise<License>;
    /**
     * Removes all the users that are on the license. This will empty all the seats.
     * @param {AdminApiAdminRemoveAllUsersFromLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRemoveAllUsersFromLicense(requestParameters: AdminApiAdminRemoveAllUsersFromLicenseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Removes the existing license related to the provided parameter. If the license is active, then all the users that are using the license will lose access to the features granted by that license.
     * @param {AdminApiAdminRemoveLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRemoveLicense(requestParameters: AdminApiAdminRemoveLicenseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Removes the user related to the provided parameter and to the license related to the parameter. This only happens if the user is on the license, otherwise nothing will happen.
     * @param {AdminApiAdminRemoveUserFromLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRemoveUserFromLicense(requestParameters: AdminApiAdminRemoveUserFromLicenseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for adminAddUserToLicense operation in AdminApi.
 * @export
 * @interface AdminApiAdminAddUserToLicenseRequest
 */
export interface AdminApiAdminAddUserToLicenseRequest {
    /**
     * The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @type {number}
     * @memberof AdminApiAdminAddUserToLicense
     */
    readonly id: number;
    /**
     * The ID of the user that must be added to the license.
     * @type {number}
     * @memberof AdminApiAdminAddUserToLicense
     */
    readonly userId: number;
}
/**
 * Request parameters for adminCreateUser operation in AdminApi.
 * @export
 * @interface AdminApiAdminCreateUserRequest
 */
export interface AdminApiAdminCreateUserRequest {
    /**
     *
     * @type {UserAdminCreate}
     * @memberof AdminApiAdminCreateUser
     */
    readonly userAdminCreate: UserAdminCreate;
}
/**
 * Request parameters for adminDeleteGroup operation in AdminApi.
 * @export
 * @interface AdminApiAdminDeleteGroupRequest
 */
export interface AdminApiAdminDeleteGroupRequest {
    /**
     * The id of the group to delete
     * @type {number}
     * @memberof AdminApiAdminDeleteGroup
     */
    readonly groupId: number;
}
/**
 * Request parameters for adminDeleteUser operation in AdminApi.
 * @export
 * @interface AdminApiAdminDeleteUserRequest
 */
export interface AdminApiAdminDeleteUserRequest {
    /**
     * The id of the user to delete
     * @type {number}
     * @memberof AdminApiAdminDeleteUser
     */
    readonly userId: number;
}
/**
 * Request parameters for adminDeleteWorkspace operation in AdminApi.
 * @export
 * @interface AdminApiAdminDeleteWorkspaceRequest
 */
export interface AdminApiAdminDeleteWorkspaceRequest {
    /**
     * The id of the workspace to delete
     * @type {number}
     * @memberof AdminApiAdminDeleteWorkspace
     */
    readonly workspaceId: number;
}
/**
 * Request parameters for adminEditUser operation in AdminApi.
 * @export
 * @interface AdminApiAdminEditUserRequest
 */
export interface AdminApiAdminEditUserRequest {
    /**
     * The id of the user to edit
     * @type {number}
     * @memberof AdminApiAdminEditUser
     */
    readonly userId: number;
    /**
     *
     * @type {PatchedUserAdminUpdate}
     * @memberof AdminApiAdminEditUser
     */
    readonly patchedUserAdminUpdate?: PatchedUserAdminUpdate;
}
/**
 * Request parameters for adminFillRemainingSeatsOfLicense operation in AdminApi.
 * @export
 * @interface AdminApiAdminFillRemainingSeatsOfLicenseRequest
 */
export interface AdminApiAdminFillRemainingSeatsOfLicenseRequest {
    /**
     * The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @type {number}
     * @memberof AdminApiAdminFillRemainingSeatsOfLicense
     */
    readonly id: number;
}
/**
 * Request parameters for adminGetLicense operation in AdminApi.
 * @export
 * @interface AdminApiAdminGetLicenseRequest
 */
export interface AdminApiAdminGetLicenseRequest {
    /**
     * The internal identifier of the license.
     * @type {number}
     * @memberof AdminApiAdminGetLicense
     */
    readonly id: number;
}
/**
 * Request parameters for adminImpersonateUser operation in AdminApi.
 * @export
 * @interface AdminApiAdminImpersonateUserRequest
 */
export interface AdminApiAdminImpersonateUserRequest {
    /**
     *
     * @type {BaserowImpersonateAuthToken}
     * @memberof AdminApiAdminImpersonateUser
     */
    readonly baserowImpersonateAuthToken: BaserowImpersonateAuthToken;
}
/**
 * Request parameters for adminLicenseCheck operation in AdminApi.
 * @export
 * @interface AdminApiAdminLicenseCheckRequest
 */
export interface AdminApiAdminLicenseCheckRequest {
    /**
     * The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @type {number}
     * @memberof AdminApiAdminLicenseCheck
     */
    readonly id: number;
}
/**
 * Request parameters for adminLicenseLookupUsers operation in AdminApi.
 * @export
 * @interface AdminApiAdminLicenseLookupUsersRequest
 */
export interface AdminApiAdminLicenseLookupUsersRequest {
    /**
     * The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @type {number}
     * @memberof AdminApiAdminLicenseLookupUsers
     */
    readonly id: number;
    /**
     * Defines which page of users should be returned.
     * @type {number}
     * @memberof AdminApiAdminLicenseLookupUsers
     */
    readonly page?: number;
    /**
     * If provided, only users where the name or email contains the value are returned.
     * @type {string}
     * @memberof AdminApiAdminLicenseLookupUsers
     */
    readonly search?: string;
    /**
     * Defines how many users should be returned per page.
     * @type {number}
     * @memberof AdminApiAdminLicenseLookupUsers
     */
    readonly size?: number;
}
/**
 * Request parameters for adminListGroups operation in AdminApi.
 * @export
 * @interface AdminApiAdminListGroupsRequest
 */
export interface AdminApiAdminListGroupsRequest {
    /**
     * Defines which page should be returned.
     * @type {number}
     * @memberof AdminApiAdminListGroups
     */
    readonly page?: number;
    /**
     * If provided only groups with id or name that match the query will be returned.
     * @type {string}
     * @memberof AdminApiAdminListGroups
     */
    readonly search?: string;
    /**
     * Defines how many groups should be returned per page.
     * @type {number}
     * @memberof AdminApiAdminListGroups
     */
    readonly size?: number;
    /**
     * A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;id, name, application_count, created_on, row_count, storage_usage&#x60;. For example &#x60;sorts&#x3D;-id,-name&#x60; will sort the groups first by descending id and then ascending name. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @type {string}
     * @memberof AdminApiAdminListGroups
     */
    readonly sorts?: string;
}
/**
 * Request parameters for adminListUsers operation in AdminApi.
 * @export
 * @interface AdminApiAdminListUsersRequest
 */
export interface AdminApiAdminListUsersRequest {
    /**
     * Defines which page should be returned.
     * @type {number}
     * @memberof AdminApiAdminListUsers
     */
    readonly page?: number;
    /**
     * If provided only users with id or username or first_name that match the query will be returned.
     * @type {string}
     * @memberof AdminApiAdminListUsers
     */
    readonly search?: string;
    /**
     * Defines how many users should be returned per page.
     * @type {number}
     * @memberof AdminApiAdminListUsers
     */
    readonly size?: number;
    /**
     * A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;id, is_active, name, username, date_joined, last_login&#x60;. For example &#x60;sorts&#x3D;-id,-is_active&#x60; will sort the users first by descending id and then ascending is_active. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @type {string}
     * @memberof AdminApiAdminListUsers
     */
    readonly sorts?: string;
}
/**
 * Request parameters for adminListWorkspaces operation in AdminApi.
 * @export
 * @interface AdminApiAdminListWorkspacesRequest
 */
export interface AdminApiAdminListWorkspacesRequest {
    /**
     * Defines which page should be returned.
     * @type {number}
     * @memberof AdminApiAdminListWorkspaces
     */
    readonly page?: number;
    /**
     * If provided only workspaces with id or name that match the query will be returned.
     * @type {string}
     * @memberof AdminApiAdminListWorkspaces
     */
    readonly search?: string;
    /**
     * Defines how many workspaces should be returned per page.
     * @type {number}
     * @memberof AdminApiAdminListWorkspaces
     */
    readonly size?: number;
    /**
     * A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;id, name, application_count, created_on, row_count, storage_usage&#x60;. For example &#x60;sorts&#x3D;-id,-name&#x60; will sort the workspaces first by descending id and then ascending name. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @type {string}
     * @memberof AdminApiAdminListWorkspaces
     */
    readonly sorts?: string;
}
/**
 * Request parameters for adminRegisterLicense operation in AdminApi.
 * @export
 * @interface AdminApiAdminRegisterLicenseRequest
 */
export interface AdminApiAdminRegisterLicenseRequest {
    /**
     *
     * @type {RegisterLicense}
     * @memberof AdminApiAdminRegisterLicense
     */
    readonly registerLicense: RegisterLicense;
}
/**
 * Request parameters for adminRemoveAllUsersFromLicense operation in AdminApi.
 * @export
 * @interface AdminApiAdminRemoveAllUsersFromLicenseRequest
 */
export interface AdminApiAdminRemoveAllUsersFromLicenseRequest {
    /**
     * The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @type {number}
     * @memberof AdminApiAdminRemoveAllUsersFromLicense
     */
    readonly id: number;
}
/**
 * Request parameters for adminRemoveLicense operation in AdminApi.
 * @export
 * @interface AdminApiAdminRemoveLicenseRequest
 */
export interface AdminApiAdminRemoveLicenseRequest {
    /**
     * The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @type {number}
     * @memberof AdminApiAdminRemoveLicense
     */
    readonly id: number;
}
/**
 * Request parameters for adminRemoveUserFromLicense operation in AdminApi.
 * @export
 * @interface AdminApiAdminRemoveUserFromLicenseRequest
 */
export interface AdminApiAdminRemoveUserFromLicenseRequest {
    /**
     * The internal identifier of the license, this is &#x60;id&#x60; and not &#x60;license_id&#x60;.
     * @type {number}
     * @memberof AdminApiAdminRemoveUserFromLicense
     */
    readonly id: number;
    /**
     * The ID of the user that must be removed from the license.
     * @type {number}
     * @memberof AdminApiAdminRemoveUserFromLicense
     */
    readonly userId: number;
}
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export declare class AdminApi extends BaseAPI {
    /**
     * Adds the user related to the provided parameter and to the license related to the parameter. This only happens if there are enough seats left on the license and if the user is not already on the license.
     * @param {AdminApiAdminAddUserToLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminAddUserToLicense(requestParameters: AdminApiAdminAddUserToLicenseRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LicenseUser, any>>;
    /**
     * Creates and returns a new user if the requesting user is staff. This works even if new signups are disabled.   This is a **premium** feature.
     * @param {AdminApiAdminCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminCreateUser(requestParameters: AdminApiAdminCreateUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserAdminResponse, any>>;
    /**
     * Returns the new and active users for the last 24 hours, 7 days and 30 days. The `previous_` values are the values of the period before, so for example `previous_new_users_last_24_hours` are the new users that signed up from 48 to 24 hours ago. It can be used to calculate an increase or decrease in the amount of signups. A list of the new and active users for every day for the last 30 days is also included.  This is a **premium** feature.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminDashboard(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminDashboard, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [admin_delete_workspace](#tag/Admin/operation/admin_delete_workspace).**  **Support for this endpoint will end in 2024.**   Deletes the specified group and the applications inside that group, if the requesting user is staff.   This is a **premium** feature.
     * @param {AdminApiAdminDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminDeleteGroup(requestParameters: AdminApiAdminDeleteGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes the specified user, if the requesting user has admin permissions. You cannot delete yourself.   This is a **premium** feature.
     * @param {AdminApiAdminDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminDeleteUser(requestParameters: AdminApiAdminDeleteUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes the specified workspace and the applications inside that workspace, if the requesting user is staff.   This is a **premium** feature.
     * @param {AdminApiAdminDeleteWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminDeleteWorkspace(requestParameters: AdminApiAdminDeleteWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates specified user attributes and returns the updated user if the requesting user is staff. You cannot update yourself to no longer be an admin or active.   This is a **premium** feature.
     * @param {AdminApiAdminEditUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminEditUser(requestParameters: AdminApiAdminEditUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserAdminResponse, any>>;
    /**
     * Fills the remaining empty seats of the license with the first users that are found.
     * @param {AdminApiAdminFillRemainingSeatsOfLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminFillRemainingSeatsOfLicense(requestParameters: AdminApiAdminFillRemainingSeatsOfLicenseRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LicenseUser[], any>>;
    /**
     * Responds with detailed information about the license related to the provided parameter.
     * @param {AdminApiAdminGetLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminGetLicense(requestParameters: AdminApiAdminGetLicenseRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LicenseWithUsers, any>>;
    /**
     * This endpoint allows staff to impersonate another user by requesting a JWT token and user object. The requesting user must have staff access in order to do this. It\'s not possible to impersonate a superuser or staff.  This is a **premium** feature.
     * @param {AdminApiAdminImpersonateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminImpersonateUser(requestParameters: AdminApiAdminImpersonateUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminImpersonateUser200Response, any>>;
    /**
     * This endpoint checks with the authority if the license needs to be updated. It also checks if the license is operating within its limits and might take action on that. It could also happen that the license has been deleted because there is an instance id mismatch or because it\'s invalid. In that case a `204` status code is returned.
     * @param {AdminApiAdminLicenseCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminLicenseCheck(requestParameters: AdminApiAdminLicenseCheckRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LicenseWithUsers, any>>;
    /**
     * This endpoint can be used to lookup users that can be added to a  license. Users that are already in the license are not returned here. Optionally a `search` query parameter can be provided to filter the results.
     * @param {AdminApiAdminLicenseLookupUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminLicenseLookupUsers(requestParameters: AdminApiAdminLicenseLookupUsersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerLicenseUserLookup, any>>;
    /**
     * Lists all the valid licenses that are registered to this instance. A premium license can be used to unlock the premium features for a fixed amount of users. An enterprise license can similarly be used to unlock enterpise features. More information about self hosted licenses can be found on our pricing page https://baserow.io/pricing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminLicenses(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<License[], any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [admin_list_workspaces](#tag/Admin/operation/admin_list_workspaces).**  **Support for this endpoint will end in 2024.**   Returns all groups with detailed information on each group, if the requesting user is staff.  This is a **premium** feature.
     * @param {AdminApiAdminListGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminListGroups(requestParameters?: AdminApiAdminListGroupsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerWorkspacesAdminResponse, any>>;
    /**
     * Returns all users with detailed information on each user, if the requesting user is staff.   This is a **premium** feature.
     * @param {AdminApiAdminListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminListUsers(requestParameters?: AdminApiAdminListUsersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerUserAdminResponse, any>>;
    /**
     * Returns all workspaces with detailed information on each workspace, if the requesting user is staff.  This is a **premium** feature.
     * @param {AdminApiAdminListWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminListWorkspaces(requestParameters?: AdminApiAdminListWorkspacesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerWorkspacesAdminResponse, any>>;
    /**
     * Registers a new license. After registering you can assign users to the license that will be able to use the license\'s features while the license is active. If an existing license with the same `license_id` already exists and the provided license has been issued later than that one, the existing one will be upgraded.
     * @param {AdminApiAdminRegisterLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminRegisterLicense(requestParameters: AdminApiAdminRegisterLicenseRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<License, any>>;
    /**
     * Removes all the users that are on the license. This will empty all the seats.
     * @param {AdminApiAdminRemoveAllUsersFromLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminRemoveAllUsersFromLicense(requestParameters: AdminApiAdminRemoveAllUsersFromLicenseRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Removes the existing license related to the provided parameter. If the license is active, then all the users that are using the license will lose access to the features granted by that license.
     * @param {AdminApiAdminRemoveLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminRemoveLicense(requestParameters: AdminApiAdminRemoveLicenseRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Removes the user related to the provided parameter and to the license related to the parameter. This only happens if the user is on the license, otherwise nothing will happen.
     * @param {AdminApiAdminRemoveUserFromLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminRemoveUserFromLicense(requestParameters: AdminApiAdminRemoveUserFromLicenseRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export declare const ApplicationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes an application if the authorized user is in the application\'s workspace. All the related children are also going to be deleted. For example in case of a database application all the underlying tables, fields, views and rows are going to be deleted.
     * @param {number} applicationId Deletes the application related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApplication: (applicationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Duplicate an application if the authorized user is in the application\'s workspace. All the related children are also going to be duplicated. For example in case of a database application all the underlying tables, fields, views and rows are going to be duplicated.
     * @param {number} applicationId The id of the application to duplicate.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateApplicationAsync: (applicationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_create_application](#tag/Applications/operation/workspace_create_application).**  **Support for this endpoint will end in 2024.**   Creates a new application based on the provided type. The newly created application is going to be added to the group related to the provided `group_id` parameter. If the authorized user does not belong to the group an error will be returned.
     * @param {number} groupId Creates an application for the group related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {ApplicationBaseApplicationCreatePolymorphic} [applicationBaseApplicationCreatePolymorphic]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupCreateApplication: (groupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, applicationBaseApplicationCreatePolymorphic?: ApplicationBaseApplicationCreatePolymorphic, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_list_applications](#tag/Applications/operation/workspace_list_applications).**  **Support for this endpoint will end in 2024.**   Lists all the applications of the group related to the provided `group_id` parameter if the authorized user is in that group. If the group is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single group.
     * @param {number} groupId Returns only applications that are in the group related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupListApplications: (groupId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_order_applications](#tag/Applications/operation/workspace_order_applications).**  **Support for this endpoint will end in 2024.**   Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {number} groupId Updates the order of the applications in the group related to the provided value.
     * @param {OrderApplications} orderApplications
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupOrderApplications: (groupId: number, orderApplications: OrderApplications, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the applications that the authorized user has access to. The properties that belong to the application can differ per type. An application always belongs to a single workspace. All the applications of the workspaces that the user has access to are going to be listed here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllApplications: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing application related to the provided `application_id` param if the authorized user is in the application\'s workspace. It is not possible to change the type, but properties like the name can be changed.
     * @param {number} applicationId Updates the application related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedApplicationBaseApplicationUpdatePolymorphic} [patchedApplicationBaseApplicationUpdatePolymorphic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplication: (applicationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedApplicationBaseApplicationUpdatePolymorphic?: PatchedApplicationBaseApplicationUpdatePolymorphic, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new application based on the provided type. The newly created application is going to be added to the workspace related to the provided `workspace_id` parameter. If the authorized user does not belong to the workspace an error will be returned.
     * @param {number} workspaceId Creates an application for the workspace related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {ApplicationBaseApplicationCreatePolymorphic} [applicationBaseApplicationCreatePolymorphic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceCreateApplication: (workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, applicationBaseApplicationCreatePolymorphic?: ApplicationBaseApplicationCreatePolymorphic, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the requested application if the authorized user is in the application\'s workspace. The properties that belong to the application can differ per type.
     * @param {number} applicationId Returns the application related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceGetApplication: (applicationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the applications of the workspace related to the provided `workspace_id` parameter if the authorized user is in that workspace. If theworkspace is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single workspace.
     * @param {number} workspaceId Returns only applications that are in the workspace related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceListApplications: (workspaceId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {number} workspaceId Updates the order of the applications in the workspace related to the provided value.
     * @param {OrderApplications} orderApplications
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceOrderApplications: (workspaceId: number, orderApplications: OrderApplications, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export declare const ApplicationsApiFp: (configuration?: Configuration) => {
    /**
     * Deletes an application if the authorized user is in the application\'s workspace. All the related children are also going to be deleted. For example in case of a database application all the underlying tables, fields, views and rows are going to be deleted.
     * @param {number} applicationId Deletes the application related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApplication(applicationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Duplicate an application if the authorized user is in the application\'s workspace. All the related children are also going to be duplicated. For example in case of a database application all the underlying tables, fields, views and rows are going to be duplicated.
     * @param {number} applicationId The id of the application to duplicate.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateApplicationAsync(applicationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleDuplicateApplicationJobType>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_create_application](#tag/Applications/operation/workspace_create_application).**  **Support for this endpoint will end in 2024.**   Creates a new application based on the provided type. The newly created application is going to be added to the group related to the provided `group_id` parameter. If the authorized user does not belong to the group an error will be returned.
     * @param {number} groupId Creates an application for the group related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {ApplicationBaseApplicationCreatePolymorphic} [applicationBaseApplicationCreatePolymorphic]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupCreateApplication(groupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, applicationBaseApplicationCreatePolymorphic?: ApplicationBaseApplicationCreatePolymorphic, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationApplication>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_list_applications](#tag/Applications/operation/workspace_list_applications).**  **Support for this endpoint will end in 2024.**   Lists all the applications of the group related to the provided `group_id` parameter if the authorized user is in that group. If the group is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single group.
     * @param {number} groupId Returns only applications that are in the group related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupListApplications(groupId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationApplication>>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_order_applications](#tag/Applications/operation/workspace_order_applications).**  **Support for this endpoint will end in 2024.**   Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {number} groupId Updates the order of the applications in the group related to the provided value.
     * @param {OrderApplications} orderApplications
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupOrderApplications(groupId: number, orderApplications: OrderApplications, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Lists all the applications that the authorized user has access to. The properties that belong to the application can differ per type. An application always belongs to a single workspace. All the applications of the workspaces that the user has access to are going to be listed here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllApplications(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationApplication>>>;
    /**
     * Updates the existing application related to the provided `application_id` param if the authorized user is in the application\'s workspace. It is not possible to change the type, but properties like the name can be changed.
     * @param {number} applicationId Updates the application related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedApplicationBaseApplicationUpdatePolymorphic} [patchedApplicationBaseApplicationUpdatePolymorphic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplication(applicationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedApplicationBaseApplicationUpdatePolymorphic?: PatchedApplicationBaseApplicationUpdatePolymorphic, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationApplication>>;
    /**
     * Creates a new application based on the provided type. The newly created application is going to be added to the workspace related to the provided `workspace_id` parameter. If the authorized user does not belong to the workspace an error will be returned.
     * @param {number} workspaceId Creates an application for the workspace related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {ApplicationBaseApplicationCreatePolymorphic} [applicationBaseApplicationCreatePolymorphic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceCreateApplication(workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, applicationBaseApplicationCreatePolymorphic?: ApplicationBaseApplicationCreatePolymorphic, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationApplication>>;
    /**
     * Returns the requested application if the authorized user is in the application\'s workspace. The properties that belong to the application can differ per type.
     * @param {number} applicationId Returns the application related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceGetApplication(applicationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationApplication>>;
    /**
     * Lists all the applications of the workspace related to the provided `workspace_id` parameter if the authorized user is in that workspace. If theworkspace is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single workspace.
     * @param {number} workspaceId Returns only applications that are in the workspace related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceListApplications(workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationApplication>>>;
    /**
     * Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {number} workspaceId Updates the order of the applications in the workspace related to the provided value.
     * @param {OrderApplications} orderApplications
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceOrderApplications(workspaceId: number, orderApplications: OrderApplications, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ApplicationsApi - factory interface
 * @export
 */
export declare const ApplicationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes an application if the authorized user is in the application\'s workspace. All the related children are also going to be deleted. For example in case of a database application all the underlying tables, fields, views and rows are going to be deleted.
     * @param {ApplicationsApiDeleteApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApplication(requestParameters: ApplicationsApiDeleteApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Duplicate an application if the authorized user is in the application\'s workspace. All the related children are also going to be duplicated. For example in case of a database application all the underlying tables, fields, views and rows are going to be duplicated.
     * @param {ApplicationsApiDuplicateApplicationAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateApplicationAsync(requestParameters: ApplicationsApiDuplicateApplicationAsyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<SingleDuplicateApplicationJobType>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_create_application](#tag/Applications/operation/workspace_create_application).**  **Support for this endpoint will end in 2024.**   Creates a new application based on the provided type. The newly created application is going to be added to the group related to the provided `group_id` parameter. If the authorized user does not belong to the group an error will be returned.
     * @param {ApplicationsApiGroupCreateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupCreateApplication(requestParameters: ApplicationsApiGroupCreateApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationApplication>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_list_applications](#tag/Applications/operation/workspace_list_applications).**  **Support for this endpoint will end in 2024.**   Lists all the applications of the group related to the provided `group_id` parameter if the authorized user is in that group. If the group is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single group.
     * @param {ApplicationsApiGroupListApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupListApplications(requestParameters: ApplicationsApiGroupListApplicationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApplicationApplication>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_order_applications](#tag/Applications/operation/workspace_order_applications).**  **Support for this endpoint will end in 2024.**   Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {ApplicationsApiGroupOrderApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupOrderApplications(requestParameters: ApplicationsApiGroupOrderApplicationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Lists all the applications that the authorized user has access to. The properties that belong to the application can differ per type. An application always belongs to a single workspace. All the applications of the workspaces that the user has access to are going to be listed here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllApplications(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApplicationApplication>>;
    /**
     * Updates the existing application related to the provided `application_id` param if the authorized user is in the application\'s workspace. It is not possible to change the type, but properties like the name can be changed.
     * @param {ApplicationsApiUpdateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplication(requestParameters: ApplicationsApiUpdateApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationApplication>;
    /**
     * Creates a new application based on the provided type. The newly created application is going to be added to the workspace related to the provided `workspace_id` parameter. If the authorized user does not belong to the workspace an error will be returned.
     * @param {ApplicationsApiWorkspaceCreateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceCreateApplication(requestParameters: ApplicationsApiWorkspaceCreateApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationApplication>;
    /**
     * Returns the requested application if the authorized user is in the application\'s workspace. The properties that belong to the application can differ per type.
     * @param {ApplicationsApiWorkspaceGetApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceGetApplication(requestParameters: ApplicationsApiWorkspaceGetApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationApplication>;
    /**
     * Lists all the applications of the workspace related to the provided `workspace_id` parameter if the authorized user is in that workspace. If theworkspace is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single workspace.
     * @param {ApplicationsApiWorkspaceListApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceListApplications(requestParameters: ApplicationsApiWorkspaceListApplicationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApplicationApplication>>;
    /**
     * Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {ApplicationsApiWorkspaceOrderApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceOrderApplications(requestParameters: ApplicationsApiWorkspaceOrderApplicationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for deleteApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiDeleteApplicationRequest
 */
export interface ApplicationsApiDeleteApplicationRequest {
    /**
     * Deletes the application related to the provided value.
     * @type {number}
     * @memberof ApplicationsApiDeleteApplication
     */
    readonly applicationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof ApplicationsApiDeleteApplication
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof ApplicationsApiDeleteApplication
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for duplicateApplicationAsync operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiDuplicateApplicationAsyncRequest
 */
export interface ApplicationsApiDuplicateApplicationAsyncRequest {
    /**
     * The id of the application to duplicate.
     * @type {number}
     * @memberof ApplicationsApiDuplicateApplicationAsync
     */
    readonly applicationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof ApplicationsApiDuplicateApplicationAsync
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof ApplicationsApiDuplicateApplicationAsync
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for groupCreateApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGroupCreateApplicationRequest
 */
export interface ApplicationsApiGroupCreateApplicationRequest {
    /**
     * Creates an application for the group related to the provided value.
     * @type {number}
     * @memberof ApplicationsApiGroupCreateApplication
     */
    readonly groupId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof ApplicationsApiGroupCreateApplication
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof ApplicationsApiGroupCreateApplication
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {ApplicationBaseApplicationCreatePolymorphic}
     * @memberof ApplicationsApiGroupCreateApplication
     */
    readonly applicationBaseApplicationCreatePolymorphic?: ApplicationBaseApplicationCreatePolymorphic;
}
/**
 * Request parameters for groupListApplications operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGroupListApplicationsRequest
 */
export interface ApplicationsApiGroupListApplicationsRequest {
    /**
     * Returns only applications that are in the group related to the provided value.
     * @type {number}
     * @memberof ApplicationsApiGroupListApplications
     */
    readonly groupId: number;
}
/**
 * Request parameters for groupOrderApplications operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiGroupOrderApplicationsRequest
 */
export interface ApplicationsApiGroupOrderApplicationsRequest {
    /**
     * Updates the order of the applications in the group related to the provided value.
     * @type {number}
     * @memberof ApplicationsApiGroupOrderApplications
     */
    readonly groupId: number;
    /**
     *
     * @type {OrderApplications}
     * @memberof ApplicationsApiGroupOrderApplications
     */
    readonly orderApplications: OrderApplications;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof ApplicationsApiGroupOrderApplications
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof ApplicationsApiGroupOrderApplications
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for updateApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiUpdateApplicationRequest
 */
export interface ApplicationsApiUpdateApplicationRequest {
    /**
     * Updates the application related to the provided value.
     * @type {number}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly applicationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedApplicationBaseApplicationUpdatePolymorphic}
     * @memberof ApplicationsApiUpdateApplication
     */
    readonly patchedApplicationBaseApplicationUpdatePolymorphic?: PatchedApplicationBaseApplicationUpdatePolymorphic;
}
/**
 * Request parameters for workspaceCreateApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiWorkspaceCreateApplicationRequest
 */
export interface ApplicationsApiWorkspaceCreateApplicationRequest {
    /**
     * Creates an application for the workspace related to the provided value.
     * @type {number}
     * @memberof ApplicationsApiWorkspaceCreateApplication
     */
    readonly workspaceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof ApplicationsApiWorkspaceCreateApplication
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof ApplicationsApiWorkspaceCreateApplication
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {ApplicationBaseApplicationCreatePolymorphic}
     * @memberof ApplicationsApiWorkspaceCreateApplication
     */
    readonly applicationBaseApplicationCreatePolymorphic?: ApplicationBaseApplicationCreatePolymorphic;
}
/**
 * Request parameters for workspaceGetApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiWorkspaceGetApplicationRequest
 */
export interface ApplicationsApiWorkspaceGetApplicationRequest {
    /**
     * Returns the application related to the provided value.
     * @type {number}
     * @memberof ApplicationsApiWorkspaceGetApplication
     */
    readonly applicationId: number;
}
/**
 * Request parameters for workspaceListApplications operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiWorkspaceListApplicationsRequest
 */
export interface ApplicationsApiWorkspaceListApplicationsRequest {
    /**
     * Returns only applications that are in the workspace related to the provided value.
     * @type {number}
     * @memberof ApplicationsApiWorkspaceListApplications
     */
    readonly workspaceId: number;
}
/**
 * Request parameters for workspaceOrderApplications operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiWorkspaceOrderApplicationsRequest
 */
export interface ApplicationsApiWorkspaceOrderApplicationsRequest {
    /**
     * Updates the order of the applications in the workspace related to the provided value.
     * @type {number}
     * @memberof ApplicationsApiWorkspaceOrderApplications
     */
    readonly workspaceId: number;
    /**
     *
     * @type {OrderApplications}
     * @memberof ApplicationsApiWorkspaceOrderApplications
     */
    readonly orderApplications: OrderApplications;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof ApplicationsApiWorkspaceOrderApplications
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof ApplicationsApiWorkspaceOrderApplications
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export declare class ApplicationsApi extends BaseAPI {
    /**
     * Deletes an application if the authorized user is in the application\'s workspace. All the related children are also going to be deleted. For example in case of a database application all the underlying tables, fields, views and rows are going to be deleted.
     * @param {ApplicationsApiDeleteApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    deleteApplication(requestParameters: ApplicationsApiDeleteApplicationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Duplicate an application if the authorized user is in the application\'s workspace. All the related children are also going to be duplicated. For example in case of a database application all the underlying tables, fields, views and rows are going to be duplicated.
     * @param {ApplicationsApiDuplicateApplicationAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    duplicateApplicationAsync(requestParameters: ApplicationsApiDuplicateApplicationAsyncRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleDuplicateApplicationJobType, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_create_application](#tag/Applications/operation/workspace_create_application).**  **Support for this endpoint will end in 2024.**   Creates a new application based on the provided type. The newly created application is going to be added to the group related to the provided `group_id` parameter. If the authorized user does not belong to the group an error will be returned.
     * @param {ApplicationsApiGroupCreateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    groupCreateApplication(requestParameters: ApplicationsApiGroupCreateApplicationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApplicationApplication, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_list_applications](#tag/Applications/operation/workspace_list_applications).**  **Support for this endpoint will end in 2024.**   Lists all the applications of the group related to the provided `group_id` parameter if the authorized user is in that group. If the group is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single group.
     * @param {ApplicationsApiGroupListApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    groupListApplications(requestParameters: ApplicationsApiGroupListApplicationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApplicationApplication[], any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_order_applications](#tag/Applications/operation/workspace_order_applications).**  **Support for this endpoint will end in 2024.**   Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {ApplicationsApiGroupOrderApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    groupOrderApplications(requestParameters: ApplicationsApiGroupOrderApplicationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Lists all the applications that the authorized user has access to. The properties that belong to the application can differ per type. An application always belongs to a single workspace. All the applications of the workspaces that the user has access to are going to be listed here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    listAllApplications(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApplicationApplication[], any>>;
    /**
     * Updates the existing application related to the provided `application_id` param if the authorized user is in the application\'s workspace. It is not possible to change the type, but properties like the name can be changed.
     * @param {ApplicationsApiUpdateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    updateApplication(requestParameters: ApplicationsApiUpdateApplicationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApplicationApplication, any>>;
    /**
     * Creates a new application based on the provided type. The newly created application is going to be added to the workspace related to the provided `workspace_id` parameter. If the authorized user does not belong to the workspace an error will be returned.
     * @param {ApplicationsApiWorkspaceCreateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    workspaceCreateApplication(requestParameters: ApplicationsApiWorkspaceCreateApplicationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApplicationApplication, any>>;
    /**
     * Returns the requested application if the authorized user is in the application\'s workspace. The properties that belong to the application can differ per type.
     * @param {ApplicationsApiWorkspaceGetApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    workspaceGetApplication(requestParameters: ApplicationsApiWorkspaceGetApplicationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApplicationApplication, any>>;
    /**
     * Lists all the applications of the workspace related to the provided `workspace_id` parameter if the authorized user is in that workspace. If theworkspace is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single workspace.
     * @param {ApplicationsApiWorkspaceListApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    workspaceListApplications(requestParameters: ApplicationsApiWorkspaceListApplicationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApplicationApplication[], any>>;
    /**
     * Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {ApplicationsApiWorkspaceOrderApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    workspaceOrderApplications(requestParameters: ApplicationsApiWorkspaceOrderApplicationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * AuditLogApi - axios parameter creator
 * @export
 */
export declare const AuditLogApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a job to export the filtered audit log to a CSV file.  This is a **enterprise** feature.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {SingleAuditLogExportJobRequest} [singleAuditLogExportJobRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncAuditLogExport: (clientSessionId?: string, singleAuditLogExportJobRequest?: SingleAuditLogExportJobRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a job to export the filtered audit log to a CSV file.  This is a **enterprise** feature.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {SingleAuditLogExportJobRequest} [singleAuditLogExportJobRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncAuditLogExport2: (clientSessionId?: string, singleAuditLogExportJobRequest?: SingleAuditLogExportJobRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all distinct action types related to an audit log entry.  This is a **enterprise** feature.
     * @param {string} [search] If provided only action_types with name that match the query will be returned.
     * @param {number} [workspaceId] Return action types related to the workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogActionTypes: (search?: string, workspaceId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all distinct action types related to an audit log entry.  This is a **enterprise** feature.
     * @param {string} [search] If provided only action_types with name that match the query will be returned.
     * @param {number} [workspaceId] Return action types related to the workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogActionTypes2: (search?: string, workspaceId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all audit log entries for the given workspace id.  This is a **enterprise** feature.
     * @param {string} [actionType] Filter the audit log entries by action type.
     * @param {string} [fromTimestamp] The ISO timestamp to filter the audit log entries from.
     * @param {number} [page] Defines which page should be returned.
     * @param {number} [size] Defines how many audit log entries should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;user, workspace, type, timestamp, ip_address&#x60;. For example &#x60;sorts&#x3D;-user,-workspace&#x60; will sort the audit log entries first by descending user and then ascending workspace. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {string} [toTimestamp] The ISO timestamp to filter the audit log entries to.
     * @param {number} [userId] Filter the audit log entries by user id.
     * @param {number} [workspaceId] Filter the audit log entries by workspace id. This filter works only for the admin audit log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogList: (actionType?: string, fromTimestamp?: string, page?: number, size?: number, sorts?: string, toTimestamp?: string, userId?: number, workspaceId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all audit log entries for the given workspace id.  This is a **enterprise** feature.
     * @param {string} [actionType] Filter the audit log entries by action type.
     * @param {string} [fromTimestamp] The ISO timestamp to filter the audit log entries from.
     * @param {number} [page] Defines which page should be returned.
     * @param {number} [size] Defines how many audit log entries should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;user, workspace, type, timestamp, ip_address&#x60;. For example &#x60;sorts&#x3D;-user,-workspace&#x60; will sort the audit log entries first by descending user and then ascending workspace. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {string} [toTimestamp] The ISO timestamp to filter the audit log entries to.
     * @param {number} [userId] Filter the audit log entries by user id.
     * @param {number} [workspaceId] Filter the audit log entries by workspace id. This filter works only for the admin audit log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogList2: (actionType?: string, fromTimestamp?: string, page?: number, size?: number, sorts?: string, toTimestamp?: string, userId?: number, workspaceId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all users that have performed an action in the audit log.  This is a **enterprise** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only users with email that match the query will be returned.
     * @param {number} [size] Defines how many users should be returned per page.
     * @param {number} [workspaceId] Return users belonging to the given workspace_id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogUsers: (page?: number, search?: string, size?: number, workspaceId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all users that have performed an action in the audit log.  This is a **enterprise** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only users with email that match the query will be returned.
     * @param {number} [size] Defines how many users should be returned per page.
     * @param {number} [workspaceId] Return users belonging to the given workspace_id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogUsers2: (page?: number, search?: string, size?: number, workspaceId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all distinct workspace names related to an audit log entry.  This is a **enterprise** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only workspaces with name that match the query will be returned.
     * @param {number} [size] Defines how many workspaces should be returned per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogWorkspaces: (page?: number, search?: string, size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all distinct workspace names related to an audit log entry.  This is a **enterprise** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only workspaces with name that match the query will be returned.
     * @param {number} [size] Defines how many workspaces should be returned per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogWorkspaces2: (page?: number, search?: string, size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuditLogApi - functional programming interface
 * @export
 */
export declare const AuditLogApiFp: (configuration?: Configuration) => {
    /**
     * Creates a job to export the filtered audit log to a CSV file.  This is a **enterprise** feature.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {SingleAuditLogExportJobRequest} [singleAuditLogExportJobRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncAuditLogExport(clientSessionId?: string, singleAuditLogExportJobRequest?: SingleAuditLogExportJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleAuditLogExportJobResponse>>;
    /**
     * Creates a job to export the filtered audit log to a CSV file.  This is a **enterprise** feature.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {SingleAuditLogExportJobRequest} [singleAuditLogExportJobRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncAuditLogExport2(clientSessionId?: string, singleAuditLogExportJobRequest?: SingleAuditLogExportJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleAuditLogExportJobResponse>>;
    /**
     * List all distinct action types related to an audit log entry.  This is a **enterprise** feature.
     * @param {string} [search] If provided only action_types with name that match the query will be returned.
     * @param {number} [workspaceId] Return action types related to the workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogActionTypes(search?: string, workspaceId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLogActionType>>>;
    /**
     * List all distinct action types related to an audit log entry.  This is a **enterprise** feature.
     * @param {string} [search] If provided only action_types with name that match the query will be returned.
     * @param {number} [workspaceId] Return action types related to the workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogActionTypes2(search?: string, workspaceId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLogActionType>>>;
    /**
     * Lists all audit log entries for the given workspace id.  This is a **enterprise** feature.
     * @param {string} [actionType] Filter the audit log entries by action type.
     * @param {string} [fromTimestamp] The ISO timestamp to filter the audit log entries from.
     * @param {number} [page] Defines which page should be returned.
     * @param {number} [size] Defines how many audit log entries should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;user, workspace, type, timestamp, ip_address&#x60;. For example &#x60;sorts&#x3D;-user,-workspace&#x60; will sort the audit log entries first by descending user and then ascending workspace. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {string} [toTimestamp] The ISO timestamp to filter the audit log entries to.
     * @param {number} [userId] Filter the audit log entries by user id.
     * @param {number} [workspaceId] Filter the audit log entries by workspace id. This filter works only for the admin audit log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogList(actionType?: string, fromTimestamp?: string, page?: number, size?: number, sorts?: string, toTimestamp?: string, userId?: number, workspaceId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerAuditLog>>;
    /**
     * Lists all audit log entries for the given workspace id.  This is a **enterprise** feature.
     * @param {string} [actionType] Filter the audit log entries by action type.
     * @param {string} [fromTimestamp] The ISO timestamp to filter the audit log entries from.
     * @param {number} [page] Defines which page should be returned.
     * @param {number} [size] Defines how many audit log entries should be returned per page.
     * @param {string} [sorts] A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;user, workspace, type, timestamp, ip_address&#x60;. For example &#x60;sorts&#x3D;-user,-workspace&#x60; will sort the audit log entries first by descending user and then ascending workspace. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @param {string} [toTimestamp] The ISO timestamp to filter the audit log entries to.
     * @param {number} [userId] Filter the audit log entries by user id.
     * @param {number} [workspaceId] Filter the audit log entries by workspace id. This filter works only for the admin audit log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogList2(actionType?: string, fromTimestamp?: string, page?: number, size?: number, sorts?: string, toTimestamp?: string, userId?: number, workspaceId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerAuditLog>>;
    /**
     * List all users that have performed an action in the audit log.  This is a **enterprise** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only users with email that match the query will be returned.
     * @param {number} [size] Defines how many users should be returned per page.
     * @param {number} [workspaceId] Return users belonging to the given workspace_id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogUsers(page?: number, search?: string, size?: number, workspaceId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerAuditLogUser>>;
    /**
     * List all users that have performed an action in the audit log.  This is a **enterprise** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only users with email that match the query will be returned.
     * @param {number} [size] Defines how many users should be returned per page.
     * @param {number} [workspaceId] Return users belonging to the given workspace_id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogUsers2(page?: number, search?: string, size?: number, workspaceId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerAuditLogUser>>;
    /**
     * List all distinct workspace names related to an audit log entry.  This is a **enterprise** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only workspaces with name that match the query will be returned.
     * @param {number} [size] Defines how many workspaces should be returned per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogWorkspaces(page?: number, search?: string, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerAuditLogWorkspace>>;
    /**
     * List all distinct workspace names related to an audit log entry.  This is a **enterprise** feature.
     * @param {number} [page] Defines which page should be returned.
     * @param {string} [search] If provided only workspaces with name that match the query will be returned.
     * @param {number} [size] Defines how many workspaces should be returned per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogWorkspaces2(page?: number, search?: string, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerAuditLogWorkspace>>;
};
/**
 * AuditLogApi - factory interface
 * @export
 */
export declare const AuditLogApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a job to export the filtered audit log to a CSV file.  This is a **enterprise** feature.
     * @param {AuditLogApiAsyncAuditLogExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncAuditLogExport(requestParameters?: AuditLogApiAsyncAuditLogExportRequest, options?: RawAxiosRequestConfig): AxiosPromise<SingleAuditLogExportJobResponse>;
    /**
     * Creates a job to export the filtered audit log to a CSV file.  This is a **enterprise** feature.
     * @param {AuditLogApiAsyncAuditLogExport2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncAuditLogExport2(requestParameters?: AuditLogApiAsyncAuditLogExport2Request, options?: RawAxiosRequestConfig): AxiosPromise<SingleAuditLogExportJobResponse>;
    /**
     * List all distinct action types related to an audit log entry.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogActionTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogActionTypes(requestParameters?: AuditLogApiAuditLogActionTypesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AuditLogActionType>>;
    /**
     * List all distinct action types related to an audit log entry.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogActionTypes2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogActionTypes2(requestParameters?: AuditLogApiAuditLogActionTypes2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<AuditLogActionType>>;
    /**
     * Lists all audit log entries for the given workspace id.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogList(requestParameters?: AuditLogApiAuditLogListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerAuditLog>;
    /**
     * Lists all audit log entries for the given workspace id.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogList2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogList2(requestParameters?: AuditLogApiAuditLogList2Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerAuditLog>;
    /**
     * List all users that have performed an action in the audit log.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogUsers(requestParameters?: AuditLogApiAuditLogUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerAuditLogUser>;
    /**
     * List all users that have performed an action in the audit log.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogUsers2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogUsers2(requestParameters?: AuditLogApiAuditLogUsers2Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerAuditLogUser>;
    /**
     * List all distinct workspace names related to an audit log entry.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogWorkspaces(requestParameters?: AuditLogApiAuditLogWorkspacesRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerAuditLogWorkspace>;
    /**
     * List all distinct workspace names related to an audit log entry.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogWorkspaces2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditLogWorkspaces2(requestParameters?: AuditLogApiAuditLogWorkspaces2Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerAuditLogWorkspace>;
};
/**
 * Request parameters for asyncAuditLogExport operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAsyncAuditLogExportRequest
 */
export interface AuditLogApiAsyncAuditLogExportRequest {
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof AuditLogApiAsyncAuditLogExport
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {SingleAuditLogExportJobRequest}
     * @memberof AuditLogApiAsyncAuditLogExport
     */
    readonly singleAuditLogExportJobRequest?: SingleAuditLogExportJobRequest;
}
/**
 * Request parameters for asyncAuditLogExport2 operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAsyncAuditLogExport2Request
 */
export interface AuditLogApiAsyncAuditLogExport2Request {
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof AuditLogApiAsyncAuditLogExport2
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {SingleAuditLogExportJobRequest}
     * @memberof AuditLogApiAsyncAuditLogExport2
     */
    readonly singleAuditLogExportJobRequest?: SingleAuditLogExportJobRequest;
}
/**
 * Request parameters for auditLogActionTypes operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAuditLogActionTypesRequest
 */
export interface AuditLogApiAuditLogActionTypesRequest {
    /**
     * If provided only action_types with name that match the query will be returned.
     * @type {string}
     * @memberof AuditLogApiAuditLogActionTypes
     */
    readonly search?: string;
    /**
     * Return action types related to the workspace.
     * @type {number}
     * @memberof AuditLogApiAuditLogActionTypes
     */
    readonly workspaceId?: number;
}
/**
 * Request parameters for auditLogActionTypes2 operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAuditLogActionTypes2Request
 */
export interface AuditLogApiAuditLogActionTypes2Request {
    /**
     * If provided only action_types with name that match the query will be returned.
     * @type {string}
     * @memberof AuditLogApiAuditLogActionTypes2
     */
    readonly search?: string;
    /**
     * Return action types related to the workspace.
     * @type {number}
     * @memberof AuditLogApiAuditLogActionTypes2
     */
    readonly workspaceId?: number;
}
/**
 * Request parameters for auditLogList operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAuditLogListRequest
 */
export interface AuditLogApiAuditLogListRequest {
    /**
     * Filter the audit log entries by action type.
     * @type {string}
     * @memberof AuditLogApiAuditLogList
     */
    readonly actionType?: string;
    /**
     * The ISO timestamp to filter the audit log entries from.
     * @type {string}
     * @memberof AuditLogApiAuditLogList
     */
    readonly fromTimestamp?: string;
    /**
     * Defines which page should be returned.
     * @type {number}
     * @memberof AuditLogApiAuditLogList
     */
    readonly page?: number;
    /**
     * Defines how many audit log entries should be returned per page.
     * @type {number}
     * @memberof AuditLogApiAuditLogList
     */
    readonly size?: number;
    /**
     * A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;user, workspace, type, timestamp, ip_address&#x60;. For example &#x60;sorts&#x3D;-user,-workspace&#x60; will sort the audit log entries first by descending user and then ascending workspace. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @type {string}
     * @memberof AuditLogApiAuditLogList
     */
    readonly sorts?: string;
    /**
     * The ISO timestamp to filter the audit log entries to.
     * @type {string}
     * @memberof AuditLogApiAuditLogList
     */
    readonly toTimestamp?: string;
    /**
     * Filter the audit log entries by user id.
     * @type {number}
     * @memberof AuditLogApiAuditLogList
     */
    readonly userId?: number;
    /**
     * Filter the audit log entries by workspace id. This filter works only for the admin audit log.
     * @type {number}
     * @memberof AuditLogApiAuditLogList
     */
    readonly workspaceId?: number;
}
/**
 * Request parameters for auditLogList2 operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAuditLogList2Request
 */
export interface AuditLogApiAuditLogList2Request {
    /**
     * Filter the audit log entries by action type.
     * @type {string}
     * @memberof AuditLogApiAuditLogList2
     */
    readonly actionType?: string;
    /**
     * The ISO timestamp to filter the audit log entries from.
     * @type {string}
     * @memberof AuditLogApiAuditLogList2
     */
    readonly fromTimestamp?: string;
    /**
     * Defines which page should be returned.
     * @type {number}
     * @memberof AuditLogApiAuditLogList2
     */
    readonly page?: number;
    /**
     * Defines how many audit log entries should be returned per page.
     * @type {number}
     * @memberof AuditLogApiAuditLogList2
     */
    readonly size?: number;
    /**
     * A comma separated string of attributes to sort by, each attribute must be prefixed with &#x60;+&#x60; for a descending sort or a &#x60;-&#x60; for an ascending sort. The accepted attribute names are: &#x60;user, workspace, type, timestamp, ip_address&#x60;. For example &#x60;sorts&#x3D;-user,-workspace&#x60; will sort the audit log entries first by descending user and then ascending workspace. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error.
     * @type {string}
     * @memberof AuditLogApiAuditLogList2
     */
    readonly sorts?: string;
    /**
     * The ISO timestamp to filter the audit log entries to.
     * @type {string}
     * @memberof AuditLogApiAuditLogList2
     */
    readonly toTimestamp?: string;
    /**
     * Filter the audit log entries by user id.
     * @type {number}
     * @memberof AuditLogApiAuditLogList2
     */
    readonly userId?: number;
    /**
     * Filter the audit log entries by workspace id. This filter works only for the admin audit log.
     * @type {number}
     * @memberof AuditLogApiAuditLogList2
     */
    readonly workspaceId?: number;
}
/**
 * Request parameters for auditLogUsers operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAuditLogUsersRequest
 */
export interface AuditLogApiAuditLogUsersRequest {
    /**
     * Defines which page should be returned.
     * @type {number}
     * @memberof AuditLogApiAuditLogUsers
     */
    readonly page?: number;
    /**
     * If provided only users with email that match the query will be returned.
     * @type {string}
     * @memberof AuditLogApiAuditLogUsers
     */
    readonly search?: string;
    /**
     * Defines how many users should be returned per page.
     * @type {number}
     * @memberof AuditLogApiAuditLogUsers
     */
    readonly size?: number;
    /**
     * Return users belonging to the given workspace_id.
     * @type {number}
     * @memberof AuditLogApiAuditLogUsers
     */
    readonly workspaceId?: number;
}
/**
 * Request parameters for auditLogUsers2 operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAuditLogUsers2Request
 */
export interface AuditLogApiAuditLogUsers2Request {
    /**
     * Defines which page should be returned.
     * @type {number}
     * @memberof AuditLogApiAuditLogUsers2
     */
    readonly page?: number;
    /**
     * If provided only users with email that match the query will be returned.
     * @type {string}
     * @memberof AuditLogApiAuditLogUsers2
     */
    readonly search?: string;
    /**
     * Defines how many users should be returned per page.
     * @type {number}
     * @memberof AuditLogApiAuditLogUsers2
     */
    readonly size?: number;
    /**
     * Return users belonging to the given workspace_id.
     * @type {number}
     * @memberof AuditLogApiAuditLogUsers2
     */
    readonly workspaceId?: number;
}
/**
 * Request parameters for auditLogWorkspaces operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAuditLogWorkspacesRequest
 */
export interface AuditLogApiAuditLogWorkspacesRequest {
    /**
     * Defines which page should be returned.
     * @type {number}
     * @memberof AuditLogApiAuditLogWorkspaces
     */
    readonly page?: number;
    /**
     * If provided only workspaces with name that match the query will be returned.
     * @type {string}
     * @memberof AuditLogApiAuditLogWorkspaces
     */
    readonly search?: string;
    /**
     * Defines how many workspaces should be returned per page.
     * @type {number}
     * @memberof AuditLogApiAuditLogWorkspaces
     */
    readonly size?: number;
}
/**
 * Request parameters for auditLogWorkspaces2 operation in AuditLogApi.
 * @export
 * @interface AuditLogApiAuditLogWorkspaces2Request
 */
export interface AuditLogApiAuditLogWorkspaces2Request {
    /**
     * Defines which page should be returned.
     * @type {number}
     * @memberof AuditLogApiAuditLogWorkspaces2
     */
    readonly page?: number;
    /**
     * If provided only workspaces with name that match the query will be returned.
     * @type {string}
     * @memberof AuditLogApiAuditLogWorkspaces2
     */
    readonly search?: string;
    /**
     * Defines how many workspaces should be returned per page.
     * @type {number}
     * @memberof AuditLogApiAuditLogWorkspaces2
     */
    readonly size?: number;
}
/**
 * AuditLogApi - object-oriented interface
 * @export
 * @class AuditLogApi
 * @extends {BaseAPI}
 */
export declare class AuditLogApi extends BaseAPI {
    /**
     * Creates a job to export the filtered audit log to a CSV file.  This is a **enterprise** feature.
     * @param {AuditLogApiAsyncAuditLogExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    asyncAuditLogExport(requestParameters?: AuditLogApiAsyncAuditLogExportRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleAuditLogExportJobResponse, any>>;
    /**
     * Creates a job to export the filtered audit log to a CSV file.  This is a **enterprise** feature.
     * @param {AuditLogApiAsyncAuditLogExport2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    asyncAuditLogExport2(requestParameters?: AuditLogApiAsyncAuditLogExport2Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleAuditLogExportJobResponse, any>>;
    /**
     * List all distinct action types related to an audit log entry.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogActionTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    auditLogActionTypes(requestParameters?: AuditLogApiAuditLogActionTypesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLogActionType[], any>>;
    /**
     * List all distinct action types related to an audit log entry.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogActionTypes2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    auditLogActionTypes2(requestParameters?: AuditLogApiAuditLogActionTypes2Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLogActionType[], any>>;
    /**
     * Lists all audit log entries for the given workspace id.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    auditLogList(requestParameters?: AuditLogApiAuditLogListRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerAuditLog, any>>;
    /**
     * Lists all audit log entries for the given workspace id.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogList2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    auditLogList2(requestParameters?: AuditLogApiAuditLogList2Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerAuditLog, any>>;
    /**
     * List all users that have performed an action in the audit log.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    auditLogUsers(requestParameters?: AuditLogApiAuditLogUsersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerAuditLogUser, any>>;
    /**
     * List all users that have performed an action in the audit log.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogUsers2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    auditLogUsers2(requestParameters?: AuditLogApiAuditLogUsers2Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerAuditLogUser, any>>;
    /**
     * List all distinct workspace names related to an audit log entry.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    auditLogWorkspaces(requestParameters?: AuditLogApiAuditLogWorkspacesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerAuditLogWorkspace, any>>;
    /**
     * List all distinct workspace names related to an audit log entry.  This is a **enterprise** feature.
     * @param {AuditLogApiAuditLogWorkspaces2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    auditLogWorkspaces2(requestParameters?: AuditLogApiAuditLogWorkspaces2Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerAuditLogWorkspace, any>>;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Return the correct redirect_url to initiate the SSO SAML login. It needs an email address if multiple SAML providers are configured otherwise the only configured SAML provider signup URL will be returned.
     * @param {string} [email] The email address of the user that want to sign in using SAML.
     * @param {string} [groupInvitationToken] Please use the functionally identical &#x60;workspace_invitation_token&#x60; instead as this querystring is being removed in the future.
     * @param {string} [language] An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @param {string} [original] The url to which the user should be redirected after a successful login.
     * @param {string} [workspaceInvitationToken] If provided and valid, the user accepts the workspace invitation and will have access to the workspace after login or signing up.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderLoginUrl: (email?: string, groupInvitationToken?: string, language?: string, original?: string, workspaceInvitationToken?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Complete the SAML authentication flow by validating the SAML response. Sign in the user if already exists in Baserow or create a new one otherwise. Once authenticated, the user will be redirected to the original URL they were trying to access. If the response is invalid, the user will be redirected to an error page with a specific error message.It accepts the language code and the workspace invitation token as query parameters if provided.
     * @param {SAMLResponse} sAMLResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderSamlAcsUrl: (sAMLResponse: SAMLResponse, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This is the endpoint that is called when the user wants to initiate a SSO SAML login from Baserow (the service provider). The user will be redirected to the SAML identity provider (IdP) where the user can authenticate. Once logged in in the IdP, the user will be redirected back to the assertion consumer service endpoint (ACS) where the SAML response will be validated and a new JWT session token will be provided to work with Baserow APIs.
     * @param {string} [email] The email address of the user that want to sign in using SAML.
     * @param {string} [groupInvitationToken] Please use the functionally identical &#x60;workspace_invitation_token&#x60; instead as this querystring is being removed in the future
     * @param {string} [language] An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @param {string} [original] The url to which the user should be redirected after a successful login or sign up.
     * @param {string} [workspaceInvitationToken] If provided and valid, the user accepts the workspace invitation and will have access to the workspace after login or signing up.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderSamlSpLogin: (email?: string, groupInvitationToken?: string, language?: string, original?: string, workspaceInvitationToken?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthProvider: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an authentication provider.
     * @param {number} authProviderId The authentication provider id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthProvider: (authProviderId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an authentication provider.
     * @param {number} authProviderId The authentication provider id to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthProvider: (authProviderId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all the available authentication providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAuthProviders: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists the available login options for the configured authentication providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAuthProvidersLoginOptions: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Processes callback from OAuth2 provider and logs the user in if successful.
     * @param {number} providerId The id of the provider for which to process the callback.
     * @param {number} [code] The id of the provider for which to process the callback.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthProviderLoginCallback: (providerId: number, code?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Redirects to the OAuth2 provider\'s authentication URL based on the provided auth provider\'s id.
     * @param {number} providerId The id of the provider for redirect.
     * @param {string} [groupInvitationToken] Please use the functionally identical &#x60;workspace_invitation_token&#x60; instead as this querystring is being removed in the future.
     * @param {number} [original] The relative part of URL that the user wanted to access.
     * @param {string} [workspaceInvitationToken] The invitation token sent to the user to join a specific workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthProviderLoginRedirect: (providerId: number, groupInvitationToken?: string, original?: number, workspaceInvitationToken?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook.
     * @param {number} authProviderId The authentication provider id to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthProvider: (authProviderId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     * Return the correct redirect_url to initiate the SSO SAML login. It needs an email address if multiple SAML providers are configured otherwise the only configured SAML provider signup URL will be returned.
     * @param {string} [email] The email address of the user that want to sign in using SAML.
     * @param {string} [groupInvitationToken] Please use the functionally identical &#x60;workspace_invitation_token&#x60; instead as this querystring is being removed in the future.
     * @param {string} [language] An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @param {string} [original] The url to which the user should be redirected after a successful login.
     * @param {string} [workspaceInvitationToken] If provided and valid, the user accepts the workspace invitation and will have access to the workspace after login or signing up.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderLoginUrl(email?: string, groupInvitationToken?: string, language?: string, original?: string, workspaceInvitationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: string;
    }>>;
    /**
     * Complete the SAML authentication flow by validating the SAML response. Sign in the user if already exists in Baserow or create a new one otherwise. Once authenticated, the user will be redirected to the original URL they were trying to access. If the response is invalid, the user will be redirected to an error page with a specific error message.It accepts the language code and the workspace invitation token as query parameters if provided.
     * @param {SAMLResponse} sAMLResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderSamlAcsUrl(sAMLResponse: SAMLResponse, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This is the endpoint that is called when the user wants to initiate a SSO SAML login from Baserow (the service provider). The user will be redirected to the SAML identity provider (IdP) where the user can authenticate. Once logged in in the IdP, the user will be redirected back to the assertion consumer service endpoint (ACS) where the SAML response will be validated and a new JWT session token will be provided to work with Baserow APIs.
     * @param {string} [email] The email address of the user that want to sign in using SAML.
     * @param {string} [groupInvitationToken] Please use the functionally identical &#x60;workspace_invitation_token&#x60; instead as this querystring is being removed in the future
     * @param {string} [language] An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @param {string} [original] The url to which the user should be redirected after a successful login or sign up.
     * @param {string} [workspaceInvitationToken] If provided and valid, the user accepts the workspace invitation and will have access to the workspace after login or signing up.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderSamlSpLogin(email?: string, groupInvitationToken?: string, language?: string, original?: string, workspaceInvitationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Creates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthProvider(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationProviderAuthProvider>>;
    /**
     * Delete an authentication provider.
     * @param {number} authProviderId The authentication provider id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthProvider(authProviderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get an authentication provider.
     * @param {number} authProviderId The authentication provider id to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthProvider(authProviderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationProviderAuthProvider>>;
    /**
     * List all the available authentication providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAuthProviders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthenticationProviderAuthProvider>>>;
    /**
     * Lists the available login options for the configured authentication providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAuthProvidersLoginOptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: any;
    }>>;
    /**
     * Processes callback from OAuth2 provider and logs the user in if successful.
     * @param {number} providerId The id of the provider for which to process the callback.
     * @param {number} [code] The id of the provider for which to process the callback.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthProviderLoginCallback(providerId: number, code?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Redirects to the OAuth2 provider\'s authentication URL based on the provided auth provider\'s id.
     * @param {number} providerId The id of the provider for redirect.
     * @param {string} [groupInvitationToken] Please use the functionally identical &#x60;workspace_invitation_token&#x60; instead as this querystring is being removed in the future.
     * @param {number} [original] The relative part of URL that the user wanted to access.
     * @param {string} [workspaceInvitationToken] The invitation token sent to the user to join a specific workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthProviderLoginRedirect(providerId: number, groupInvitationToken?: string, original?: number, workspaceInvitationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook.
     * @param {number} authProviderId The authentication provider id to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthProvider(authProviderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationProviderAuthProvider>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Return the correct redirect_url to initiate the SSO SAML login. It needs an email address if multiple SAML providers are configured otherwise the only configured SAML provider signup URL will be returned.
     * @param {AuthApiAuthProviderLoginUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderLoginUrl(requestParameters?: AuthApiAuthProviderLoginUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     * Complete the SAML authentication flow by validating the SAML response. Sign in the user if already exists in Baserow or create a new one otherwise. Once authenticated, the user will be redirected to the original URL they were trying to access. If the response is invalid, the user will be redirected to an error page with a specific error message.It accepts the language code and the workspace invitation token as query parameters if provided.
     * @param {AuthApiAuthProviderSamlAcsUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderSamlAcsUrl(requestParameters: AuthApiAuthProviderSamlAcsUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * This is the endpoint that is called when the user wants to initiate a SSO SAML login from Baserow (the service provider). The user will be redirected to the SAML identity provider (IdP) where the user can authenticate. Once logged in in the IdP, the user will be redirected back to the assertion consumer service endpoint (ACS) where the SAML response will be validated and a new JWT session token will be provided to work with Baserow APIs.
     * @param {AuthApiAuthProviderSamlSpLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderSamlSpLogin(requestParameters?: AuthApiAuthProviderSamlSpLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Creates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthProvider(options?: RawAxiosRequestConfig): AxiosPromise<AuthenticationProviderAuthProvider>;
    /**
     * Delete an authentication provider.
     * @param {AuthApiDeleteAuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthProvider(requestParameters: AuthApiDeleteAuthProviderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get an authentication provider.
     * @param {AuthApiGetAuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthProvider(requestParameters: AuthApiGetAuthProviderRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthenticationProviderAuthProvider>;
    /**
     * List all the available authentication providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAuthProviders(options?: RawAxiosRequestConfig): AxiosPromise<Array<AuthenticationProviderAuthProvider>>;
    /**
     * Lists the available login options for the configured authentication providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAuthProvidersLoginOptions(options?: RawAxiosRequestConfig): AxiosPromise<{
        [key: string]: any;
    }>;
    /**
     * Processes callback from OAuth2 provider and logs the user in if successful.
     * @param {AuthApiOauthProviderLoginCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthProviderLoginCallback(requestParameters: AuthApiOauthProviderLoginCallbackRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Redirects to the OAuth2 provider\'s authentication URL based on the provided auth provider\'s id.
     * @param {AuthApiOauthProviderLoginRedirectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthProviderLoginRedirect(requestParameters: AuthApiOauthProviderLoginRedirectRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook.
     * @param {AuthApiUpdateAuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthProvider(requestParameters: AuthApiUpdateAuthProviderRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthenticationProviderAuthProvider>;
};
/**
 * Request parameters for authProviderLoginUrl operation in AuthApi.
 * @export
 * @interface AuthApiAuthProviderLoginUrlRequest
 */
export interface AuthApiAuthProviderLoginUrlRequest {
    /**
     * The email address of the user that want to sign in using SAML.
     * @type {string}
     * @memberof AuthApiAuthProviderLoginUrl
     */
    readonly email?: string;
    /**
     * Please use the functionally identical &#x60;workspace_invitation_token&#x60; instead as this querystring is being removed in the future.
     * @type {string}
     * @memberof AuthApiAuthProviderLoginUrl
     */
    readonly groupInvitationToken?: string;
    /**
     * An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @type {string}
     * @memberof AuthApiAuthProviderLoginUrl
     */
    readonly language?: string;
    /**
     * The url to which the user should be redirected after a successful login.
     * @type {string}
     * @memberof AuthApiAuthProviderLoginUrl
     */
    readonly original?: string;
    /**
     * If provided and valid, the user accepts the workspace invitation and will have access to the workspace after login or signing up.
     * @type {string}
     * @memberof AuthApiAuthProviderLoginUrl
     */
    readonly workspaceInvitationToken?: string;
}
/**
 * Request parameters for authProviderSamlAcsUrl operation in AuthApi.
 * @export
 * @interface AuthApiAuthProviderSamlAcsUrlRequest
 */
export interface AuthApiAuthProviderSamlAcsUrlRequest {
    /**
     *
     * @type {SAMLResponse}
     * @memberof AuthApiAuthProviderSamlAcsUrl
     */
    readonly sAMLResponse: SAMLResponse;
}
/**
 * Request parameters for authProviderSamlSpLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthProviderSamlSpLoginRequest
 */
export interface AuthApiAuthProviderSamlSpLoginRequest {
    /**
     * The email address of the user that want to sign in using SAML.
     * @type {string}
     * @memberof AuthApiAuthProviderSamlSpLogin
     */
    readonly email?: string;
    /**
     * Please use the functionally identical &#x60;workspace_invitation_token&#x60; instead as this querystring is being removed in the future
     * @type {string}
     * @memberof AuthApiAuthProviderSamlSpLogin
     */
    readonly groupInvitationToken?: string;
    /**
     * An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     * @type {string}
     * @memberof AuthApiAuthProviderSamlSpLogin
     */
    readonly language?: string;
    /**
     * The url to which the user should be redirected after a successful login or sign up.
     * @type {string}
     * @memberof AuthApiAuthProviderSamlSpLogin
     */
    readonly original?: string;
    /**
     * If provided and valid, the user accepts the workspace invitation and will have access to the workspace after login or signing up.
     * @type {string}
     * @memberof AuthApiAuthProviderSamlSpLogin
     */
    readonly workspaceInvitationToken?: string;
}
/**
 * Request parameters for deleteAuthProvider operation in AuthApi.
 * @export
 * @interface AuthApiDeleteAuthProviderRequest
 */
export interface AuthApiDeleteAuthProviderRequest {
    /**
     * The authentication provider id to delete.
     * @type {number}
     * @memberof AuthApiDeleteAuthProvider
     */
    readonly authProviderId: number;
}
/**
 * Request parameters for getAuthProvider operation in AuthApi.
 * @export
 * @interface AuthApiGetAuthProviderRequest
 */
export interface AuthApiGetAuthProviderRequest {
    /**
     * The authentication provider id to fetch.
     * @type {number}
     * @memberof AuthApiGetAuthProvider
     */
    readonly authProviderId: number;
}
/**
 * Request parameters for oauthProviderLoginCallback operation in AuthApi.
 * @export
 * @interface AuthApiOauthProviderLoginCallbackRequest
 */
export interface AuthApiOauthProviderLoginCallbackRequest {
    /**
     * The id of the provider for which to process the callback.
     * @type {number}
     * @memberof AuthApiOauthProviderLoginCallback
     */
    readonly providerId: number;
    /**
     * The id of the provider for which to process the callback.
     * @type {number}
     * @memberof AuthApiOauthProviderLoginCallback
     */
    readonly code?: number;
}
/**
 * Request parameters for oauthProviderLoginRedirect operation in AuthApi.
 * @export
 * @interface AuthApiOauthProviderLoginRedirectRequest
 */
export interface AuthApiOauthProviderLoginRedirectRequest {
    /**
     * The id of the provider for redirect.
     * @type {number}
     * @memberof AuthApiOauthProviderLoginRedirect
     */
    readonly providerId: number;
    /**
     * Please use the functionally identical &#x60;workspace_invitation_token&#x60; instead as this querystring is being removed in the future.
     * @type {string}
     * @memberof AuthApiOauthProviderLoginRedirect
     */
    readonly groupInvitationToken?: string;
    /**
     * The relative part of URL that the user wanted to access.
     * @type {number}
     * @memberof AuthApiOauthProviderLoginRedirect
     */
    readonly original?: number;
    /**
     * The invitation token sent to the user to join a specific workspace.
     * @type {string}
     * @memberof AuthApiOauthProviderLoginRedirect
     */
    readonly workspaceInvitationToken?: string;
}
/**
 * Request parameters for updateAuthProvider operation in AuthApi.
 * @export
 * @interface AuthApiUpdateAuthProviderRequest
 */
export interface AuthApiUpdateAuthProviderRequest {
    /**
     * The authentication provider id to update.
     * @type {number}
     * @memberof AuthApiUpdateAuthProvider
     */
    readonly authProviderId: number;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     * Return the correct redirect_url to initiate the SSO SAML login. It needs an email address if multiple SAML providers are configured otherwise the only configured SAML provider signup URL will be returned.
     * @param {AuthApiAuthProviderLoginUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authProviderLoginUrl(requestParameters?: AuthApiAuthProviderLoginUrlRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<{
        [key: string]: string;
    }, any>>;
    /**
     * Complete the SAML authentication flow by validating the SAML response. Sign in the user if already exists in Baserow or create a new one otherwise. Once authenticated, the user will be redirected to the original URL they were trying to access. If the response is invalid, the user will be redirected to an error page with a specific error message.It accepts the language code and the workspace invitation token as query parameters if provided.
     * @param {AuthApiAuthProviderSamlAcsUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authProviderSamlAcsUrl(requestParameters: AuthApiAuthProviderSamlAcsUrlRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This is the endpoint that is called when the user wants to initiate a SSO SAML login from Baserow (the service provider). The user will be redirected to the SAML identity provider (IdP) where the user can authenticate. Once logged in in the IdP, the user will be redirected back to the assertion consumer service endpoint (ACS) where the SAML response will be validated and a new JWT session token will be provided to work with Baserow APIs.
     * @param {AuthApiAuthProviderSamlSpLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authProviderSamlSpLogin(requestParameters?: AuthApiAuthProviderSamlSpLoginRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Creates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    createAuthProvider(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthenticationProviderAuthProvider, any>>;
    /**
     * Delete an authentication provider.
     * @param {AuthApiDeleteAuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    deleteAuthProvider(requestParameters: AuthApiDeleteAuthProviderRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get an authentication provider.
     * @param {AuthApiGetAuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getAuthProvider(requestParameters: AuthApiGetAuthProviderRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthenticationProviderAuthProvider, any>>;
    /**
     * List all the available authentication providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    listAuthProviders(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthenticationProviderAuthProvider[], any>>;
    /**
     * Lists the available login options for the configured authentication providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    listAuthProvidersLoginOptions(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<{
        [key: string]: any;
    }, any>>;
    /**
     * Processes callback from OAuth2 provider and logs the user in if successful.
     * @param {AuthApiOauthProviderLoginCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    oauthProviderLoginCallback(requestParameters: AuthApiOauthProviderLoginCallbackRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Redirects to the OAuth2 provider\'s authentication URL based on the provided auth provider\'s id.
     * @param {AuthApiOauthProviderLoginRedirectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    oauthProviderLoginRedirect(requestParameters: AuthApiOauthProviderLoginRedirectRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook.
     * @param {AuthApiUpdateAuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    updateAuthProvider(requestParameters: AuthApiUpdateAuthProviderRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthenticationProviderAuthProvider, any>>;
}
/**
 * BuilderDataSourcesApi - axios parameter creator
 * @export
 */
export declare const BuilderDataSourcesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new builder data_source
     * @param {number} pageId Creates a data_source for the builder page related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {IntegrationServiceCreateDataSource} [integrationServiceCreateDataSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPageDataSource: (pageId: number, clientSessionId?: string, integrationServiceCreateDataSource?: IntegrationServiceCreateDataSource, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the data_source related by the given id.
     * @param {number} dataSourceId The id of the data_source
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPageDataSource: (dataSourceId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Dispatches the service of the related data_source and returns the result.
     * @param {number} dataSourceId The id of the data_source you want to call the dispatch for
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dispatchBuilderPageDataSource: (dataSourceId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Dispatches the service of the related page data_sources
     * @param {number} pageId The page we want to dispatch the data source for.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dispatchBuilderPageDataSources: (pageId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the data_sources of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} pageId Returns only the data_sources of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilderPageDataSources: (pageId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the data_sources of the page related to the provided parameter if the builder is public.
     * @param {number} pageId Returns only the data_sources of the page related to the provided Id if the related builder is public.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicBuilderPageDataSources: (pageId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Moves the data_source in the page before another data_source or at the end of the page if no before data_source is given. The data_sources must belong to the same page.
     * @param {number} dataSourceId The id of the data_source to move
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedMoveDataSource} [patchedMoveDataSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveBuilderPageDataSource: (dataSourceId: number, clientSessionId?: string, patchedMoveDataSource?: PatchedMoveDataSource, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing builder data_source.
     * @param {number} dataSourceId The id of the data_source
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedIntegrationServiceUpdateDataSource} [patchedIntegrationServiceUpdateDataSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPageDataSource: (dataSourceId: number, clientSessionId?: string, patchedIntegrationServiceUpdateDataSource?: PatchedIntegrationServiceUpdateDataSource, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BuilderDataSourcesApi - functional programming interface
 * @export
 */
export declare const BuilderDataSourcesApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new builder data_source
     * @param {number} pageId Creates a data_source for the builder page related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {IntegrationServiceCreateDataSource} [integrationServiceCreateDataSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPageDataSource(pageId: number, clientSessionId?: string, integrationServiceCreateDataSource?: IntegrationServiceCreateDataSource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationServiceDataSource>>;
    /**
     * Deletes the data_source related by the given id.
     * @param {number} dataSourceId The id of the data_source
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPageDataSource(dataSourceId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Dispatches the service of the related data_source and returns the result.
     * @param {number} dataSourceId The id of the data_source you want to call the dispatch for
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dispatchBuilderPageDataSource(dataSourceId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Dispatches the service of the related page data_sources
     * @param {number} pageId The page we want to dispatch the data source for.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dispatchBuilderPageDataSources(pageId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Lists all the data_sources of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} pageId Returns only the data_sources of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilderPageDataSources(pageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IntegrationServiceDataSource>>>;
    /**
     * Lists all the data_sources of the page related to the provided parameter if the builder is public.
     * @param {number} pageId Returns only the data_sources of the page related to the provided Id if the related builder is public.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicBuilderPageDataSources(pageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IntegrationServicePublicDataSource>>>;
    /**
     * Moves the data_source in the page before another data_source or at the end of the page if no before data_source is given. The data_sources must belong to the same page.
     * @param {number} dataSourceId The id of the data_source to move
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedMoveDataSource} [patchedMoveDataSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveBuilderPageDataSource(dataSourceId: number, clientSessionId?: string, patchedMoveDataSource?: PatchedMoveDataSource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationServiceDataSource>>;
    /**
     * Updates an existing builder data_source.
     * @param {number} dataSourceId The id of the data_source
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedIntegrationServiceUpdateDataSource} [patchedIntegrationServiceUpdateDataSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPageDataSource(dataSourceId: number, clientSessionId?: string, patchedIntegrationServiceUpdateDataSource?: PatchedIntegrationServiceUpdateDataSource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationServiceDataSource>>;
};
/**
 * BuilderDataSourcesApi - factory interface
 * @export
 */
export declare const BuilderDataSourcesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new builder data_source
     * @param {BuilderDataSourcesApiCreateBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPageDataSource(requestParameters: BuilderDataSourcesApiCreateBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegrationServiceDataSource>;
    /**
     * Deletes the data_source related by the given id.
     * @param {BuilderDataSourcesApiDeleteBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPageDataSource(requestParameters: BuilderDataSourcesApiDeleteBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Dispatches the service of the related data_source and returns the result.
     * @param {BuilderDataSourcesApiDispatchBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dispatchBuilderPageDataSource(requestParameters: BuilderDataSourcesApiDispatchBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Dispatches the service of the related page data_sources
     * @param {BuilderDataSourcesApiDispatchBuilderPageDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dispatchBuilderPageDataSources(requestParameters: BuilderDataSourcesApiDispatchBuilderPageDataSourcesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Lists all the data_sources of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {BuilderDataSourcesApiListBuilderPageDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilderPageDataSources(requestParameters: BuilderDataSourcesApiListBuilderPageDataSourcesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<IntegrationServiceDataSource>>;
    /**
     * Lists all the data_sources of the page related to the provided parameter if the builder is public.
     * @param {BuilderDataSourcesApiListPublicBuilderPageDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicBuilderPageDataSources(requestParameters: BuilderDataSourcesApiListPublicBuilderPageDataSourcesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<IntegrationServicePublicDataSource>>;
    /**
     * Moves the data_source in the page before another data_source or at the end of the page if no before data_source is given. The data_sources must belong to the same page.
     * @param {BuilderDataSourcesApiMoveBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveBuilderPageDataSource(requestParameters: BuilderDataSourcesApiMoveBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegrationServiceDataSource>;
    /**
     * Updates an existing builder data_source.
     * @param {BuilderDataSourcesApiUpdateBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPageDataSource(requestParameters: BuilderDataSourcesApiUpdateBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegrationServiceDataSource>;
};
/**
 * Request parameters for createBuilderPageDataSource operation in BuilderDataSourcesApi.
 * @export
 * @interface BuilderDataSourcesApiCreateBuilderPageDataSourceRequest
 */
export interface BuilderDataSourcesApiCreateBuilderPageDataSourceRequest {
    /**
     * Creates a data_source for the builder page related to the provided value.
     * @type {number}
     * @memberof BuilderDataSourcesApiCreateBuilderPageDataSource
     */
    readonly pageId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDataSourcesApiCreateBuilderPageDataSource
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {IntegrationServiceCreateDataSource}
     * @memberof BuilderDataSourcesApiCreateBuilderPageDataSource
     */
    readonly integrationServiceCreateDataSource?: IntegrationServiceCreateDataSource;
}
/**
 * Request parameters for deleteBuilderPageDataSource operation in BuilderDataSourcesApi.
 * @export
 * @interface BuilderDataSourcesApiDeleteBuilderPageDataSourceRequest
 */
export interface BuilderDataSourcesApiDeleteBuilderPageDataSourceRequest {
    /**
     * The id of the data_source
     * @type {number}
     * @memberof BuilderDataSourcesApiDeleteBuilderPageDataSource
     */
    readonly dataSourceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDataSourcesApiDeleteBuilderPageDataSource
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for dispatchBuilderPageDataSource operation in BuilderDataSourcesApi.
 * @export
 * @interface BuilderDataSourcesApiDispatchBuilderPageDataSourceRequest
 */
export interface BuilderDataSourcesApiDispatchBuilderPageDataSourceRequest {
    /**
     * The id of the data_source you want to call the dispatch for
     * @type {number}
     * @memberof BuilderDataSourcesApiDispatchBuilderPageDataSource
     */
    readonly dataSourceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDataSourcesApiDispatchBuilderPageDataSource
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for dispatchBuilderPageDataSources operation in BuilderDataSourcesApi.
 * @export
 * @interface BuilderDataSourcesApiDispatchBuilderPageDataSourcesRequest
 */
export interface BuilderDataSourcesApiDispatchBuilderPageDataSourcesRequest {
    /**
     * The page we want to dispatch the data source for.
     * @type {number}
     * @memberof BuilderDataSourcesApiDispatchBuilderPageDataSources
     */
    readonly pageId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDataSourcesApiDispatchBuilderPageDataSources
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for listBuilderPageDataSources operation in BuilderDataSourcesApi.
 * @export
 * @interface BuilderDataSourcesApiListBuilderPageDataSourcesRequest
 */
export interface BuilderDataSourcesApiListBuilderPageDataSourcesRequest {
    /**
     * Returns only the data_sources of the page related to the provided Id.
     * @type {number}
     * @memberof BuilderDataSourcesApiListBuilderPageDataSources
     */
    readonly pageId: number;
}
/**
 * Request parameters for listPublicBuilderPageDataSources operation in BuilderDataSourcesApi.
 * @export
 * @interface BuilderDataSourcesApiListPublicBuilderPageDataSourcesRequest
 */
export interface BuilderDataSourcesApiListPublicBuilderPageDataSourcesRequest {
    /**
     * Returns only the data_sources of the page related to the provided Id if the related builder is public.
     * @type {number}
     * @memberof BuilderDataSourcesApiListPublicBuilderPageDataSources
     */
    readonly pageId: number;
}
/**
 * Request parameters for moveBuilderPageDataSource operation in BuilderDataSourcesApi.
 * @export
 * @interface BuilderDataSourcesApiMoveBuilderPageDataSourceRequest
 */
export interface BuilderDataSourcesApiMoveBuilderPageDataSourceRequest {
    /**
     * The id of the data_source to move
     * @type {number}
     * @memberof BuilderDataSourcesApiMoveBuilderPageDataSource
     */
    readonly dataSourceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDataSourcesApiMoveBuilderPageDataSource
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedMoveDataSource}
     * @memberof BuilderDataSourcesApiMoveBuilderPageDataSource
     */
    readonly patchedMoveDataSource?: PatchedMoveDataSource;
}
/**
 * Request parameters for updateBuilderPageDataSource operation in BuilderDataSourcesApi.
 * @export
 * @interface BuilderDataSourcesApiUpdateBuilderPageDataSourceRequest
 */
export interface BuilderDataSourcesApiUpdateBuilderPageDataSourceRequest {
    /**
     * The id of the data_source
     * @type {number}
     * @memberof BuilderDataSourcesApiUpdateBuilderPageDataSource
     */
    readonly dataSourceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDataSourcesApiUpdateBuilderPageDataSource
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedIntegrationServiceUpdateDataSource}
     * @memberof BuilderDataSourcesApiUpdateBuilderPageDataSource
     */
    readonly patchedIntegrationServiceUpdateDataSource?: PatchedIntegrationServiceUpdateDataSource;
}
/**
 * BuilderDataSourcesApi - object-oriented interface
 * @export
 * @class BuilderDataSourcesApi
 * @extends {BaseAPI}
 */
export declare class BuilderDataSourcesApi extends BaseAPI {
    /**
     * Creates a new builder data_source
     * @param {BuilderDataSourcesApiCreateBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDataSourcesApi
     */
    createBuilderPageDataSource(requestParameters: BuilderDataSourcesApiCreateBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IntegrationServiceDataSource, any>>;
    /**
     * Deletes the data_source related by the given id.
     * @param {BuilderDataSourcesApiDeleteBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDataSourcesApi
     */
    deleteBuilderPageDataSource(requestParameters: BuilderDataSourcesApiDeleteBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Dispatches the service of the related data_source and returns the result.
     * @param {BuilderDataSourcesApiDispatchBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDataSourcesApi
     */
    dispatchBuilderPageDataSource(requestParameters: BuilderDataSourcesApiDispatchBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Dispatches the service of the related page data_sources
     * @param {BuilderDataSourcesApiDispatchBuilderPageDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDataSourcesApi
     */
    dispatchBuilderPageDataSources(requestParameters: BuilderDataSourcesApiDispatchBuilderPageDataSourcesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Lists all the data_sources of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {BuilderDataSourcesApiListBuilderPageDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDataSourcesApi
     */
    listBuilderPageDataSources(requestParameters: BuilderDataSourcesApiListBuilderPageDataSourcesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IntegrationServiceDataSource[], any>>;
    /**
     * Lists all the data_sources of the page related to the provided parameter if the builder is public.
     * @param {BuilderDataSourcesApiListPublicBuilderPageDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDataSourcesApi
     */
    listPublicBuilderPageDataSources(requestParameters: BuilderDataSourcesApiListPublicBuilderPageDataSourcesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IntegrationServicePublicDataSource[], any>>;
    /**
     * Moves the data_source in the page before another data_source or at the end of the page if no before data_source is given. The data_sources must belong to the same page.
     * @param {BuilderDataSourcesApiMoveBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDataSourcesApi
     */
    moveBuilderPageDataSource(requestParameters: BuilderDataSourcesApiMoveBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IntegrationServiceDataSource, any>>;
    /**
     * Updates an existing builder data_source.
     * @param {BuilderDataSourcesApiUpdateBuilderPageDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDataSourcesApi
     */
    updateBuilderPageDataSource(requestParameters: BuilderDataSourcesApiUpdateBuilderPageDataSourceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IntegrationServiceDataSource, any>>;
}
/**
 * BuilderDomainsApi - axios parameter creator
 * @export
 */
export declare const BuilderDomainsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint can be used to check whether a domain exists for SSL certificate purposes. It\'s compatible with the Caddy on_demand TLS as described here: https://caddyserver.com/docs/json/apps/tls/automation/on_demand/ask/. It will respond with a 200 status code if it exists or a 404 if it doesn\'t exist.
     * @param {number} [domain] The domain name for which
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    askPublicBuilderDomainExists: (domain?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new domain for an application builder
     * @param {number} builderId Creates a domain for the application builder related tothe provided value
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {DomainTypeCreateDomain} [domainTypeCreateDomain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderDomain: (builderId: number, clientSessionId?: string, domainTypeCreateDomain?: DomainTypeCreateDomain, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an existing domain of an application builder
     * @param {number} domainId The id of the domain
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderDomain: (domainId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets all the domains of a builder
     * @param {number} builderId Gets all the domains for the specified builder
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuilderDomains: (builderId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Apply a new order to the domains of a builder
     * @param {number} builderId The builder the domain belongs to
     * @param {OrderDomains} orderDomains
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderBuilderDomains: (builderId: number, orderDomains: OrderDomains, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint starts an asynchronous job to publish the builder. The job clones the current version of the given builder and publish it for the given domain.
     * @param {number} domainId The builder application id the user wants to publish.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishBuilderDomain: (domainId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing domain of an application builder
     * @param {number} domainId The id of the domain
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedUpdateDomain} [patchedUpdateDomain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderDomain: (domainId: number, clientSessionId?: string, patchedUpdateDomain?: PatchedUpdateDomain, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BuilderDomainsApi - functional programming interface
 * @export
 */
export declare const BuilderDomainsApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint can be used to check whether a domain exists for SSL certificate purposes. It\'s compatible with the Caddy on_demand TLS as described here: https://caddyserver.com/docs/json/apps/tls/automation/on_demand/ask/. It will respond with a 200 status code if it exists or a 404 if it doesn\'t exist.
     * @param {number} [domain] The domain name for which
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    askPublicBuilderDomainExists(domain?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Creates a new domain for an application builder
     * @param {number} builderId Creates a domain for the application builder related tothe provided value
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {DomainTypeCreateDomain} [domainTypeCreateDomain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderDomain(builderId: number, clientSessionId?: string, domainTypeCreateDomain?: DomainTypeCreateDomain, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainTypeDomain>>;
    /**
     * Deletes an existing domain of an application builder
     * @param {number} domainId The id of the domain
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderDomain(domainId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets all the domains of a builder
     * @param {number} builderId Gets all the domains for the specified builder
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuilderDomains(builderId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainTypeDomain>>>;
    /**
     * Apply a new order to the domains of a builder
     * @param {number} builderId The builder the domain belongs to
     * @param {OrderDomains} orderDomains
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderBuilderDomains(builderId: number, orderDomains: OrderDomains, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint starts an asynchronous job to publish the builder. The job clones the current version of the given builder and publish it for the given domain.
     * @param {number} domainId The builder application id the user wants to publish.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishBuilderDomain(domainId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates an existing domain of an application builder
     * @param {number} domainId The id of the domain
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedUpdateDomain} [patchedUpdateDomain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderDomain(domainId: number, clientSessionId?: string, patchedUpdateDomain?: PatchedUpdateDomain, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainTypeDomain>>;
};
/**
 * BuilderDomainsApi - factory interface
 * @export
 */
export declare const BuilderDomainsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint can be used to check whether a domain exists for SSL certificate purposes. It\'s compatible with the Caddy on_demand TLS as described here: https://caddyserver.com/docs/json/apps/tls/automation/on_demand/ask/. It will respond with a 200 status code if it exists or a 404 if it doesn\'t exist.
     * @param {BuilderDomainsApiAskPublicBuilderDomainExistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    askPublicBuilderDomainExists(requestParameters?: BuilderDomainsApiAskPublicBuilderDomainExistsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Creates a new domain for an application builder
     * @param {BuilderDomainsApiCreateBuilderDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderDomain(requestParameters: BuilderDomainsApiCreateBuilderDomainRequest, options?: RawAxiosRequestConfig): AxiosPromise<DomainTypeDomain>;
    /**
     * Deletes an existing domain of an application builder
     * @param {BuilderDomainsApiDeleteBuilderDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderDomain(requestParameters: BuilderDomainsApiDeleteBuilderDomainRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Gets all the domains of a builder
     * @param {BuilderDomainsApiGetBuilderDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuilderDomains(requestParameters: BuilderDomainsApiGetBuilderDomainsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<DomainTypeDomain>>;
    /**
     * Apply a new order to the domains of a builder
     * @param {BuilderDomainsApiOrderBuilderDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderBuilderDomains(requestParameters: BuilderDomainsApiOrderBuilderDomainsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint starts an asynchronous job to publish the builder. The job clones the current version of the given builder and publish it for the given domain.
     * @param {BuilderDomainsApiPublishBuilderDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishBuilderDomain(requestParameters: BuilderDomainsApiPublishBuilderDomainRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates an existing domain of an application builder
     * @param {BuilderDomainsApiUpdateBuilderDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderDomain(requestParameters: BuilderDomainsApiUpdateBuilderDomainRequest, options?: RawAxiosRequestConfig): AxiosPromise<DomainTypeDomain>;
};
/**
 * Request parameters for askPublicBuilderDomainExists operation in BuilderDomainsApi.
 * @export
 * @interface BuilderDomainsApiAskPublicBuilderDomainExistsRequest
 */
export interface BuilderDomainsApiAskPublicBuilderDomainExistsRequest {
    /**
     * The domain name for which
     * @type {number}
     * @memberof BuilderDomainsApiAskPublicBuilderDomainExists
     */
    readonly domain?: number;
}
/**
 * Request parameters for createBuilderDomain operation in BuilderDomainsApi.
 * @export
 * @interface BuilderDomainsApiCreateBuilderDomainRequest
 */
export interface BuilderDomainsApiCreateBuilderDomainRequest {
    /**
     * Creates a domain for the application builder related tothe provided value
     * @type {number}
     * @memberof BuilderDomainsApiCreateBuilderDomain
     */
    readonly builderId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDomainsApiCreateBuilderDomain
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {DomainTypeCreateDomain}
     * @memberof BuilderDomainsApiCreateBuilderDomain
     */
    readonly domainTypeCreateDomain?: DomainTypeCreateDomain;
}
/**
 * Request parameters for deleteBuilderDomain operation in BuilderDomainsApi.
 * @export
 * @interface BuilderDomainsApiDeleteBuilderDomainRequest
 */
export interface BuilderDomainsApiDeleteBuilderDomainRequest {
    /**
     * The id of the domain
     * @type {number}
     * @memberof BuilderDomainsApiDeleteBuilderDomain
     */
    readonly domainId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDomainsApiDeleteBuilderDomain
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for getBuilderDomains operation in BuilderDomainsApi.
 * @export
 * @interface BuilderDomainsApiGetBuilderDomainsRequest
 */
export interface BuilderDomainsApiGetBuilderDomainsRequest {
    /**
     * Gets all the domains for the specified builder
     * @type {number}
     * @memberof BuilderDomainsApiGetBuilderDomains
     */
    readonly builderId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDomainsApiGetBuilderDomains
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for orderBuilderDomains operation in BuilderDomainsApi.
 * @export
 * @interface BuilderDomainsApiOrderBuilderDomainsRequest
 */
export interface BuilderDomainsApiOrderBuilderDomainsRequest {
    /**
     * The builder the domain belongs to
     * @type {number}
     * @memberof BuilderDomainsApiOrderBuilderDomains
     */
    readonly builderId: number;
    /**
     *
     * @type {OrderDomains}
     * @memberof BuilderDomainsApiOrderBuilderDomains
     */
    readonly orderDomains: OrderDomains;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDomainsApiOrderBuilderDomains
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for publishBuilderDomain operation in BuilderDomainsApi.
 * @export
 * @interface BuilderDomainsApiPublishBuilderDomainRequest
 */
export interface BuilderDomainsApiPublishBuilderDomainRequest {
    /**
     * The builder application id the user wants to publish.
     * @type {number}
     * @memberof BuilderDomainsApiPublishBuilderDomain
     */
    readonly domainId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDomainsApiPublishBuilderDomain
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for updateBuilderDomain operation in BuilderDomainsApi.
 * @export
 * @interface BuilderDomainsApiUpdateBuilderDomainRequest
 */
export interface BuilderDomainsApiUpdateBuilderDomainRequest {
    /**
     * The id of the domain
     * @type {number}
     * @memberof BuilderDomainsApiUpdateBuilderDomain
     */
    readonly domainId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderDomainsApiUpdateBuilderDomain
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedUpdateDomain}
     * @memberof BuilderDomainsApiUpdateBuilderDomain
     */
    readonly patchedUpdateDomain?: PatchedUpdateDomain;
}
/**
 * BuilderDomainsApi - object-oriented interface
 * @export
 * @class BuilderDomainsApi
 * @extends {BaseAPI}
 */
export declare class BuilderDomainsApi extends BaseAPI {
    /**
     * This endpoint can be used to check whether a domain exists for SSL certificate purposes. It\'s compatible with the Caddy on_demand TLS as described here: https://caddyserver.com/docs/json/apps/tls/automation/on_demand/ask/. It will respond with a 200 status code if it exists or a 404 if it doesn\'t exist.
     * @param {BuilderDomainsApiAskPublicBuilderDomainExistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDomainsApi
     */
    askPublicBuilderDomainExists(requestParameters?: BuilderDomainsApiAskPublicBuilderDomainExistsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Creates a new domain for an application builder
     * @param {BuilderDomainsApiCreateBuilderDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDomainsApi
     */
    createBuilderDomain(requestParameters: BuilderDomainsApiCreateBuilderDomainRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainTypeDomain, any>>;
    /**
     * Deletes an existing domain of an application builder
     * @param {BuilderDomainsApiDeleteBuilderDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDomainsApi
     */
    deleteBuilderDomain(requestParameters: BuilderDomainsApiDeleteBuilderDomainRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets all the domains of a builder
     * @param {BuilderDomainsApiGetBuilderDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDomainsApi
     */
    getBuilderDomains(requestParameters: BuilderDomainsApiGetBuilderDomainsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainTypeDomain[], any>>;
    /**
     * Apply a new order to the domains of a builder
     * @param {BuilderDomainsApiOrderBuilderDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDomainsApi
     */
    orderBuilderDomains(requestParameters: BuilderDomainsApiOrderBuilderDomainsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint starts an asynchronous job to publish the builder. The job clones the current version of the given builder and publish it for the given domain.
     * @param {BuilderDomainsApiPublishBuilderDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDomainsApi
     */
    publishBuilderDomain(requestParameters: BuilderDomainsApiPublishBuilderDomainRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates an existing domain of an application builder
     * @param {BuilderDomainsApiUpdateBuilderDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderDomainsApi
     */
    updateBuilderDomain(requestParameters: BuilderDomainsApiUpdateBuilderDomainRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainTypeDomain, any>>;
}
/**
 * BuilderElementsApi - axios parameter creator
 * @export
 */
export declare const BuilderElementsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new builder element
     * @param {number} pageId Creates an element for the builder page related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {ElementTypeCreateElement} [elementTypeCreateElement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPageElement: (pageId: number, clientSessionId?: string, elementTypeCreateElement?: ElementTypeCreateElement, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the element related by the given id.
     * @param {number} elementId The id of the element
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPageElement: (elementId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Duplicates an element and all of the elements children and the associated workflow actions as well.
     * @param {number} elementId The id of the element to duplicate
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateBuilderPageElement: (elementId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the elements of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} pageId Returns only the elements of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilderPageElements: (pageId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the elements of the page related to the provided parameter. If the user is Anonymous, the page must belong to a published builder instance to being accessible.
     * @param {number} pageId Returns the elements of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicBuilderPageElements: (pageId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Moves the element in the page before another element or at the end of the page if no before element is given. The elements must belong to the same page.
     * @param {number} elementId The id of the element to move
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedMoveElement} [patchedMoveElement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveBuilderPageElement: (elementId: number, clientSessionId?: string, patchedMoveElement?: PatchedMoveElement, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing builder element.
     * @param {number} elementId The id of the element
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedElementTypeUpdateElement} [patchedElementTypeUpdateElement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPageElement: (elementId: number, clientSessionId?: string, patchedElementTypeUpdateElement?: PatchedElementTypeUpdateElement, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BuilderElementsApi - functional programming interface
 * @export
 */
export declare const BuilderElementsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new builder element
     * @param {number} pageId Creates an element for the builder page related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {ElementTypeCreateElement} [elementTypeCreateElement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPageElement(pageId: number, clientSessionId?: string, elementTypeCreateElement?: ElementTypeCreateElement, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementTypeElement>>;
    /**
     * Deletes the element related by the given id.
     * @param {number} elementId The id of the element
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPageElement(elementId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Duplicates an element and all of the elements children and the associated workflow actions as well.
     * @param {number} elementId The id of the element to duplicate
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateBuilderPageElement(elementId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DuplicateElement>>;
    /**
     * Lists all the elements of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} pageId Returns only the elements of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilderPageElements(pageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ElementTypeElement>>>;
    /**
     * Lists all the elements of the page related to the provided parameter. If the user is Anonymous, the page must belong to a published builder instance to being accessible.
     * @param {number} pageId Returns the elements of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicBuilderPageElements(pageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ElementTypePublicElement>>>;
    /**
     * Moves the element in the page before another element or at the end of the page if no before element is given. The elements must belong to the same page.
     * @param {number} elementId The id of the element to move
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedMoveElement} [patchedMoveElement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveBuilderPageElement(elementId: number, clientSessionId?: string, patchedMoveElement?: PatchedMoveElement, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementTypeElement>>;
    /**
     * Updates an existing builder element.
     * @param {number} elementId The id of the element
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedElementTypeUpdateElement} [patchedElementTypeUpdateElement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPageElement(elementId: number, clientSessionId?: string, patchedElementTypeUpdateElement?: PatchedElementTypeUpdateElement, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementTypeElement>>;
};
/**
 * BuilderElementsApi - factory interface
 * @export
 */
export declare const BuilderElementsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new builder element
     * @param {BuilderElementsApiCreateBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPageElement(requestParameters: BuilderElementsApiCreateBuilderPageElementRequest, options?: RawAxiosRequestConfig): AxiosPromise<ElementTypeElement>;
    /**
     * Deletes the element related by the given id.
     * @param {BuilderElementsApiDeleteBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPageElement(requestParameters: BuilderElementsApiDeleteBuilderPageElementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Duplicates an element and all of the elements children and the associated workflow actions as well.
     * @param {BuilderElementsApiDuplicateBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateBuilderPageElement(requestParameters: BuilderElementsApiDuplicateBuilderPageElementRequest, options?: RawAxiosRequestConfig): AxiosPromise<DuplicateElement>;
    /**
     * Lists all the elements of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {BuilderElementsApiListBuilderPageElementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilderPageElements(requestParameters: BuilderElementsApiListBuilderPageElementsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ElementTypeElement>>;
    /**
     * Lists all the elements of the page related to the provided parameter. If the user is Anonymous, the page must belong to a published builder instance to being accessible.
     * @param {BuilderElementsApiListPublicBuilderPageElementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicBuilderPageElements(requestParameters: BuilderElementsApiListPublicBuilderPageElementsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ElementTypePublicElement>>;
    /**
     * Moves the element in the page before another element or at the end of the page if no before element is given. The elements must belong to the same page.
     * @param {BuilderElementsApiMoveBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveBuilderPageElement(requestParameters: BuilderElementsApiMoveBuilderPageElementRequest, options?: RawAxiosRequestConfig): AxiosPromise<ElementTypeElement>;
    /**
     * Updates an existing builder element.
     * @param {BuilderElementsApiUpdateBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPageElement(requestParameters: BuilderElementsApiUpdateBuilderPageElementRequest, options?: RawAxiosRequestConfig): AxiosPromise<ElementTypeElement>;
};
/**
 * Request parameters for createBuilderPageElement operation in BuilderElementsApi.
 * @export
 * @interface BuilderElementsApiCreateBuilderPageElementRequest
 */
export interface BuilderElementsApiCreateBuilderPageElementRequest {
    /**
     * Creates an element for the builder page related to the provided value.
     * @type {number}
     * @memberof BuilderElementsApiCreateBuilderPageElement
     */
    readonly pageId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderElementsApiCreateBuilderPageElement
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {ElementTypeCreateElement}
     * @memberof BuilderElementsApiCreateBuilderPageElement
     */
    readonly elementTypeCreateElement?: ElementTypeCreateElement;
}
/**
 * Request parameters for deleteBuilderPageElement operation in BuilderElementsApi.
 * @export
 * @interface BuilderElementsApiDeleteBuilderPageElementRequest
 */
export interface BuilderElementsApiDeleteBuilderPageElementRequest {
    /**
     * The id of the element
     * @type {number}
     * @memberof BuilderElementsApiDeleteBuilderPageElement
     */
    readonly elementId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderElementsApiDeleteBuilderPageElement
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for duplicateBuilderPageElement operation in BuilderElementsApi.
 * @export
 * @interface BuilderElementsApiDuplicateBuilderPageElementRequest
 */
export interface BuilderElementsApiDuplicateBuilderPageElementRequest {
    /**
     * The id of the element to duplicate
     * @type {number}
     * @memberof BuilderElementsApiDuplicateBuilderPageElement
     */
    readonly elementId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderElementsApiDuplicateBuilderPageElement
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for listBuilderPageElements operation in BuilderElementsApi.
 * @export
 * @interface BuilderElementsApiListBuilderPageElementsRequest
 */
export interface BuilderElementsApiListBuilderPageElementsRequest {
    /**
     * Returns only the elements of the page related to the provided Id.
     * @type {number}
     * @memberof BuilderElementsApiListBuilderPageElements
     */
    readonly pageId: number;
}
/**
 * Request parameters for listPublicBuilderPageElements operation in BuilderElementsApi.
 * @export
 * @interface BuilderElementsApiListPublicBuilderPageElementsRequest
 */
export interface BuilderElementsApiListPublicBuilderPageElementsRequest {
    /**
     * Returns the elements of the page related to the provided Id.
     * @type {number}
     * @memberof BuilderElementsApiListPublicBuilderPageElements
     */
    readonly pageId: number;
}
/**
 * Request parameters for moveBuilderPageElement operation in BuilderElementsApi.
 * @export
 * @interface BuilderElementsApiMoveBuilderPageElementRequest
 */
export interface BuilderElementsApiMoveBuilderPageElementRequest {
    /**
     * The id of the element to move
     * @type {number}
     * @memberof BuilderElementsApiMoveBuilderPageElement
     */
    readonly elementId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderElementsApiMoveBuilderPageElement
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedMoveElement}
     * @memberof BuilderElementsApiMoveBuilderPageElement
     */
    readonly patchedMoveElement?: PatchedMoveElement;
}
/**
 * Request parameters for updateBuilderPageElement operation in BuilderElementsApi.
 * @export
 * @interface BuilderElementsApiUpdateBuilderPageElementRequest
 */
export interface BuilderElementsApiUpdateBuilderPageElementRequest {
    /**
     * The id of the element
     * @type {number}
     * @memberof BuilderElementsApiUpdateBuilderPageElement
     */
    readonly elementId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderElementsApiUpdateBuilderPageElement
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedElementTypeUpdateElement}
     * @memberof BuilderElementsApiUpdateBuilderPageElement
     */
    readonly patchedElementTypeUpdateElement?: PatchedElementTypeUpdateElement;
}
/**
 * BuilderElementsApi - object-oriented interface
 * @export
 * @class BuilderElementsApi
 * @extends {BaseAPI}
 */
export declare class BuilderElementsApi extends BaseAPI {
    /**
     * Creates a new builder element
     * @param {BuilderElementsApiCreateBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderElementsApi
     */
    createBuilderPageElement(requestParameters: BuilderElementsApiCreateBuilderPageElementRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementTypeElement, any>>;
    /**
     * Deletes the element related by the given id.
     * @param {BuilderElementsApiDeleteBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderElementsApi
     */
    deleteBuilderPageElement(requestParameters: BuilderElementsApiDeleteBuilderPageElementRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Duplicates an element and all of the elements children and the associated workflow actions as well.
     * @param {BuilderElementsApiDuplicateBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderElementsApi
     */
    duplicateBuilderPageElement(requestParameters: BuilderElementsApiDuplicateBuilderPageElementRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DuplicateElement, any>>;
    /**
     * Lists all the elements of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {BuilderElementsApiListBuilderPageElementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderElementsApi
     */
    listBuilderPageElements(requestParameters: BuilderElementsApiListBuilderPageElementsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementTypeElement[], any>>;
    /**
     * Lists all the elements of the page related to the provided parameter. If the user is Anonymous, the page must belong to a published builder instance to being accessible.
     * @param {BuilderElementsApiListPublicBuilderPageElementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderElementsApi
     */
    listPublicBuilderPageElements(requestParameters: BuilderElementsApiListPublicBuilderPageElementsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementTypePublicElement[], any>>;
    /**
     * Moves the element in the page before another element or at the end of the page if no before element is given. The elements must belong to the same page.
     * @param {BuilderElementsApiMoveBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderElementsApi
     */
    moveBuilderPageElement(requestParameters: BuilderElementsApiMoveBuilderPageElementRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementTypeElement, any>>;
    /**
     * Updates an existing builder element.
     * @param {BuilderElementsApiUpdateBuilderPageElementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderElementsApi
     */
    updateBuilderPageElement(requestParameters: BuilderElementsApiUpdateBuilderPageElementRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementTypeElement, any>>;
}
/**
 * BuilderPagesApi - axios parameter creator
 * @export
 */
export declare const BuilderPagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new page for an application builder
     * @param {number} builderId Creates a page for the application builder related to the provided value.
     * @param {CreatePage} createPage
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPage: (builderId: number, createPage: CreatePage, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an existing page of an application builder
     * @param {number} pageId The id of the page
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPage: (pageId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Start a job to duplicate the page with the provided `page_id` parameter if the authorized user has access to the builder\'s workspace.
     * @param {number} pageId The page to duplicate.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateBuilderPageAsync: (pageId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Apply a new order to the pages of a builder
     * @param {number} builderId The builder the page belongs to
     * @param {OrderPages} orderPages
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderBuilderPages: (builderId: number, orderPages: OrderPages, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing page of an application builder
     * @param {number} pageId The id of the page
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedUpdatePage} [patchedUpdatePage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPage: (pageId: number, clientSessionId?: string, patchedUpdatePage?: PatchedUpdatePage, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BuilderPagesApi - functional programming interface
 * @export
 */
export declare const BuilderPagesApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new page for an application builder
     * @param {number} builderId Creates a page for the application builder related to the provided value.
     * @param {CreatePage} createPage
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPage(builderId: number, createPage: CreatePage, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>>;
    /**
     * Deletes an existing page of an application builder
     * @param {number} pageId The id of the page
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPage(pageId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Start a job to duplicate the page with the provided `page_id` parameter if the authorized user has access to the builder\'s workspace.
     * @param {number} pageId The page to duplicate.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateBuilderPageAsync(pageId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleDuplicatePageJobType>>;
    /**
     * Apply a new order to the pages of a builder
     * @param {number} builderId The builder the page belongs to
     * @param {OrderPages} orderPages
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderBuilderPages(builderId: number, orderPages: OrderPages, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates an existing page of an application builder
     * @param {number} pageId The id of the page
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedUpdatePage} [patchedUpdatePage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPage(pageId: number, clientSessionId?: string, patchedUpdatePage?: PatchedUpdatePage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>>;
};
/**
 * BuilderPagesApi - factory interface
 * @export
 */
export declare const BuilderPagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new page for an application builder
     * @param {BuilderPagesApiCreateBuilderPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPage(requestParameters: BuilderPagesApiCreateBuilderPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<Page>;
    /**
     * Deletes an existing page of an application builder
     * @param {BuilderPagesApiDeleteBuilderPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPage(requestParameters: BuilderPagesApiDeleteBuilderPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Start a job to duplicate the page with the provided `page_id` parameter if the authorized user has access to the builder\'s workspace.
     * @param {BuilderPagesApiDuplicateBuilderPageAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateBuilderPageAsync(requestParameters: BuilderPagesApiDuplicateBuilderPageAsyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<SingleDuplicatePageJobType>;
    /**
     * Apply a new order to the pages of a builder
     * @param {BuilderPagesApiOrderBuilderPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderBuilderPages(requestParameters: BuilderPagesApiOrderBuilderPagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates an existing page of an application builder
     * @param {BuilderPagesApiUpdateBuilderPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPage(requestParameters: BuilderPagesApiUpdateBuilderPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<Page>;
};
/**
 * Request parameters for createBuilderPage operation in BuilderPagesApi.
 * @export
 * @interface BuilderPagesApiCreateBuilderPageRequest
 */
export interface BuilderPagesApiCreateBuilderPageRequest {
    /**
     * Creates a page for the application builder related to the provided value.
     * @type {number}
     * @memberof BuilderPagesApiCreateBuilderPage
     */
    readonly builderId: number;
    /**
     *
     * @type {CreatePage}
     * @memberof BuilderPagesApiCreateBuilderPage
     */
    readonly createPage: CreatePage;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderPagesApiCreateBuilderPage
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for deleteBuilderPage operation in BuilderPagesApi.
 * @export
 * @interface BuilderPagesApiDeleteBuilderPageRequest
 */
export interface BuilderPagesApiDeleteBuilderPageRequest {
    /**
     * The id of the page
     * @type {number}
     * @memberof BuilderPagesApiDeleteBuilderPage
     */
    readonly pageId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderPagesApiDeleteBuilderPage
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for duplicateBuilderPageAsync operation in BuilderPagesApi.
 * @export
 * @interface BuilderPagesApiDuplicateBuilderPageAsyncRequest
 */
export interface BuilderPagesApiDuplicateBuilderPageAsyncRequest {
    /**
     * The page to duplicate.
     * @type {number}
     * @memberof BuilderPagesApiDuplicateBuilderPageAsync
     */
    readonly pageId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderPagesApiDuplicateBuilderPageAsync
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for orderBuilderPages operation in BuilderPagesApi.
 * @export
 * @interface BuilderPagesApiOrderBuilderPagesRequest
 */
export interface BuilderPagesApiOrderBuilderPagesRequest {
    /**
     * The builder the page belongs to
     * @type {number}
     * @memberof BuilderPagesApiOrderBuilderPages
     */
    readonly builderId: number;
    /**
     *
     * @type {OrderPages}
     * @memberof BuilderPagesApiOrderBuilderPages
     */
    readonly orderPages: OrderPages;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderPagesApiOrderBuilderPages
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for updateBuilderPage operation in BuilderPagesApi.
 * @export
 * @interface BuilderPagesApiUpdateBuilderPageRequest
 */
export interface BuilderPagesApiUpdateBuilderPageRequest {
    /**
     * The id of the page
     * @type {number}
     * @memberof BuilderPagesApiUpdateBuilderPage
     */
    readonly pageId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderPagesApiUpdateBuilderPage
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedUpdatePage}
     * @memberof BuilderPagesApiUpdateBuilderPage
     */
    readonly patchedUpdatePage?: PatchedUpdatePage;
}
/**
 * BuilderPagesApi - object-oriented interface
 * @export
 * @class BuilderPagesApi
 * @extends {BaseAPI}
 */
export declare class BuilderPagesApi extends BaseAPI {
    /**
     * Creates a new page for an application builder
     * @param {BuilderPagesApiCreateBuilderPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderPagesApi
     */
    createBuilderPage(requestParameters: BuilderPagesApiCreateBuilderPageRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Page, any>>;
    /**
     * Deletes an existing page of an application builder
     * @param {BuilderPagesApiDeleteBuilderPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderPagesApi
     */
    deleteBuilderPage(requestParameters: BuilderPagesApiDeleteBuilderPageRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Start a job to duplicate the page with the provided `page_id` parameter if the authorized user has access to the builder\'s workspace.
     * @param {BuilderPagesApiDuplicateBuilderPageAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderPagesApi
     */
    duplicateBuilderPageAsync(requestParameters: BuilderPagesApiDuplicateBuilderPageAsyncRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleDuplicatePageJobType, any>>;
    /**
     * Apply a new order to the pages of a builder
     * @param {BuilderPagesApiOrderBuilderPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderPagesApi
     */
    orderBuilderPages(requestParameters: BuilderPagesApiOrderBuilderPagesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates an existing page of an application builder
     * @param {BuilderPagesApiUpdateBuilderPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderPagesApi
     */
    updateBuilderPage(requestParameters: BuilderPagesApiUpdateBuilderPageRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Page, any>>;
}
/**
 * BuilderPublicApi - axios parameter creator
 * @export
 */
export declare const BuilderPublicApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns the public serialized version of the builder for the given domain name and its pages .
     * @param {string} domainName Returns the builder published for the given domain name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicBuilderByDomainName: (domainName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the public serialized version of the builder and its pages for the given builder id.
     * @param {number} builderId Returns the builder related to the provided Id and its pages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicBuilderById: (builderId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BuilderPublicApi - functional programming interface
 * @export
 */
export declare const BuilderPublicApiFp: (configuration?: Configuration) => {
    /**
     * Returns the public serialized version of the builder for the given domain name and its pages .
     * @param {string} domainName Returns the builder published for the given domain name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicBuilderByDomainName(domainName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicBuilder>>;
    /**
     * Returns the public serialized version of the builder and its pages for the given builder id.
     * @param {number} builderId Returns the builder related to the provided Id and its pages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicBuilderById(builderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicBuilder>>;
};
/**
 * BuilderPublicApi - factory interface
 * @export
 */
export declare const BuilderPublicApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns the public serialized version of the builder for the given domain name and its pages .
     * @param {BuilderPublicApiGetPublicBuilderByDomainNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicBuilderByDomainName(requestParameters: BuilderPublicApiGetPublicBuilderByDomainNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicBuilder>;
    /**
     * Returns the public serialized version of the builder and its pages for the given builder id.
     * @param {BuilderPublicApiGetPublicBuilderByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicBuilderById(requestParameters: BuilderPublicApiGetPublicBuilderByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicBuilder>;
};
/**
 * Request parameters for getPublicBuilderByDomainName operation in BuilderPublicApi.
 * @export
 * @interface BuilderPublicApiGetPublicBuilderByDomainNameRequest
 */
export interface BuilderPublicApiGetPublicBuilderByDomainNameRequest {
    /**
     * Returns the builder published for the given domain name.
     * @type {string}
     * @memberof BuilderPublicApiGetPublicBuilderByDomainName
     */
    readonly domainName: string;
}
/**
 * Request parameters for getPublicBuilderById operation in BuilderPublicApi.
 * @export
 * @interface BuilderPublicApiGetPublicBuilderByIdRequest
 */
export interface BuilderPublicApiGetPublicBuilderByIdRequest {
    /**
     * Returns the builder related to the provided Id and its pages.
     * @type {number}
     * @memberof BuilderPublicApiGetPublicBuilderById
     */
    readonly builderId: number;
}
/**
 * BuilderPublicApi - object-oriented interface
 * @export
 * @class BuilderPublicApi
 * @extends {BaseAPI}
 */
export declare class BuilderPublicApi extends BaseAPI {
    /**
     * Returns the public serialized version of the builder for the given domain name and its pages .
     * @param {BuilderPublicApiGetPublicBuilderByDomainNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderPublicApi
     */
    getPublicBuilderByDomainName(requestParameters: BuilderPublicApiGetPublicBuilderByDomainNameRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicBuilder, any>>;
    /**
     * Returns the public serialized version of the builder and its pages for the given builder id.
     * @param {BuilderPublicApiGetPublicBuilderByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderPublicApi
     */
    getPublicBuilderById(requestParameters: BuilderPublicApiGetPublicBuilderByIdRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicBuilder, any>>;
}
/**
 * BuilderThemeApi - axios parameter creator
 * @export
 */
export declare const BuilderThemeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Updates the theme properties for the provided id.
     * @param {number} builderId Updates the theme for the application builder related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedCombinedThemeConfigBlocks} [patchedCombinedThemeConfigBlocks]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderTheme: (builderId: number, clientSessionId?: string, patchedCombinedThemeConfigBlocks?: PatchedCombinedThemeConfigBlocks, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BuilderThemeApi - functional programming interface
 * @export
 */
export declare const BuilderThemeApiFp: (configuration?: Configuration) => {
    /**
     * Updates the theme properties for the provided id.
     * @param {number} builderId Updates the theme for the application builder related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedCombinedThemeConfigBlocks} [patchedCombinedThemeConfigBlocks]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderTheme(builderId: number, clientSessionId?: string, patchedCombinedThemeConfigBlocks?: PatchedCombinedThemeConfigBlocks, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CombinedThemeConfigBlocks>>;
};
/**
 * BuilderThemeApi - factory interface
 * @export
 */
export declare const BuilderThemeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Updates the theme properties for the provided id.
     * @param {BuilderThemeApiUpdateBuilderThemeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderTheme(requestParameters: BuilderThemeApiUpdateBuilderThemeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CombinedThemeConfigBlocks>;
};
/**
 * Request parameters for updateBuilderTheme operation in BuilderThemeApi.
 * @export
 * @interface BuilderThemeApiUpdateBuilderThemeRequest
 */
export interface BuilderThemeApiUpdateBuilderThemeRequest {
    /**
     * Updates the theme for the application builder related to the provided value.
     * @type {number}
     * @memberof BuilderThemeApiUpdateBuilderTheme
     */
    readonly builderId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderThemeApiUpdateBuilderTheme
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedCombinedThemeConfigBlocks}
     * @memberof BuilderThemeApiUpdateBuilderTheme
     */
    readonly patchedCombinedThemeConfigBlocks?: PatchedCombinedThemeConfigBlocks;
}
/**
 * BuilderThemeApi - object-oriented interface
 * @export
 * @class BuilderThemeApi
 * @extends {BaseAPI}
 */
export declare class BuilderThemeApi extends BaseAPI {
    /**
     * Updates the theme properties for the provided id.
     * @param {BuilderThemeApiUpdateBuilderThemeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderThemeApi
     */
    updateBuilderTheme(requestParameters: BuilderThemeApiUpdateBuilderThemeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CombinedThemeConfigBlocks, any>>;
}
/**
 * BuilderWorkflowActionsApi - axios parameter creator
 * @export
 */
export declare const BuilderWorkflowActionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new builder workflow action
     * @param {number} pageId Creates a workflow action for the builder page related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {BuilderWorkflowActionTypeCreateBuilderWorkflowAction} [builderWorkflowActionTypeCreateBuilderWorkflowAction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPageWorkflowAction: (pageId: number, clientSessionId?: string, builderWorkflowActionTypeCreateBuilderWorkflowAction?: BuilderWorkflowActionTypeCreateBuilderWorkflowAction, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the workflow action related by the given id.
     * @param {number} workflowActionId The id of the workflow action
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPageWorkflowAction: (workflowActionId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Dispatches the service of the related workflow_action and returns the result.
     * @param {number} workflowActionId The id of the workflow_action you want to call the dispatch for.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dispatchBuilderPageWorkflowAction: (workflowActionId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the workflow actions of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} pageId Returns only the workflow actions of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilderPageWorkflowActions: (pageId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the workflow actions with their public accessible data. Some configuration might be omitted for security reasons such as passwords or PII.
     * @param {number} pageId Returns only the public workflow actions of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicBuilderPageWorkflowActions: (pageId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Apply a new order to the workflow actions of a page
     * @param {number} pageId The page the workflow actions belong to
     * @param {OrderWorkflowActions} orderWorkflowActions
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderBuilderWorkflowActions: (pageId: number, orderWorkflowActions: OrderWorkflowActions, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing builder workflow action.
     * @param {number} workflowActionId The id of the workflow action
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions} [patchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPageWorkflowAction: (workflowActionId: number, clientSessionId?: string, patchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions?: PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BuilderWorkflowActionsApi - functional programming interface
 * @export
 */
export declare const BuilderWorkflowActionsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new builder workflow action
     * @param {number} pageId Creates a workflow action for the builder page related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {BuilderWorkflowActionTypeCreateBuilderWorkflowAction} [builderWorkflowActionTypeCreateBuilderWorkflowAction]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPageWorkflowAction(pageId: number, clientSessionId?: string, builderWorkflowActionTypeCreateBuilderWorkflowAction?: BuilderWorkflowActionTypeCreateBuilderWorkflowAction, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuilderWorkflowActionTypeBuilderWorkflowAction>>;
    /**
     * Deletes the workflow action related by the given id.
     * @param {number} workflowActionId The id of the workflow action
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPageWorkflowAction(workflowActionId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Dispatches the service of the related workflow_action and returns the result.
     * @param {number} workflowActionId The id of the workflow_action you want to call the dispatch for.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dispatchBuilderPageWorkflowAction(workflowActionId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Lists all the workflow actions of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} pageId Returns only the workflow actions of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilderPageWorkflowActions(pageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuilderWorkflowActionTypeBuilderWorkflowAction>>>;
    /**
     * Lists all the workflow actions with their public accessible data. Some configuration might be omitted for security reasons such as passwords or PII.
     * @param {number} pageId Returns only the public workflow actions of the page related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicBuilderPageWorkflowActions(pageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PublicBuilderWorkflowActionTypeBuilderWorkflowAction>>>;
    /**
     * Apply a new order to the workflow actions of a page
     * @param {number} pageId The page the workflow actions belong to
     * @param {OrderWorkflowActions} orderWorkflowActions
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderBuilderWorkflowActions(pageId: number, orderWorkflowActions: OrderWorkflowActions, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates an existing builder workflow action.
     * @param {number} workflowActionId The id of the workflow action
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions} [patchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPageWorkflowAction(workflowActionId: number, clientSessionId?: string, patchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions?: PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuilderWorkflowActionTypeBuilderWorkflowAction>>;
};
/**
 * BuilderWorkflowActionsApi - factory interface
 * @export
 */
export declare const BuilderWorkflowActionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new builder workflow action
     * @param {BuilderWorkflowActionsApiCreateBuilderPageWorkflowActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuilderPageWorkflowAction(requestParameters: BuilderWorkflowActionsApiCreateBuilderPageWorkflowActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<BuilderWorkflowActionTypeBuilderWorkflowAction>;
    /**
     * Deletes the workflow action related by the given id.
     * @param {BuilderWorkflowActionsApiDeleteBuilderPageWorkflowActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuilderPageWorkflowAction(requestParameters: BuilderWorkflowActionsApiDeleteBuilderPageWorkflowActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Dispatches the service of the related workflow_action and returns the result.
     * @param {BuilderWorkflowActionsApiDispatchBuilderPageWorkflowActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dispatchBuilderPageWorkflowAction(requestParameters: BuilderWorkflowActionsApiDispatchBuilderPageWorkflowActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Lists all the workflow actions of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {BuilderWorkflowActionsApiListBuilderPageWorkflowActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilderPageWorkflowActions(requestParameters: BuilderWorkflowActionsApiListBuilderPageWorkflowActionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<BuilderWorkflowActionTypeBuilderWorkflowAction>>;
    /**
     * Lists all the workflow actions with their public accessible data. Some configuration might be omitted for security reasons such as passwords or PII.
     * @param {BuilderWorkflowActionsApiListPublicBuilderPageWorkflowActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicBuilderPageWorkflowActions(requestParameters: BuilderWorkflowActionsApiListPublicBuilderPageWorkflowActionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PublicBuilderWorkflowActionTypeBuilderWorkflowAction>>;
    /**
     * Apply a new order to the workflow actions of a page
     * @param {BuilderWorkflowActionsApiOrderBuilderWorkflowActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderBuilderWorkflowActions(requestParameters: BuilderWorkflowActionsApiOrderBuilderWorkflowActionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates an existing builder workflow action.
     * @param {BuilderWorkflowActionsApiUpdateBuilderPageWorkflowActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuilderPageWorkflowAction(requestParameters: BuilderWorkflowActionsApiUpdateBuilderPageWorkflowActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<BuilderWorkflowActionTypeBuilderWorkflowAction>;
};
/**
 * Request parameters for createBuilderPageWorkflowAction operation in BuilderWorkflowActionsApi.
 * @export
 * @interface BuilderWorkflowActionsApiCreateBuilderPageWorkflowActionRequest
 */
export interface BuilderWorkflowActionsApiCreateBuilderPageWorkflowActionRequest {
    /**
     * Creates a workflow action for the builder page related to the provided value.
     * @type {number}
     * @memberof BuilderWorkflowActionsApiCreateBuilderPageWorkflowAction
     */
    readonly pageId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderWorkflowActionsApiCreateBuilderPageWorkflowAction
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {BuilderWorkflowActionTypeCreateBuilderWorkflowAction}
     * @memberof BuilderWorkflowActionsApiCreateBuilderPageWorkflowAction
     */
    readonly builderWorkflowActionTypeCreateBuilderWorkflowAction?: BuilderWorkflowActionTypeCreateBuilderWorkflowAction;
}
/**
 * Request parameters for deleteBuilderPageWorkflowAction operation in BuilderWorkflowActionsApi.
 * @export
 * @interface BuilderWorkflowActionsApiDeleteBuilderPageWorkflowActionRequest
 */
export interface BuilderWorkflowActionsApiDeleteBuilderPageWorkflowActionRequest {
    /**
     * The id of the workflow action
     * @type {number}
     * @memberof BuilderWorkflowActionsApiDeleteBuilderPageWorkflowAction
     */
    readonly workflowActionId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderWorkflowActionsApiDeleteBuilderPageWorkflowAction
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for dispatchBuilderPageWorkflowAction operation in BuilderWorkflowActionsApi.
 * @export
 * @interface BuilderWorkflowActionsApiDispatchBuilderPageWorkflowActionRequest
 */
export interface BuilderWorkflowActionsApiDispatchBuilderPageWorkflowActionRequest {
    /**
     * The id of the workflow_action you want to call the dispatch for.
     * @type {number}
     * @memberof BuilderWorkflowActionsApiDispatchBuilderPageWorkflowAction
     */
    readonly workflowActionId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderWorkflowActionsApiDispatchBuilderPageWorkflowAction
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for listBuilderPageWorkflowActions operation in BuilderWorkflowActionsApi.
 * @export
 * @interface BuilderWorkflowActionsApiListBuilderPageWorkflowActionsRequest
 */
export interface BuilderWorkflowActionsApiListBuilderPageWorkflowActionsRequest {
    /**
     * Returns only the workflow actions of the page related to the provided Id.
     * @type {number}
     * @memberof BuilderWorkflowActionsApiListBuilderPageWorkflowActions
     */
    readonly pageId: number;
}
/**
 * Request parameters for listPublicBuilderPageWorkflowActions operation in BuilderWorkflowActionsApi.
 * @export
 * @interface BuilderWorkflowActionsApiListPublicBuilderPageWorkflowActionsRequest
 */
export interface BuilderWorkflowActionsApiListPublicBuilderPageWorkflowActionsRequest {
    /**
     * Returns only the public workflow actions of the page related to the provided Id.
     * @type {number}
     * @memberof BuilderWorkflowActionsApiListPublicBuilderPageWorkflowActions
     */
    readonly pageId: number;
}
/**
 * Request parameters for orderBuilderWorkflowActions operation in BuilderWorkflowActionsApi.
 * @export
 * @interface BuilderWorkflowActionsApiOrderBuilderWorkflowActionsRequest
 */
export interface BuilderWorkflowActionsApiOrderBuilderWorkflowActionsRequest {
    /**
     * The page the workflow actions belong to
     * @type {number}
     * @memberof BuilderWorkflowActionsApiOrderBuilderWorkflowActions
     */
    readonly pageId: number;
    /**
     *
     * @type {OrderWorkflowActions}
     * @memberof BuilderWorkflowActionsApiOrderBuilderWorkflowActions
     */
    readonly orderWorkflowActions: OrderWorkflowActions;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderWorkflowActionsApiOrderBuilderWorkflowActions
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for updateBuilderPageWorkflowAction operation in BuilderWorkflowActionsApi.
 * @export
 * @interface BuilderWorkflowActionsApiUpdateBuilderPageWorkflowActionRequest
 */
export interface BuilderWorkflowActionsApiUpdateBuilderPageWorkflowActionRequest {
    /**
     * The id of the workflow action
     * @type {number}
     * @memberof BuilderWorkflowActionsApiUpdateBuilderPageWorkflowAction
     */
    readonly workflowActionId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof BuilderWorkflowActionsApiUpdateBuilderPageWorkflowAction
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions}
     * @memberof BuilderWorkflowActionsApiUpdateBuilderPageWorkflowAction
     */
    readonly patchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions?: PatchedBuilderWorkflowActionTypeUpdateBuilderWorkflowActions;
}
/**
 * BuilderWorkflowActionsApi - object-oriented interface
 * @export
 * @class BuilderWorkflowActionsApi
 * @extends {BaseAPI}
 */
export declare class BuilderWorkflowActionsApi extends BaseAPI {
    /**
     * Creates a new builder workflow action
     * @param {BuilderWorkflowActionsApiCreateBuilderPageWorkflowActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderWorkflowActionsApi
     */
    createBuilderPageWorkflowAction(requestParameters: BuilderWorkflowActionsApiCreateBuilderPageWorkflowActionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BuilderWorkflowActionTypeBuilderWorkflowAction, any>>;
    /**
     * Deletes the workflow action related by the given id.
     * @param {BuilderWorkflowActionsApiDeleteBuilderPageWorkflowActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderWorkflowActionsApi
     */
    deleteBuilderPageWorkflowAction(requestParameters: BuilderWorkflowActionsApiDeleteBuilderPageWorkflowActionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Dispatches the service of the related workflow_action and returns the result.
     * @param {BuilderWorkflowActionsApiDispatchBuilderPageWorkflowActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderWorkflowActionsApi
     */
    dispatchBuilderPageWorkflowAction(requestParameters: BuilderWorkflowActionsApiDispatchBuilderPageWorkflowActionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Lists all the workflow actions of the page related to the provided parameter if the user has access to the related builder\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {BuilderWorkflowActionsApiListBuilderPageWorkflowActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderWorkflowActionsApi
     */
    listBuilderPageWorkflowActions(requestParameters: BuilderWorkflowActionsApiListBuilderPageWorkflowActionsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BuilderWorkflowActionTypeBuilderWorkflowAction[], any>>;
    /**
     * Lists all the workflow actions with their public accessible data. Some configuration might be omitted for security reasons such as passwords or PII.
     * @param {BuilderWorkflowActionsApiListPublicBuilderPageWorkflowActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderWorkflowActionsApi
     */
    listPublicBuilderPageWorkflowActions(requestParameters: BuilderWorkflowActionsApiListPublicBuilderPageWorkflowActionsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicBuilderWorkflowActionTypeBuilderWorkflowAction[], any>>;
    /**
     * Apply a new order to the workflow actions of a page
     * @param {BuilderWorkflowActionsApiOrderBuilderWorkflowActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderWorkflowActionsApi
     */
    orderBuilderWorkflowActions(requestParameters: BuilderWorkflowActionsApiOrderBuilderWorkflowActionsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates an existing builder workflow action.
     * @param {BuilderWorkflowActionsApiUpdateBuilderPageWorkflowActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuilderWorkflowActionsApi
     */
    updateBuilderPageWorkflowAction(requestParameters: BuilderWorkflowActionsApiUpdateBuilderPageWorkflowActionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BuilderWorkflowActionTypeBuilderWorkflowAction, any>>;
}
/**
 * DatabaseTableCalendarViewApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableCalendarViewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Responds with serialized rows grouped by date regarding view\'s date fieldif the user is authenticated and has access to the related workspace.  This is a **premium** feature.
     * @param {string} fromTimestamp Restricts results based on the calendar date field.
     * @param {string} toTimestamp Restricts results based on the calendar date field.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @param {number} [limit] Defines how many rows should be returned by default.
     * @param {number} [offset] Defines from which offset the rows should be returned.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {string} [userTimezone] User\&#39;s timezone will be taken into account for date fieldtypes that have a time and don\&#39;t enforce a timezone. The timezone will be used for aggregating the dates. For date fields without a time this will be ignored and UTC will be forced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableCalendarViewRows: (fromTimestamp: string, toTimestamp: string, viewId: number, include?: string, limit?: number, offset?: number, search?: string, searchMode?: string, userTimezone?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with serialized rows grouped by the view\'s date field options related to the `slug` if the calendar view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option.   This is a **premium** feature.
     * @param {string} fromTimestamp Restricts results based on the calendar date field.
     * @param {string} slug Returns only rows that belong to the related view.
     * @param {string} toTimestamp Restricts results based on the calendar date field.
     * @param {number} [limit] Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @param {number} [offset] Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @param {string} [userTimezone] User\&#39;s timezone will be taken into account for date fieldtypes that have a time and don\&#39;t enforce a timezone. The timezone will be used for aggregating the dates. For date fields without a time this will be ignored and UTC will be forced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableCalendarViewRows: (fromTimestamp: string, slug: string, toTimestamp: string, limit?: number, offset?: number, userTimezone?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableCalendarViewApi - functional programming interface
 * @export
 */
export declare const DatabaseTableCalendarViewApiFp: (configuration?: Configuration) => {
    /**
     * Responds with serialized rows grouped by date regarding view\'s date fieldif the user is authenticated and has access to the related workspace.  This is a **premium** feature.
     * @param {string} fromTimestamp Restricts results based on the calendar date field.
     * @param {string} toTimestamp Restricts results based on the calendar date field.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @param {number} [limit] Defines how many rows should be returned by default.
     * @param {number} [offset] Defines from which offset the rows should be returned.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {string} [userTimezone] User\&#39;s timezone will be taken into account for date fieldtypes that have a time and don\&#39;t enforce a timezone. The timezone will be used for aggregating the dates. For date fields without a time this will be ignored and UTC will be forced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableCalendarViewRows(fromTimestamp: string, toTimestamp: string, viewId: number, include?: string, limit?: number, offset?: number, search?: string, searchMode?: string, userTimezone?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarViewExampleResponse>>;
    /**
     * Responds with serialized rows grouped by the view\'s date field options related to the `slug` if the calendar view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option.   This is a **premium** feature.
     * @param {string} fromTimestamp Restricts results based on the calendar date field.
     * @param {string} slug Returns only rows that belong to the related view.
     * @param {string} toTimestamp Restricts results based on the calendar date field.
     * @param {number} [limit] Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @param {number} [offset] Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @param {string} [userTimezone] User\&#39;s timezone will be taken into account for date fieldtypes that have a time and don\&#39;t enforce a timezone. The timezone will be used for aggregating the dates. For date fields without a time this will be ignored and UTC will be forced.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableCalendarViewRows(fromTimestamp: string, slug: string, toTimestamp: string, limit?: number, offset?: number, userTimezone?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarViewExampleResponse>>;
};
/**
 * DatabaseTableCalendarViewApi - factory interface
 * @export
 */
export declare const DatabaseTableCalendarViewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Responds with serialized rows grouped by date regarding view\'s date fieldif the user is authenticated and has access to the related workspace.  This is a **premium** feature.
     * @param {DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableCalendarViewRows(requestParameters: DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CalendarViewExampleResponse>;
    /**
     * Responds with serialized rows grouped by the view\'s date field options related to the `slug` if the calendar view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option.   This is a **premium** feature.
     * @param {DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableCalendarViewRows(requestParameters: DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CalendarViewExampleResponse>;
};
/**
 * Request parameters for listDatabaseTableCalendarViewRows operation in DatabaseTableCalendarViewApi.
 * @export
 * @interface DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRowsRequest
 */
export interface DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRowsRequest {
    /**
     * Restricts results based on the calendar date field.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRows
     */
    readonly fromTimestamp: string;
    /**
     * Restricts results based on the calendar date field.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRows
     */
    readonly toTimestamp: string;
    /**
     * Returns only rows that belong to the related view\&#39;s table.
     * @type {number}
     * @memberof DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRows
     */
    readonly viewId: number;
    /**
     * A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRows
     */
    readonly include?: string;
    /**
     * Defines how many rows should be returned by default.
     * @type {number}
     * @memberof DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRows
     */
    readonly limit?: number;
    /**
     * Defines from which offset the rows should be returned.
     * @type {number}
     * @memberof DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRows
     */
    readonly offset?: number;
    /**
     * If provided only rows with data that matches the search query are going to be returned.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRows
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRows
     */
    readonly searchMode?: string;
    /**
     * User\&#39;s timezone will be taken into account for date fieldtypes that have a time and don\&#39;t enforce a timezone. The timezone will be used for aggregating the dates. For date fields without a time this will be ignored and UTC will be forced.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRows
     */
    readonly userTimezone?: string;
}
/**
 * Request parameters for publicListDatabaseTableCalendarViewRows operation in DatabaseTableCalendarViewApi.
 * @export
 * @interface DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRowsRequest
 */
export interface DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRowsRequest {
    /**
     * Restricts results based on the calendar date field.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRows
     */
    readonly fromTimestamp: string;
    /**
     * Returns only rows that belong to the related view.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRows
     */
    readonly slug: string;
    /**
     * Restricts results based on the calendar date field.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRows
     */
    readonly toTimestamp: string;
    /**
     * Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @type {number}
     * @memberof DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRows
     */
    readonly limit?: number;
    /**
     * Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @type {number}
     * @memberof DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRows
     */
    readonly offset?: number;
    /**
     * User\&#39;s timezone will be taken into account for date fieldtypes that have a time and don\&#39;t enforce a timezone. The timezone will be used for aggregating the dates. For date fields without a time this will be ignored and UTC will be forced.
     * @type {string}
     * @memberof DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRows
     */
    readonly userTimezone?: string;
}
/**
 * DatabaseTableCalendarViewApi - object-oriented interface
 * @export
 * @class DatabaseTableCalendarViewApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableCalendarViewApi extends BaseAPI {
    /**
     * Responds with serialized rows grouped by date regarding view\'s date fieldif the user is authenticated and has access to the related workspace.  This is a **premium** feature.
     * @param {DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableCalendarViewApi
     */
    listDatabaseTableCalendarViewRows(requestParameters: DatabaseTableCalendarViewApiListDatabaseTableCalendarViewRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CalendarViewExampleResponse, any>>;
    /**
     * Responds with serialized rows grouped by the view\'s date field options related to the `slug` if the calendar view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option.   This is a **premium** feature.
     * @param {DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableCalendarViewApi
     */
    publicListDatabaseTableCalendarViewRows(requestParameters: DatabaseTableCalendarViewApiPublicListDatabaseTableCalendarViewRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CalendarViewExampleResponse, any>>;
}
/**
 * DatabaseTableExportApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableExportApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates and starts a new export job for a table given some exporter options. Returns an error if the requesting user does not have permissionsto view the table.
     * @param {number} tableId The table id to create and start an export job for
     * @param {Export} [_export]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTable: (tableId: number, _export?: Export, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns information such as export progress and state or the url of the exported file for the specified export job, only if the requesting user has access.
     * @param {number} jobId The job id to lookup information about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExportJob: (jobId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableExportApi - functional programming interface
 * @export
 */
export declare const DatabaseTableExportApiFp: (configuration?: Configuration) => {
    /**
     * Creates and starts a new export job for a table given some exporter options. Returns an error if the requesting user does not have permissionsto view the table.
     * @param {number} tableId The table id to create and start an export job for
     * @param {Export} [_export]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTable(tableId: number, _export?: Export, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportJob>>;
    /**
     * Returns information such as export progress and state or the url of the exported file for the specified export job, only if the requesting user has access.
     * @param {number} jobId The job id to lookup information about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExportJob(jobId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportJob>>;
};
/**
 * DatabaseTableExportApi - factory interface
 * @export
 */
export declare const DatabaseTableExportApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates and starts a new export job for a table given some exporter options. Returns an error if the requesting user does not have permissionsto view the table.
     * @param {DatabaseTableExportApiExportTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTable(requestParameters: DatabaseTableExportApiExportTableRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExportJob>;
    /**
     * Returns information such as export progress and state or the url of the exported file for the specified export job, only if the requesting user has access.
     * @param {DatabaseTableExportApiGetExportJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExportJob(requestParameters: DatabaseTableExportApiGetExportJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExportJob>;
};
/**
 * Request parameters for exportTable operation in DatabaseTableExportApi.
 * @export
 * @interface DatabaseTableExportApiExportTableRequest
 */
export interface DatabaseTableExportApiExportTableRequest {
    /**
     * The table id to create and start an export job for
     * @type {number}
     * @memberof DatabaseTableExportApiExportTable
     */
    readonly tableId: number;
    /**
     *
     * @type {Export}
     * @memberof DatabaseTableExportApiExportTable
     */
    readonly _export?: Export;
}
/**
 * Request parameters for getExportJob operation in DatabaseTableExportApi.
 * @export
 * @interface DatabaseTableExportApiGetExportJobRequest
 */
export interface DatabaseTableExportApiGetExportJobRequest {
    /**
     * The job id to lookup information about.
     * @type {number}
     * @memberof DatabaseTableExportApiGetExportJob
     */
    readonly jobId: number;
}
/**
 * DatabaseTableExportApi - object-oriented interface
 * @export
 * @class DatabaseTableExportApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableExportApi extends BaseAPI {
    /**
     * Creates and starts a new export job for a table given some exporter options. Returns an error if the requesting user does not have permissionsto view the table.
     * @param {DatabaseTableExportApiExportTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableExportApi
     */
    exportTable(requestParameters: DatabaseTableExportApiExportTableRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportJob, any>>;
    /**
     * Returns information such as export progress and state or the url of the exported file for the specified export job, only if the requesting user has access.
     * @param {DatabaseTableExportApiGetExportJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableExportApi
     */
    getExportJob(requestParameters: DatabaseTableExportApiGetExportJobRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportJob, any>>;
}
/**
 * DatabaseTableFieldsApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableFieldsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Changes the primary field of a table to the one provided in the body payload.
     * @param {number} tableId The table where to update the primary field in.
     * @param {ChangePrimaryFieldParams} changePrimaryFieldParams
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePrimaryField: (tableId: number, changePrimaryFieldParams: ChangePrimaryFieldParams, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new field for the table related to the provided `table_id` parameter if the authorized user has access to the related database\'s workspace. Depending on the type, different properties can optionally be set.If creating the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {number} tableId Creates a new field for the provided table related to the value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {FieldCreateField} [fieldCreateField]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableField: (tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, fieldCreateField?: FieldCreateField, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing field if the authorized user has access to the related database\'s workspace. Note that all the related data to that field is also deleted. Primary fields cannot be deleted because their value represents the row. If deleting the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {number} fieldId Deletes the field related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableField: (fieldId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Duplicates the table with the provided `table_id` parameter if the authorized user has access to the database\'s workspace.
     * @param {number} fieldId The field to duplicate.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateTableField: (fieldId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint generates a Baserow formula for the table related to the provided id, based on the human readable input provided in the request body. This is a **premium** feature.
     * @param {number} tableId The table to generate the formula for.
     * @param {GenerateFormulaWithAIRequest} generateFormulaWithAIRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateFormulaWithAi: (tableId: number, generateFormulaWithAIRequest: GenerateFormulaWithAIRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Endpoint that\'s used by the AI field to start an sync task that will update the cell value of the provided row IDs based on the dynamically constructed prompt configured in the field settings.  This is a **premium** feature.
     * @param {number} fieldId The field to generate the value for.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateTableAiFieldValue: (fieldId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all the unique row values for an existing field, sorted in order of frequency.
     * @param {number} fieldId Returns the values related to the provided field.
     * @param {number} [limit] Defines how many values should be returned.
     * @param {boolean} [splitCommaSeparated] Indicates whether the original column values must be splitted by comma.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseFieldUniqueRowValues: (fieldId: number, limit?: number, splitCommaSeparated?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the existing field if the authorized user has access to the related database\'s workspace. Depending on the type different properties could be returned.
     * @param {number} fieldId Returns the field related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableField: (fieldId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the fields of the table related to the provided parameter if the user has access to the related database\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible. A table consists of fields and each field can have a different type. Each type can have different properties. A field is comparable with a regular table\'s column.
     * @param {number} tableId Returns only the fields of the table related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableFields: (tableId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Calculates and returns the type of the specified formula value. Does not change the state of the field in any way.
     * @param {number} tableId The table id of the formula field to type.
     * @param {TypeFormulaRequest} typeFormulaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    typeFormulaField: (tableId: number, typeFormulaRequest: TypeFormulaRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing field if the authorized user has access to the related database\'s workspace. The type can also be changed and depending on that type, different additional properties can optionally be set. If you change the field type it could happen that the data conversion fails, in that case the `ERROR_CANNOT_CHANGE_FIELD_TYPE` is returned, but this rarely happens. If a data value cannot be converted it is set to `null` so data might go lost.If updated the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {number} fieldId Updates the field related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedFieldUpdateField} [patchedFieldUpdateField]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableField: (fieldId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedFieldUpdateField?: PatchedFieldUpdateField, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableFieldsApi - functional programming interface
 * @export
 */
export declare const DatabaseTableFieldsApiFp: (configuration?: Configuration) => {
    /**
     * Changes the primary field of a table to the one provided in the body payload.
     * @param {number} tableId The table where to update the primary field in.
     * @param {ChangePrimaryFieldParams} changePrimaryFieldParams
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePrimaryField(tableId: number, changePrimaryFieldParams: ChangePrimaryFieldParams, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldField>>;
    /**
     * Creates a new field for the table related to the provided `table_id` parameter if the authorized user has access to the related database\'s workspace. Depending on the type, different properties can optionally be set.If creating the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {number} tableId Creates a new field for the provided table related to the value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {FieldCreateField} [fieldCreateField]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableField(tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, fieldCreateField?: FieldCreateField, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldFieldSerializerWithRelatedFields>>;
    /**
     * Deletes the existing field if the authorized user has access to the related database\'s workspace. Note that all the related data to that field is also deleted. Primary fields cannot be deleted because their value represents the row. If deleting the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {number} fieldId Deletes the field related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableField(fieldId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelatedFields>>;
    /**
     * Duplicates the table with the provided `table_id` parameter if the authorized user has access to the database\'s workspace.
     * @param {number} fieldId The field to duplicate.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateTableField(fieldId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleDuplicateFieldJobType>>;
    /**
     * This endpoint generates a Baserow formula for the table related to the provided id, based on the human readable input provided in the request body. This is a **premium** feature.
     * @param {number} tableId The table to generate the formula for.
     * @param {GenerateFormulaWithAIRequest} generateFormulaWithAIRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateFormulaWithAi(tableId: number, generateFormulaWithAIRequest: GenerateFormulaWithAIRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateFormulaWithAIResponse>>;
    /**
     * Endpoint that\'s used by the AI field to start an sync task that will update the cell value of the provided row IDs based on the dynamically constructed prompt configured in the field settings.  This is a **premium** feature.
     * @param {number} fieldId The field to generate the value for.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateTableAiFieldValue(fieldId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Returns a list of all the unique row values for an existing field, sorted in order of frequency.
     * @param {number} fieldId Returns the values related to the provided field.
     * @param {number} [limit] Defines how many values should be returned.
     * @param {boolean} [splitCommaSeparated] Indicates whether the original column values must be splitted by comma.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseFieldUniqueRowValues(fieldId: number, limit?: number, splitCommaSeparated?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UniqueRowValues>>;
    /**
     * Returns the existing field if the authorized user has access to the related database\'s workspace. Depending on the type different properties could be returned.
     * @param {number} fieldId Returns the field related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableField(fieldId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldField>>;
    /**
     * Lists all the fields of the table related to the provided parameter if the user has access to the related database\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible. A table consists of fields and each field can have a different type. Each type can have different properties. A field is comparable with a regular table\'s column.
     * @param {number} tableId Returns only the fields of the table related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableFields(tableId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FieldField>>>;
    /**
     * Calculates and returns the type of the specified formula value. Does not change the state of the field in any way.
     * @param {number} tableId The table id of the formula field to type.
     * @param {TypeFormulaRequest} typeFormulaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    typeFormulaField(tableId: number, typeFormulaRequest: TypeFormulaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TypeFormulaResult>>;
    /**
     * Updates the existing field if the authorized user has access to the related database\'s workspace. The type can also be changed and depending on that type, different additional properties can optionally be set. If you change the field type it could happen that the data conversion fails, in that case the `ERROR_CANNOT_CHANGE_FIELD_TYPE` is returned, but this rarely happens. If a data value cannot be converted it is set to `null` so data might go lost.If updated the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {number} fieldId Updates the field related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedFieldUpdateField} [patchedFieldUpdateField]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableField(fieldId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedFieldUpdateField?: PatchedFieldUpdateField, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldFieldSerializerWithRelatedFields>>;
};
/**
 * DatabaseTableFieldsApi - factory interface
 * @export
 */
export declare const DatabaseTableFieldsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Changes the primary field of a table to the one provided in the body payload.
     * @param {DatabaseTableFieldsApiChangePrimaryFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePrimaryField(requestParameters: DatabaseTableFieldsApiChangePrimaryFieldRequest, options?: RawAxiosRequestConfig): AxiosPromise<FieldField>;
    /**
     * Creates a new field for the table related to the provided `table_id` parameter if the authorized user has access to the related database\'s workspace. Depending on the type, different properties can optionally be set.If creating the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {DatabaseTableFieldsApiCreateDatabaseTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableField(requestParameters: DatabaseTableFieldsApiCreateDatabaseTableFieldRequest, options?: RawAxiosRequestConfig): AxiosPromise<FieldFieldSerializerWithRelatedFields>;
    /**
     * Deletes the existing field if the authorized user has access to the related database\'s workspace. Note that all the related data to that field is also deleted. Primary fields cannot be deleted because their value represents the row. If deleting the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {DatabaseTableFieldsApiDeleteDatabaseTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableField(requestParameters: DatabaseTableFieldsApiDeleteDatabaseTableFieldRequest, options?: RawAxiosRequestConfig): AxiosPromise<RelatedFields>;
    /**
     * Duplicates the table with the provided `table_id` parameter if the authorized user has access to the database\'s workspace.
     * @param {DatabaseTableFieldsApiDuplicateTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateTableField(requestParameters: DatabaseTableFieldsApiDuplicateTableFieldRequest, options?: RawAxiosRequestConfig): AxiosPromise<SingleDuplicateFieldJobType>;
    /**
     * This endpoint generates a Baserow formula for the table related to the provided id, based on the human readable input provided in the request body. This is a **premium** feature.
     * @param {DatabaseTableFieldsApiGenerateFormulaWithAiRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateFormulaWithAi(requestParameters: DatabaseTableFieldsApiGenerateFormulaWithAiRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateFormulaWithAIResponse>;
    /**
     * Endpoint that\'s used by the AI field to start an sync task that will update the cell value of the provided row IDs based on the dynamically constructed prompt configured in the field settings.  This is a **premium** feature.
     * @param {DatabaseTableFieldsApiGenerateTableAiFieldValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateTableAiFieldValue(requestParameters: DatabaseTableFieldsApiGenerateTableAiFieldValueRequest, options?: RawAxiosRequestConfig): AxiosPromise<string>;
    /**
     * Returns a list of all the unique row values for an existing field, sorted in order of frequency.
     * @param {DatabaseTableFieldsApiGetDatabaseFieldUniqueRowValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseFieldUniqueRowValues(requestParameters: DatabaseTableFieldsApiGetDatabaseFieldUniqueRowValuesRequest, options?: RawAxiosRequestConfig): AxiosPromise<UniqueRowValues>;
    /**
     * Returns the existing field if the authorized user has access to the related database\'s workspace. Depending on the type different properties could be returned.
     * @param {DatabaseTableFieldsApiGetDatabaseTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableField(requestParameters: DatabaseTableFieldsApiGetDatabaseTableFieldRequest, options?: RawAxiosRequestConfig): AxiosPromise<FieldField>;
    /**
     * Lists all the fields of the table related to the provided parameter if the user has access to the related database\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible. A table consists of fields and each field can have a different type. Each type can have different properties. A field is comparable with a regular table\'s column.
     * @param {DatabaseTableFieldsApiListDatabaseTableFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableFields(requestParameters: DatabaseTableFieldsApiListDatabaseTableFieldsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<FieldField>>;
    /**
     * Calculates and returns the type of the specified formula value. Does not change the state of the field in any way.
     * @param {DatabaseTableFieldsApiTypeFormulaFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    typeFormulaField(requestParameters: DatabaseTableFieldsApiTypeFormulaFieldRequest, options?: RawAxiosRequestConfig): AxiosPromise<TypeFormulaResult>;
    /**
     * Updates the existing field if the authorized user has access to the related database\'s workspace. The type can also be changed and depending on that type, different additional properties can optionally be set. If you change the field type it could happen that the data conversion fails, in that case the `ERROR_CANNOT_CHANGE_FIELD_TYPE` is returned, but this rarely happens. If a data value cannot be converted it is set to `null` so data might go lost.If updated the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {DatabaseTableFieldsApiUpdateDatabaseTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableField(requestParameters: DatabaseTableFieldsApiUpdateDatabaseTableFieldRequest, options?: RawAxiosRequestConfig): AxiosPromise<FieldFieldSerializerWithRelatedFields>;
};
/**
 * Request parameters for changePrimaryField operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiChangePrimaryFieldRequest
 */
export interface DatabaseTableFieldsApiChangePrimaryFieldRequest {
    /**
     * The table where to update the primary field in.
     * @type {number}
     * @memberof DatabaseTableFieldsApiChangePrimaryField
     */
    readonly tableId: number;
    /**
     *
     * @type {ChangePrimaryFieldParams}
     * @memberof DatabaseTableFieldsApiChangePrimaryField
     */
    readonly changePrimaryFieldParams: ChangePrimaryFieldParams;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableFieldsApiChangePrimaryField
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableFieldsApiChangePrimaryField
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for createDatabaseTableField operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiCreateDatabaseTableFieldRequest
 */
export interface DatabaseTableFieldsApiCreateDatabaseTableFieldRequest {
    /**
     * Creates a new field for the provided table related to the value.
     * @type {number}
     * @memberof DatabaseTableFieldsApiCreateDatabaseTableField
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableFieldsApiCreateDatabaseTableField
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableFieldsApiCreateDatabaseTableField
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {FieldCreateField}
     * @memberof DatabaseTableFieldsApiCreateDatabaseTableField
     */
    readonly fieldCreateField?: FieldCreateField;
}
/**
 * Request parameters for deleteDatabaseTableField operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiDeleteDatabaseTableFieldRequest
 */
export interface DatabaseTableFieldsApiDeleteDatabaseTableFieldRequest {
    /**
     * Deletes the field related to the provided value.
     * @type {number}
     * @memberof DatabaseTableFieldsApiDeleteDatabaseTableField
     */
    readonly fieldId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableFieldsApiDeleteDatabaseTableField
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableFieldsApiDeleteDatabaseTableField
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for duplicateTableField operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiDuplicateTableFieldRequest
 */
export interface DatabaseTableFieldsApiDuplicateTableFieldRequest {
    /**
     * The field to duplicate.
     * @type {number}
     * @memberof DatabaseTableFieldsApiDuplicateTableField
     */
    readonly fieldId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableFieldsApiDuplicateTableField
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableFieldsApiDuplicateTableField
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for generateFormulaWithAi operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiGenerateFormulaWithAiRequest
 */
export interface DatabaseTableFieldsApiGenerateFormulaWithAiRequest {
    /**
     * The table to generate the formula for.
     * @type {number}
     * @memberof DatabaseTableFieldsApiGenerateFormulaWithAi
     */
    readonly tableId: number;
    /**
     *
     * @type {GenerateFormulaWithAIRequest}
     * @memberof DatabaseTableFieldsApiGenerateFormulaWithAi
     */
    readonly generateFormulaWithAIRequest: GenerateFormulaWithAIRequest;
}
/**
 * Request parameters for generateTableAiFieldValue operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiGenerateTableAiFieldValueRequest
 */
export interface DatabaseTableFieldsApiGenerateTableAiFieldValueRequest {
    /**
     * The field to generate the value for.
     * @type {number}
     * @memberof DatabaseTableFieldsApiGenerateTableAiFieldValue
     */
    readonly fieldId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableFieldsApiGenerateTableAiFieldValue
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableFieldsApiGenerateTableAiFieldValue
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for getDatabaseFieldUniqueRowValues operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiGetDatabaseFieldUniqueRowValuesRequest
 */
export interface DatabaseTableFieldsApiGetDatabaseFieldUniqueRowValuesRequest {
    /**
     * Returns the values related to the provided field.
     * @type {number}
     * @memberof DatabaseTableFieldsApiGetDatabaseFieldUniqueRowValues
     */
    readonly fieldId: number;
    /**
     * Defines how many values should be returned.
     * @type {number}
     * @memberof DatabaseTableFieldsApiGetDatabaseFieldUniqueRowValues
     */
    readonly limit?: number;
    /**
     * Indicates whether the original column values must be splitted by comma.
     * @type {boolean}
     * @memberof DatabaseTableFieldsApiGetDatabaseFieldUniqueRowValues
     */
    readonly splitCommaSeparated?: boolean;
}
/**
 * Request parameters for getDatabaseTableField operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiGetDatabaseTableFieldRequest
 */
export interface DatabaseTableFieldsApiGetDatabaseTableFieldRequest {
    /**
     * Returns the field related to the provided value.
     * @type {number}
     * @memberof DatabaseTableFieldsApiGetDatabaseTableField
     */
    readonly fieldId: number;
}
/**
 * Request parameters for listDatabaseTableFields operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiListDatabaseTableFieldsRequest
 */
export interface DatabaseTableFieldsApiListDatabaseTableFieldsRequest {
    /**
     * Returns only the fields of the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTableFieldsApiListDatabaseTableFields
     */
    readonly tableId: number;
}
/**
 * Request parameters for typeFormulaField operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiTypeFormulaFieldRequest
 */
export interface DatabaseTableFieldsApiTypeFormulaFieldRequest {
    /**
     * The table id of the formula field to type.
     * @type {number}
     * @memberof DatabaseTableFieldsApiTypeFormulaField
     */
    readonly tableId: number;
    /**
     *
     * @type {TypeFormulaRequest}
     * @memberof DatabaseTableFieldsApiTypeFormulaField
     */
    readonly typeFormulaRequest: TypeFormulaRequest;
}
/**
 * Request parameters for updateDatabaseTableField operation in DatabaseTableFieldsApi.
 * @export
 * @interface DatabaseTableFieldsApiUpdateDatabaseTableFieldRequest
 */
export interface DatabaseTableFieldsApiUpdateDatabaseTableFieldRequest {
    /**
     * Updates the field related to the provided value.
     * @type {number}
     * @memberof DatabaseTableFieldsApiUpdateDatabaseTableField
     */
    readonly fieldId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableFieldsApiUpdateDatabaseTableField
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableFieldsApiUpdateDatabaseTableField
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedFieldUpdateField}
     * @memberof DatabaseTableFieldsApiUpdateDatabaseTableField
     */
    readonly patchedFieldUpdateField?: PatchedFieldUpdateField;
}
/**
 * DatabaseTableFieldsApi - object-oriented interface
 * @export
 * @class DatabaseTableFieldsApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableFieldsApi extends BaseAPI {
    /**
     * Changes the primary field of a table to the one provided in the body payload.
     * @param {DatabaseTableFieldsApiChangePrimaryFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    changePrimaryField(requestParameters: DatabaseTableFieldsApiChangePrimaryFieldRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FieldField, any>>;
    /**
     * Creates a new field for the table related to the provided `table_id` parameter if the authorized user has access to the related database\'s workspace. Depending on the type, different properties can optionally be set.If creating the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {DatabaseTableFieldsApiCreateDatabaseTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    createDatabaseTableField(requestParameters: DatabaseTableFieldsApiCreateDatabaseTableFieldRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FieldFieldSerializerWithRelatedFields, any>>;
    /**
     * Deletes the existing field if the authorized user has access to the related database\'s workspace. Note that all the related data to that field is also deleted. Primary fields cannot be deleted because their value represents the row. If deleting the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {DatabaseTableFieldsApiDeleteDatabaseTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    deleteDatabaseTableField(requestParameters: DatabaseTableFieldsApiDeleteDatabaseTableFieldRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RelatedFields, any>>;
    /**
     * Duplicates the table with the provided `table_id` parameter if the authorized user has access to the database\'s workspace.
     * @param {DatabaseTableFieldsApiDuplicateTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    duplicateTableField(requestParameters: DatabaseTableFieldsApiDuplicateTableFieldRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleDuplicateFieldJobType, any>>;
    /**
     * This endpoint generates a Baserow formula for the table related to the provided id, based on the human readable input provided in the request body. This is a **premium** feature.
     * @param {DatabaseTableFieldsApiGenerateFormulaWithAiRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    generateFormulaWithAi(requestParameters: DatabaseTableFieldsApiGenerateFormulaWithAiRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GenerateFormulaWithAIResponse, any>>;
    /**
     * Endpoint that\'s used by the AI field to start an sync task that will update the cell value of the provided row IDs based on the dynamically constructed prompt configured in the field settings.  This is a **premium** feature.
     * @param {DatabaseTableFieldsApiGenerateTableAiFieldValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    generateTableAiFieldValue(requestParameters: DatabaseTableFieldsApiGenerateTableAiFieldValueRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Returns a list of all the unique row values for an existing field, sorted in order of frequency.
     * @param {DatabaseTableFieldsApiGetDatabaseFieldUniqueRowValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    getDatabaseFieldUniqueRowValues(requestParameters: DatabaseTableFieldsApiGetDatabaseFieldUniqueRowValuesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UniqueRowValues, any>>;
    /**
     * Returns the existing field if the authorized user has access to the related database\'s workspace. Depending on the type different properties could be returned.
     * @param {DatabaseTableFieldsApiGetDatabaseTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    getDatabaseTableField(requestParameters: DatabaseTableFieldsApiGetDatabaseTableFieldRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FieldField, any>>;
    /**
     * Lists all the fields of the table related to the provided parameter if the user has access to the related database\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible. A table consists of fields and each field can have a different type. Each type can have different properties. A field is comparable with a regular table\'s column.
     * @param {DatabaseTableFieldsApiListDatabaseTableFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    listDatabaseTableFields(requestParameters: DatabaseTableFieldsApiListDatabaseTableFieldsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FieldField[], any>>;
    /**
     * Calculates and returns the type of the specified formula value. Does not change the state of the field in any way.
     * @param {DatabaseTableFieldsApiTypeFormulaFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    typeFormulaField(requestParameters: DatabaseTableFieldsApiTypeFormulaFieldRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TypeFormulaResult, any>>;
    /**
     * Updates the existing field if the authorized user has access to the related database\'s workspace. The type can also be changed and depending on that type, different additional properties can optionally be set. If you change the field type it could happen that the data conversion fails, in that case the `ERROR_CANNOT_CHANGE_FIELD_TYPE` is returned, but this rarely happens. If a data value cannot be converted it is set to `null` so data might go lost.If updated the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.
     * @param {DatabaseTableFieldsApiUpdateDatabaseTableFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFieldsApi
     */
    updateDatabaseTableField(requestParameters: DatabaseTableFieldsApiUpdateDatabaseTableFieldRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FieldFieldSerializerWithRelatedFields, any>>;
}
/**
 * DatabaseTableFormViewApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableFormViewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns the metadata related to the form view if the form is publicly shared or if the user has access to the related workspace. This data can be used to construct a form with the right fields.
     * @param {string} slug The slug related to the form form.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetaDatabaseTableFormView: (slug: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Submits the form if the form is publicly shared or if the user has access to the related workspace. The provided data will be validated based on the fields that are in the form and the rules per field. If valid, a new row will be created in the table.
     * @param {string} slug The slug related to the form.
     * @param {ExampleRowRequest} [exampleRowRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitDatabaseTableFormView: (slug: string, exampleRowRequest?: ExampleRowRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Uploads a file anonymously to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.
     * @param {string} slug Submits files only if the view with the provided slughas a public file field.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileFormView: (slug: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableFormViewApi - functional programming interface
 * @export
 */
export declare const DatabaseTableFormViewApiFp: (configuration?: Configuration) => {
    /**
     * Returns the metadata related to the form view if the form is publicly shared or if the user has access to the related workspace. This data can be used to construct a form with the right fields.
     * @param {string} slug The slug related to the form form.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetaDatabaseTableFormView(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicFormView>>;
    /**
     * Submits the form if the form is publicly shared or if the user has access to the related workspace. The provided data will be validated based on the fields that are in the form and the rules per field. If valid, a new row will be created in the table.
     * @param {string} slug The slug related to the form.
     * @param {ExampleRowRequest} [exampleRowRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitDatabaseTableFormView(slug: string, exampleRowRequest?: ExampleRowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormViewSubmitted>>;
    /**
     * Uploads a file anonymously to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.
     * @param {string} slug Submits files only if the view with the provided slughas a public file field.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileFormView(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFile>>;
};
/**
 * DatabaseTableFormViewApi - factory interface
 * @export
 */
export declare const DatabaseTableFormViewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns the metadata related to the form view if the form is publicly shared or if the user has access to the related workspace. This data can be used to construct a form with the right fields.
     * @param {DatabaseTableFormViewApiGetMetaDatabaseTableFormViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetaDatabaseTableFormView(requestParameters: DatabaseTableFormViewApiGetMetaDatabaseTableFormViewRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicFormView>;
    /**
     * Submits the form if the form is publicly shared or if the user has access to the related workspace. The provided data will be validated based on the fields that are in the form and the rules per field. If valid, a new row will be created in the table.
     * @param {DatabaseTableFormViewApiSubmitDatabaseTableFormViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitDatabaseTableFormView(requestParameters: DatabaseTableFormViewApiSubmitDatabaseTableFormViewRequest, options?: RawAxiosRequestConfig): AxiosPromise<FormViewSubmitted>;
    /**
     * Uploads a file anonymously to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.
     * @param {DatabaseTableFormViewApiUploadFileFormViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileFormView(requestParameters: DatabaseTableFormViewApiUploadFileFormViewRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserFile>;
};
/**
 * Request parameters for getMetaDatabaseTableFormView operation in DatabaseTableFormViewApi.
 * @export
 * @interface DatabaseTableFormViewApiGetMetaDatabaseTableFormViewRequest
 */
export interface DatabaseTableFormViewApiGetMetaDatabaseTableFormViewRequest {
    /**
     * The slug related to the form form.
     * @type {string}
     * @memberof DatabaseTableFormViewApiGetMetaDatabaseTableFormView
     */
    readonly slug: string;
}
/**
 * Request parameters for submitDatabaseTableFormView operation in DatabaseTableFormViewApi.
 * @export
 * @interface DatabaseTableFormViewApiSubmitDatabaseTableFormViewRequest
 */
export interface DatabaseTableFormViewApiSubmitDatabaseTableFormViewRequest {
    /**
     * The slug related to the form.
     * @type {string}
     * @memberof DatabaseTableFormViewApiSubmitDatabaseTableFormView
     */
    readonly slug: string;
    /**
     *
     * @type {ExampleRowRequest}
     * @memberof DatabaseTableFormViewApiSubmitDatabaseTableFormView
     */
    readonly exampleRowRequest?: ExampleRowRequest;
}
/**
 * Request parameters for uploadFileFormView operation in DatabaseTableFormViewApi.
 * @export
 * @interface DatabaseTableFormViewApiUploadFileFormViewRequest
 */
export interface DatabaseTableFormViewApiUploadFileFormViewRequest {
    /**
     * Submits files only if the view with the provided slughas a public file field.
     * @type {string}
     * @memberof DatabaseTableFormViewApiUploadFileFormView
     */
    readonly slug: string;
}
/**
 * DatabaseTableFormViewApi - object-oriented interface
 * @export
 * @class DatabaseTableFormViewApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableFormViewApi extends BaseAPI {
    /**
     * Returns the metadata related to the form view if the form is publicly shared or if the user has access to the related workspace. This data can be used to construct a form with the right fields.
     * @param {DatabaseTableFormViewApiGetMetaDatabaseTableFormViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFormViewApi
     */
    getMetaDatabaseTableFormView(requestParameters: DatabaseTableFormViewApiGetMetaDatabaseTableFormViewRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicFormView, any>>;
    /**
     * Submits the form if the form is publicly shared or if the user has access to the related workspace. The provided data will be validated based on the fields that are in the form and the rules per field. If valid, a new row will be created in the table.
     * @param {DatabaseTableFormViewApiSubmitDatabaseTableFormViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFormViewApi
     */
    submitDatabaseTableFormView(requestParameters: DatabaseTableFormViewApiSubmitDatabaseTableFormViewRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FormViewSubmitted, any>>;
    /**
     * Uploads a file anonymously to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.
     * @param {DatabaseTableFormViewApiUploadFileFormViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableFormViewApi
     */
    uploadFileFormView(requestParameters: DatabaseTableFormViewApiUploadFileFormViewRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserFile, any>>;
}
/**
 * DatabaseTableGalleryViewApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableGalleryViewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Lists the requested rows of the view\'s table related to the provided `view_id` if the authorized user has access to the database\'s workspace. The response is paginated by a limit/offset style.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {boolean} [count] If provided only the count will be returned.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableGalleryViewRows: (viewId: number, count?: boolean, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, limit?: number, offset?: number, orderBy?: string, search?: string, searchMode?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `slug` if the gallery view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {string} slug Returns only rows that belong to the related view.
     * @param {boolean} [count] If provided only the count will be returned.
     * @param {string} [excludeFields] All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter &#x60;exclude_fields&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here.
     * @param {string} [includeFields] All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter &#x60;include_fields&#x3D;field_1,field_2&#x60; then only the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @param {number} [page] Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {number} [size] Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableGalleryViewRows: (slug: string, count?: boolean, excludeFields?: string, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, includeFields?: string, limit?: number, offset?: number, orderBy?: string, page?: number, search?: string, searchMode?: string, size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableGalleryViewApi - functional programming interface
 * @export
 */
export declare const DatabaseTableGalleryViewApiFp: (configuration?: Configuration) => {
    /**
     * Lists the requested rows of the view\'s table related to the provided `view_id` if the authorized user has access to the database\'s workspace. The response is paginated by a limit/offset style.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {boolean} [count] If provided only the count will be returned.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableGalleryViewRows(viewId: number, count?: boolean, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, limit?: number, offset?: number, orderBy?: string, search?: string, searchMode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse>>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `slug` if the gallery view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {string} slug Returns only rows that belong to the related view.
     * @param {boolean} [count] If provided only the count will be returned.
     * @param {string} [excludeFields] All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter &#x60;exclude_fields&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here.
     * @param {string} [includeFields] All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter &#x60;include_fields&#x3D;field_1,field_2&#x60; then only the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @param {number} [page] Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {number} [size] Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableGalleryViewRows(slug: string, count?: boolean, excludeFields?: string, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, includeFields?: string, limit?: number, offset?: number, orderBy?: string, page?: number, search?: string, searchMode?: string, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse>>;
};
/**
 * DatabaseTableGalleryViewApi - factory interface
 * @export
 */
export declare const DatabaseTableGalleryViewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Lists the requested rows of the view\'s table related to the provided `view_id` if the authorized user has access to the database\'s workspace. The response is paginated by a limit/offset style.
     * @param {DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableGalleryViewRows(requestParameters: DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `slug` if the gallery view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableGalleryViewRows(requestParameters: DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse>;
};
/**
 * Request parameters for listDatabaseTableGalleryViewRows operation in DatabaseTableGalleryViewApi.
 * @export
 * @interface DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRowsRequest
 */
export interface DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRowsRequest {
    /**
     * Returns only rows that belong to the related view\&#39;s table.
     * @type {number}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly viewId: number;
    /**
     * If provided only the count will be returned.
     * @type {boolean}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly count?: boolean;
    /**
     * The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly filterFieldFilter?: string;
    /**
     * &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly filterType?: string;
    /**
     * A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly filters?: string;
    /**
     * A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly include?: string;
    /**
     * Defines how many rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly limit?: number;
    /**
     * Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly offset?: number;
    /**
     * Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly orderBy?: string;
    /**
     * If provided only rows with data that matches the search query are going to be returned.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRows
     */
    readonly searchMode?: string;
}
/**
 * Request parameters for publicListDatabaseTableGalleryViewRows operation in DatabaseTableGalleryViewApi.
 * @export
 * @interface DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRowsRequest
 */
export interface DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRowsRequest {
    /**
     * Returns only rows that belong to the related view.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly slug: string;
    /**
     * If provided only the count will be returned.
     * @type {boolean}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly count?: boolean;
    /**
     * All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter &#x60;exclude_fields&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly excludeFields?: string;
    /**
     * The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly filterFieldFilter?: string;
    /**
     * &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly filterType?: string;
    /**
     * A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly filters?: string;
    /**
     * A comma separated list allowing the values of &#x60;field_options&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly include?: string;
    /**
     * All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter &#x60;include_fields&#x3D;field_1,field_2&#x60; then only the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly includeFields?: string;
    /**
     * Defines how many rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly limit?: number;
    /**
     * Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly offset?: number;
    /**
     * Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly orderBy?: string;
    /**
     * Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @type {number}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly page?: number;
    /**
     * If provided only rows with data that matches the search query are going to be returned.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly searchMode?: string;
    /**
     * Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRows
     */
    readonly size?: number;
}
/**
 * DatabaseTableGalleryViewApi - object-oriented interface
 * @export
 * @class DatabaseTableGalleryViewApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableGalleryViewApi extends BaseAPI {
    /**
     * Lists the requested rows of the view\'s table related to the provided `view_id` if the authorized user has access to the database\'s workspace. The response is paginated by a limit/offset style.
     * @param {DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableGalleryViewApi
     */
    listDatabaseTableGalleryViewRows(requestParameters: DatabaseTableGalleryViewApiListDatabaseTableGalleryViewRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse, any>>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `slug` if the gallery view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableGalleryViewApi
     */
    publicListDatabaseTableGalleryViewRows(requestParameters: DatabaseTableGalleryViewApiPublicListDatabaseTableGalleryViewRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse, any>>;
}
/**
 * DatabaseTableGridViewApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableGridViewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Lists only the rows and fields that match the request. Only the rows with the ids that are in the `row_ids` list are going to be returned. Same goes for the fields, only the fields with the ids in the `field_ids` are going to be returned. This endpoint could be used to refresh data after changes something. For example in the web frontend after changing a field type, the data of the related cells will be refreshed using this endpoint. In the example all field types are listed, but normally  the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {GridViewFilter} gridViewFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filterDatabaseTableGridViewRows: (viewId: number, gridViewFilter: GridViewFilter, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Computes the aggregation of all the values for a specified field from the selected grid view. You must select the aggregation type by setting the `type` GET parameter. If filters are configured for the selected view, the aggregation is calculated only on filtered rows. You need to have read permissions on the view to request an aggregation.
     * @param {number} fieldId The field id you want to aggregate
     * @param {number} viewId Select the view you want the aggregation for.
     * @param {string} [include] if &#x60;include&#x60; is set to &#x60;total&#x60;, the total row count will be returned with the result.
     * @param {string} [type] The aggregation type you want. Available aggregation types: empty_count, not_empty_count, unique_count, min, max, sum, average, median, decile, variance, std_dev
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableGridViewFieldAggregation: (fieldId: number, viewId: number, include?: string, type?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.You need to have read permissions on the view to request aggregations.
     * @param {number} viewId Select the view you want the aggregations for.
     * @param {string} [filterFieldFilter] The aggregation can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the aggregated rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the aggregated rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply for the aggregation. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] if &#x60;include&#x60; is set to &#x60;total&#x60;, the total row count will be returned with the result.
     * @param {string} [search] If provided the aggregations are calculated only for matching rows.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableGridViewFieldAggregations: (viewId: number, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, search?: string, searchMode?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.
     * @param {string} slug Select the view you want the aggregations for.
     * @param {string} [filterFieldFilter] The aggregation can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the aggregated rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the aggregated rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply for the aggregation. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] if &#x60;include&#x60; is set to &#x60;total&#x60;, the total row count will be returned with the result.
     * @param {string} [search] If provided the aggregations are calculated only for matching rows.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTablePublicGridViewFieldAggregations: (slug: string, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, search?: string, searchMode?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `view_id` if the authorized user has access to the database\'s workspace. The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.  The filters and sortings are automatically applied. To get a full overview of the applied filters and sortings you can use the `list_database_table_view_filters` and `list_database_table_view_sortings` endpoints.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {boolean} [count] If provided only the count will be returned.
     * @param {string} [excludeFields] All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter &#x60;exclude_fields&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @param {string} [includeFields] All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter &#x60;include_fields&#x3D;field_1,field_2&#x60; then only the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @param {number} [page] Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {number} [size] Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableGridViewRows: (viewId: number, count?: boolean, excludeFields?: string, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, includeFields?: string, limit?: number, offset?: number, orderBy?: string, page?: number, search?: string, searchMode?: string, size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `slug` if the grid view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {string} slug Returns only rows that belong to the related view.
     * @param {boolean} [count] If provided only the count will be returned.
     * @param {string} [excludeFields] All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter &#x60;exclude_fields&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [groupBy] Optionally the rows can be grouped by provided field ids separated by comma. By default no groups are applied. This doesn\&#39;t actually responds with the rows groups, this is just what\&#39;s needed for the Baserow group by feature.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here.
     * @param {string} [includeFields] All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter &#x60;include_fields&#x3D;field_1,field_2&#x60; then only the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @param {number} [page] Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {number} [size] Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableGridViewRows: (slug: string, count?: boolean, excludeFields?: string, filterFieldFilter?: string, filterType?: string, filters?: string, groupBy?: string, include?: string, includeFields?: string, limit?: number, offset?: number, orderBy?: string, page?: number, search?: string, searchMode?: string, size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableGridViewApi - functional programming interface
 * @export
 */
export declare const DatabaseTableGridViewApiFp: (configuration?: Configuration) => {
    /**
     * Lists only the rows and fields that match the request. Only the rows with the ids that are in the `row_ids` list are going to be returned. Same goes for the fields, only the fields with the ids in the `field_ids` are going to be returned. This endpoint could be used to refresh data after changes something. For example in the web frontend after changing a field type, the data of the related cells will be refreshed using this endpoint. In the example all field types are listed, but normally  the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {GridViewFilter} gridViewFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filterDatabaseTableGridViewRows(viewId: number, gridViewFilter: GridViewFilter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExampleRowResponse>>>;
    /**
     * Computes the aggregation of all the values for a specified field from the selected grid view. You must select the aggregation type by setting the `type` GET parameter. If filters are configured for the selected view, the aggregation is calculated only on filtered rows. You need to have read permissions on the view to request an aggregation.
     * @param {number} fieldId The field id you want to aggregate
     * @param {number} viewId Select the view you want the aggregation for.
     * @param {string} [include] if &#x60;include&#x60; is set to &#x60;total&#x60;, the total row count will be returned with the result.
     * @param {string} [type] The aggregation type you want. Available aggregation types: empty_count, not_empty_count, unique_count, min, max, sum, average, median, decile, variance, std_dev
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableGridViewFieldAggregation(fieldId: number, viewId: number, include?: string, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDatabaseTableGridViewFieldAggregation200Response>>;
    /**
     * Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.You need to have read permissions on the view to request aggregations.
     * @param {number} viewId Select the view you want the aggregations for.
     * @param {string} [filterFieldFilter] The aggregation can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the aggregated rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the aggregated rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply for the aggregation. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] if &#x60;include&#x60; is set to &#x60;total&#x60;, the total row count will be returned with the result.
     * @param {string} [search] If provided the aggregations are calculated only for matching rows.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableGridViewFieldAggregations(viewId: number, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, search?: string, searchMode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDatabaseTablePublicGridViewFieldAggregations200Response>>;
    /**
     * Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.
     * @param {string} slug Select the view you want the aggregations for.
     * @param {string} [filterFieldFilter] The aggregation can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the aggregated rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the aggregated rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply for the aggregation. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] if &#x60;include&#x60; is set to &#x60;total&#x60;, the total row count will be returned with the result.
     * @param {string} [search] If provided the aggregations are calculated only for matching rows.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTablePublicGridViewFieldAggregations(slug: string, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, search?: string, searchMode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDatabaseTablePublicGridViewFieldAggregations200Response>>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `view_id` if the authorized user has access to the database\'s workspace. The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.  The filters and sortings are automatically applied. To get a full overview of the applied filters and sortings you can use the `list_database_table_view_filters` and `list_database_table_view_sortings` endpoints.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {boolean} [count] If provided only the count will be returned.
     * @param {string} [excludeFields] All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter &#x60;exclude_fields&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @param {string} [includeFields] All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter &#x60;include_fields&#x3D;field_1,field_2&#x60; then only the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @param {number} [page] Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {number} [size] Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableGridViewRows(viewId: number, count?: boolean, excludeFields?: string, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, includeFields?: string, limit?: number, offset?: number, orderBy?: string, page?: number, search?: string, searchMode?: string, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerWithGridViewFieldOptionsExampleRowResponse>>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `slug` if the grid view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {string} slug Returns only rows that belong to the related view.
     * @param {boolean} [count] If provided only the count will be returned.
     * @param {string} [excludeFields] All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter &#x60;exclude_fields&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [groupBy] Optionally the rows can be grouped by provided field ids separated by comma. By default no groups are applied. This doesn\&#39;t actually responds with the rows groups, this is just what\&#39;s needed for the Baserow group by feature.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here.
     * @param {string} [includeFields] All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter &#x60;include_fields&#x3D;field_1,field_2&#x60; then only the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @param {number} [page] Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {number} [size] Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableGridViewRows(slug: string, count?: boolean, excludeFields?: string, filterFieldFilter?: string, filterType?: string, filters?: string, groupBy?: string, include?: string, includeFields?: string, limit?: number, offset?: number, orderBy?: string, page?: number, search?: string, searchMode?: string, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse>>;
};
/**
 * DatabaseTableGridViewApi - factory interface
 * @export
 */
export declare const DatabaseTableGridViewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Lists only the rows and fields that match the request. Only the rows with the ids that are in the `row_ids` list are going to be returned. Same goes for the fields, only the fields with the ids in the `field_ids` are going to be returned. This endpoint could be used to refresh data after changes something. For example in the web frontend after changing a field type, the data of the related cells will be refreshed using this endpoint. In the example all field types are listed, but normally  the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableGridViewApiFilterDatabaseTableGridViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filterDatabaseTableGridViewRows(requestParameters: DatabaseTableGridViewApiFilterDatabaseTableGridViewRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ExampleRowResponse>>;
    /**
     * Computes the aggregation of all the values for a specified field from the selected grid view. You must select the aggregation type by setting the `type` GET parameter. If filters are configured for the selected view, the aggregation is calculated only on filtered rows. You need to have read permissions on the view to request an aggregation.
     * @param {DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableGridViewFieldAggregation(requestParameters: DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetDatabaseTableGridViewFieldAggregation200Response>;
    /**
     * Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.You need to have read permissions on the view to request aggregations.
     * @param {DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableGridViewFieldAggregations(requestParameters: DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetDatabaseTablePublicGridViewFieldAggregations200Response>;
    /**
     * Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.
     * @param {DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTablePublicGridViewFieldAggregations(requestParameters: DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetDatabaseTablePublicGridViewFieldAggregations200Response>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `view_id` if the authorized user has access to the database\'s workspace. The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.  The filters and sortings are automatically applied. To get a full overview of the applied filters and sortings you can use the `list_database_table_view_filters` and `list_database_table_view_sortings` endpoints.
     * @param {DatabaseTableGridViewApiListDatabaseTableGridViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableGridViewRows(requestParameters: DatabaseTableGridViewApiListDatabaseTableGridViewRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerWithGridViewFieldOptionsExampleRowResponse>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `slug` if the grid view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableGridViewApiPublicListDatabaseTableGridViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableGridViewRows(requestParameters: DatabaseTableGridViewApiPublicListDatabaseTableGridViewRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse>;
};
/**
 * Request parameters for filterDatabaseTableGridViewRows operation in DatabaseTableGridViewApi.
 * @export
 * @interface DatabaseTableGridViewApiFilterDatabaseTableGridViewRowsRequest
 */
export interface DatabaseTableGridViewApiFilterDatabaseTableGridViewRowsRequest {
    /**
     * Returns only rows that belong to the related view\&#39;s table.
     * @type {number}
     * @memberof DatabaseTableGridViewApiFilterDatabaseTableGridViewRows
     */
    readonly viewId: number;
    /**
     *
     * @type {GridViewFilter}
     * @memberof DatabaseTableGridViewApiFilterDatabaseTableGridViewRows
     */
    readonly gridViewFilter: GridViewFilter;
}
/**
 * Request parameters for getDatabaseTableGridViewFieldAggregation operation in DatabaseTableGridViewApi.
 * @export
 * @interface DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationRequest
 */
export interface DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationRequest {
    /**
     * The field id you want to aggregate
     * @type {number}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregation
     */
    readonly fieldId: number;
    /**
     * Select the view you want the aggregation for.
     * @type {number}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregation
     */
    readonly viewId: number;
    /**
     * if &#x60;include&#x60; is set to &#x60;total&#x60;, the total row count will be returned with the result.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregation
     */
    readonly include?: string;
    /**
     * The aggregation type you want. Available aggregation types: empty_count, not_empty_count, unique_count, min, max, sum, average, median, decile, variance, std_dev
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregation
     */
    readonly type?: string;
}
/**
 * Request parameters for getDatabaseTableGridViewFieldAggregations operation in DatabaseTableGridViewApi.
 * @export
 * @interface DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationsRequest
 */
export interface DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationsRequest {
    /**
     * Select the view you want the aggregations for.
     * @type {number}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregations
     */
    readonly viewId: number;
    /**
     * The aggregation can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregations
     */
    readonly filterFieldFilter?: string;
    /**
     * &#x60;AND&#x60;: Indicates that the aggregated rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the aggregated rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregations
     */
    readonly filterType?: string;
    /**
     * A JSON serialized string containing the filter tree to apply for the aggregation. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregations
     */
    readonly filters?: string;
    /**
     * if &#x60;include&#x60; is set to &#x60;total&#x60;, the total row count will be returned with the result.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregations
     */
    readonly include?: string;
    /**
     * If provided the aggregations are calculated only for matching rows.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregations
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregations
     */
    readonly searchMode?: string;
}
/**
 * Request parameters for getDatabaseTablePublicGridViewFieldAggregations operation in DatabaseTableGridViewApi.
 * @export
 * @interface DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregationsRequest
 */
export interface DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregationsRequest {
    /**
     * Select the view you want the aggregations for.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregations
     */
    readonly slug: string;
    /**
     * The aggregation can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregations
     */
    readonly filterFieldFilter?: string;
    /**
     * &#x60;AND&#x60;: Indicates that the aggregated rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the aggregated rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregations
     */
    readonly filterType?: string;
    /**
     * A JSON serialized string containing the filter tree to apply for the aggregation. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregations
     */
    readonly filters?: string;
    /**
     * if &#x60;include&#x60; is set to &#x60;total&#x60;, the total row count will be returned with the result.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregations
     */
    readonly include?: string;
    /**
     * If provided the aggregations are calculated only for matching rows.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregations
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregations
     */
    readonly searchMode?: string;
}
/**
 * Request parameters for listDatabaseTableGridViewRows operation in DatabaseTableGridViewApi.
 * @export
 * @interface DatabaseTableGridViewApiListDatabaseTableGridViewRowsRequest
 */
export interface DatabaseTableGridViewApiListDatabaseTableGridViewRowsRequest {
    /**
     * Returns only rows that belong to the related view\&#39;s table.
     * @type {number}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly viewId: number;
    /**
     * If provided only the count will be returned.
     * @type {boolean}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly count?: boolean;
    /**
     * All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter &#x60;exclude_fields&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response.
     * @type {string}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly excludeFields?: string;
    /**
     * The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly filterFieldFilter?: string;
    /**
     * &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly filterType?: string;
    /**
     * A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly filters?: string;
    /**
     * A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @type {string}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly include?: string;
    /**
     * All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter &#x60;include_fields&#x3D;field_1,field_2&#x60; then only the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response.
     * @type {string}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly includeFields?: string;
    /**
     * Defines how many rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly limit?: number;
    /**
     * Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly offset?: number;
    /**
     * Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @type {string}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly orderBy?: string;
    /**
     * Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @type {number}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly page?: number;
    /**
     * If provided only rows with data that matches the search query are going to be returned.
     * @type {string}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly searchMode?: string;
    /**
     * Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGridViewApiListDatabaseTableGridViewRows
     */
    readonly size?: number;
}
/**
 * Request parameters for publicListDatabaseTableGridViewRows operation in DatabaseTableGridViewApi.
 * @export
 * @interface DatabaseTableGridViewApiPublicListDatabaseTableGridViewRowsRequest
 */
export interface DatabaseTableGridViewApiPublicListDatabaseTableGridViewRowsRequest {
    /**
     * Returns only rows that belong to the related view.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly slug: string;
    /**
     * If provided only the count will be returned.
     * @type {boolean}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly count?: boolean;
    /**
     * All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter &#x60;exclude_fields&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly excludeFields?: string;
    /**
     * The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly filterFieldFilter?: string;
    /**
     * &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly filterType?: string;
    /**
     * A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly filters?: string;
    /**
     * Optionally the rows can be grouped by provided field ids separated by comma. By default no groups are applied. This doesn\&#39;t actually responds with the rows groups, this is just what\&#39;s needed for the Baserow group by feature.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly groupBy?: string;
    /**
     * A comma separated list allowing the values of &#x60;field_options&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly include?: string;
    /**
     * All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter &#x60;include_fields&#x3D;field_1,field_2&#x60; then only the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly includeFields?: string;
    /**
     * Defines how many rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly limit?: number;
    /**
     * Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly offset?: number;
    /**
     * Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A).
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly orderBy?: string;
    /**
     * Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @type {number}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly page?: number;
    /**
     * If provided only rows with data that matches the search query are going to be returned.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly searchMode?: string;
    /**
     * Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @type {number}
     * @memberof DatabaseTableGridViewApiPublicListDatabaseTableGridViewRows
     */
    readonly size?: number;
}
/**
 * DatabaseTableGridViewApi - object-oriented interface
 * @export
 * @class DatabaseTableGridViewApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableGridViewApi extends BaseAPI {
    /**
     * Lists only the rows and fields that match the request. Only the rows with the ids that are in the `row_ids` list are going to be returned. Same goes for the fields, only the fields with the ids in the `field_ids` are going to be returned. This endpoint could be used to refresh data after changes something. For example in the web frontend after changing a field type, the data of the related cells will be refreshed using this endpoint. In the example all field types are listed, but normally  the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableGridViewApiFilterDatabaseTableGridViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableGridViewApi
     */
    filterDatabaseTableGridViewRows(requestParameters: DatabaseTableGridViewApiFilterDatabaseTableGridViewRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExampleRowResponse[], any>>;
    /**
     * Computes the aggregation of all the values for a specified field from the selected grid view. You must select the aggregation type by setting the `type` GET parameter. If filters are configured for the selected view, the aggregation is calculated only on filtered rows. You need to have read permissions on the view to request an aggregation.
     * @param {DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableGridViewApi
     */
    getDatabaseTableGridViewFieldAggregation(requestParameters: DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetDatabaseTableGridViewFieldAggregation200Response, any>>;
    /**
     * Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.You need to have read permissions on the view to request aggregations.
     * @param {DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableGridViewApi
     */
    getDatabaseTableGridViewFieldAggregations(requestParameters: DatabaseTableGridViewApiGetDatabaseTableGridViewFieldAggregationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetDatabaseTablePublicGridViewFieldAggregations200Response, any>>;
    /**
     * Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.
     * @param {DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableGridViewApi
     */
    getDatabaseTablePublicGridViewFieldAggregations(requestParameters: DatabaseTableGridViewApiGetDatabaseTablePublicGridViewFieldAggregationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetDatabaseTablePublicGridViewFieldAggregations200Response, any>>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `view_id` if the authorized user has access to the database\'s workspace. The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.  The filters and sortings are automatically applied. To get a full overview of the applied filters and sortings you can use the `list_database_table_view_filters` and `list_database_table_view_sortings` endpoints.
     * @param {DatabaseTableGridViewApiListDatabaseTableGridViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableGridViewApi
     */
    listDatabaseTableGridViewRows(requestParameters: DatabaseTableGridViewApiListDatabaseTableGridViewRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerWithGridViewFieldOptionsExampleRowResponse, any>>;
    /**
     * Lists the requested rows of the view\'s table related to the provided `slug` if the grid view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableGridViewApiPublicListDatabaseTableGridViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableGridViewApi
     */
    publicListDatabaseTableGridViewRows(requestParameters: DatabaseTableGridViewApiPublicListDatabaseTableGridViewRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse, any>>;
}
/**
 * DatabaseTableKanbanViewApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableKanbanViewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Responds with serialized rows grouped by the view\'s single select field options if the user is authenticated and has access to the related workspace. Additional query parameters can be provided to control the `limit` and `offset` per select option.  This is a **premium** feature.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @param {number} [limit] Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @param {number} [offset] Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @param {string} [selectOption] Accepts multiple &#x60;select_option&#x60; parameters. If not provided, the rows of all select options will be returned. If one or more &#x60;select_option&#x60; parameters are provided, then only the rows of those will be included in the response. &#x60;?select_option&#x3D;1&amp;select_option&#x3D;null&#x60; will only include the rows for both select option with id &#x60;1&#x60; and &#x60;null&#x60;. &#x60;?select_option&#x3D;1,10,20&#x60; will only include the rows of select option id &#x60;1&#x60; with a limit of &#x60;10&#x60; and and offset of &#x60;20&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableKanbanViewRows: (viewId: number, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, limit?: number, offset?: number, selectOption?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with serialized rows grouped by the view\'s single select field options related to the `slug` if the kanban view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option.   This is a **premium** feature.
     * @param {string} slug Returns only rows that belong to the related view.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {number} [limit] Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @param {number} [offset] Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @param {string} [selectOption] Accepts multiple &#x60;select_option&#x60; parameters. If not provided, the rows of all select options will be returned. If one or more &#x60;select_option&#x60; parameters are provided, then only the rows of those will be included in the response. &#x60;?select_option&#x3D;1&amp;select_option&#x3D;null&#x60; will only include the rows for both select option with id &#x60;1&#x60; and &#x60;null&#x60;. &#x60;?select_option&#x3D;1,10,20&#x60; will only include the rows of select option id &#x60;1&#x60; with a limit of &#x60;10&#x60; and and offset of &#x60;20&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableKanbanViewRows: (slug: string, filterFieldFilter?: string, filterType?: string, filters?: string, limit?: number, offset?: number, selectOption?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableKanbanViewApi - functional programming interface
 * @export
 */
export declare const DatabaseTableKanbanViewApiFp: (configuration?: Configuration) => {
    /**
     * Responds with serialized rows grouped by the view\'s single select field options if the user is authenticated and has access to the related workspace. Additional query parameters can be provided to control the `limit` and `offset` per select option.  This is a **premium** feature.
     * @param {number} viewId Returns only rows that belong to the related view\&#39;s table.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @param {string} [include] A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @param {number} [limit] Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @param {number} [offset] Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @param {string} [selectOption] Accepts multiple &#x60;select_option&#x60; parameters. If not provided, the rows of all select options will be returned. If one or more &#x60;select_option&#x60; parameters are provided, then only the rows of those will be included in the response. &#x60;?select_option&#x3D;1&amp;select_option&#x3D;null&#x60; will only include the rows for both select option with id &#x60;1&#x60; and &#x60;null&#x60;. &#x60;?select_option&#x3D;1,10,20&#x60; will only include the rows of select option id &#x60;1&#x60; with a limit of &#x60;10&#x60; and and offset of &#x60;20&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableKanbanViewRows(viewId: number, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, limit?: number, offset?: number, selectOption?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KanbanViewExampleResponse>>;
    /**
     * Responds with serialized rows grouped by the view\'s single select field options related to the `slug` if the kanban view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option.   This is a **premium** feature.
     * @param {string} slug Returns only rows that belong to the related view.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {number} [limit] Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @param {number} [offset] Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @param {string} [selectOption] Accepts multiple &#x60;select_option&#x60; parameters. If not provided, the rows of all select options will be returned. If one or more &#x60;select_option&#x60; parameters are provided, then only the rows of those will be included in the response. &#x60;?select_option&#x3D;1&amp;select_option&#x3D;null&#x60; will only include the rows for both select option with id &#x60;1&#x60; and &#x60;null&#x60;. &#x60;?select_option&#x3D;1,10,20&#x60; will only include the rows of select option id &#x60;1&#x60; with a limit of &#x60;10&#x60; and and offset of &#x60;20&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableKanbanViewRows(slug: string, filterFieldFilter?: string, filterType?: string, filters?: string, limit?: number, offset?: number, selectOption?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KanbanViewExampleResponse>>;
};
/**
 * DatabaseTableKanbanViewApi - factory interface
 * @export
 */
export declare const DatabaseTableKanbanViewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Responds with serialized rows grouped by the view\'s single select field options if the user is authenticated and has access to the related workspace. Additional query parameters can be provided to control the `limit` and `offset` per select option.  This is a **premium** feature.
     * @param {DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableKanbanViewRows(requestParameters: DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<KanbanViewExampleResponse>;
    /**
     * Responds with serialized rows grouped by the view\'s single select field options related to the `slug` if the kanban view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option.   This is a **premium** feature.
     * @param {DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicListDatabaseTableKanbanViewRows(requestParameters: DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<KanbanViewExampleResponse>;
};
/**
 * Request parameters for listDatabaseTableKanbanViewRows operation in DatabaseTableKanbanViewApi.
 * @export
 * @interface DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRowsRequest
 */
export interface DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRowsRequest {
    /**
     * Returns only rows that belong to the related view\&#39;s table.
     * @type {number}
     * @memberof DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRows
     */
    readonly viewId: number;
    /**
     * The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filter parameters the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRows
     */
    readonly filterFieldFilter?: string;
    /**
     * &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRows
     */
    readonly filterType?: string;
    /**
     * A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.Please note that by passing the filters parameter the view filters saved for the view itself will be ignored.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRows
     */
    readonly filters?: string;
    /**
     * A comma separated list allowing the values of &#x60;field_options&#x60; and &#x60;row_metadata&#x60; which will add the object/objects with the same name to the response if included. The &#x60;field_options&#x60; object contains user defined view settings for each field. For example the field\&#39;s width is included in here. The &#x60;row_metadata&#x60; object includes extra row specific data on a per row basis.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRows
     */
    readonly include?: string;
    /**
     * Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @type {number}
     * @memberof DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRows
     */
    readonly limit?: number;
    /**
     * Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @type {number}
     * @memberof DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRows
     */
    readonly offset?: number;
    /**
     * Accepts multiple &#x60;select_option&#x60; parameters. If not provided, the rows of all select options will be returned. If one or more &#x60;select_option&#x60; parameters are provided, then only the rows of those will be included in the response. &#x60;?select_option&#x3D;1&amp;select_option&#x3D;null&#x60; will only include the rows for both select option with id &#x60;1&#x60; and &#x60;null&#x60;. &#x60;?select_option&#x3D;1,10,20&#x60; will only include the rows of select option id &#x60;1&#x60; with a limit of &#x60;10&#x60; and and offset of &#x60;20&#x60;.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRows
     */
    readonly selectOption?: string;
}
/**
 * Request parameters for publicListDatabaseTableKanbanViewRows operation in DatabaseTableKanbanViewApi.
 * @export
 * @interface DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRowsRequest
 */
export interface DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRowsRequest {
    /**
     * Returns only rows that belong to the related view.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRows
     */
    readonly slug: string;
    /**
     * The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRows
     */
    readonly filterFieldFilter?: string;
    /**
     * &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRows
     */
    readonly filterType?: string;
    /**
     * A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRows
     */
    readonly filters?: string;
    /**
     * Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @type {number}
     * @memberof DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRows
     */
    readonly limit?: number;
    /**
     * Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @type {number}
     * @memberof DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRows
     */
    readonly offset?: number;
    /**
     * Accepts multiple &#x60;select_option&#x60; parameters. If not provided, the rows of all select options will be returned. If one or more &#x60;select_option&#x60; parameters are provided, then only the rows of those will be included in the response. &#x60;?select_option&#x3D;1&amp;select_option&#x3D;null&#x60; will only include the rows for both select option with id &#x60;1&#x60; and &#x60;null&#x60;. &#x60;?select_option&#x3D;1,10,20&#x60; will only include the rows of select option id &#x60;1&#x60; with a limit of &#x60;10&#x60; and and offset of &#x60;20&#x60;.
     * @type {string}
     * @memberof DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRows
     */
    readonly selectOption?: string;
}
/**
 * DatabaseTableKanbanViewApi - object-oriented interface
 * @export
 * @class DatabaseTableKanbanViewApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableKanbanViewApi extends BaseAPI {
    /**
     * Responds with serialized rows grouped by the view\'s single select field options if the user is authenticated and has access to the related workspace. Additional query parameters can be provided to control the `limit` and `offset` per select option.  This is a **premium** feature.
     * @param {DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableKanbanViewApi
     */
    listDatabaseTableKanbanViewRows(requestParameters: DatabaseTableKanbanViewApiListDatabaseTableKanbanViewRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<KanbanViewExampleResponse, any>>;
    /**
     * Responds with serialized rows grouped by the view\'s single select field options related to the `slug` if the kanban view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option.   This is a **premium** feature.
     * @param {DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableKanbanViewApi
     */
    publicListDatabaseTableKanbanViewRows(requestParameters: DatabaseTableKanbanViewApiPublicListDatabaseTableKanbanViewRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<KanbanViewExampleResponse, any>>;
}
/**
 * DatabaseTableRowsApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableRowsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates new rows in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.   **WARNING:** This endpoint doesn\'t yet work with row created webhooks.
     * @param {number} tableId Creates the rows in the table.
     * @param {ExampleBatchRowsRequest} exampleBatchRowsRequest
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {number} [before] If provided then the newly created rows will be positioned before the row with the provided id.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchCreateDatabaseTableRows: (tableId: number, exampleBatchRowsRequest: ExampleBatchRowsRequest, clientSessionId?: string, clientUndoRedoActionGroupId?: string, before?: number, userFieldNames?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes existing rows in the table if the user has access to the table\'s workspace.   **WARNING:**  This endpoint doesn\'t yet work with row deleted webhooks.
     * @param {number} tableId Deletes the rows in the table related to the value.
     * @param {BatchDeleteRows} batchDeleteRows
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchDeleteDatabaseTableRows: (tableId: number, batchDeleteRows: BatchDeleteRows, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates existing rows in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided for each row. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.   **WARNING:** This endpoint doesn\'t yet work with row updated webhooks.
     * @param {number} tableId Updates the rows in the table.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {PatchedExampleBatchUpdateRowsRequest} [patchedExampleBatchUpdateRowsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchUpdateDatabaseTableRows: (tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, userFieldNames?: boolean, patchedExampleBatchUpdateRowsRequest?: PatchedExampleBatchUpdateRowsRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new row in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * @param {number} tableId Creates a row in the table related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {number} [before] If provided then the newly created row will be positioned before the row with the provided id.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {ExampleRowRequestSerializerWithUserFieldNames} [exampleRowRequestSerializerWithUserFieldNames]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableRow: (tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, before?: number, userFieldNames?: boolean, exampleRowRequestSerializerWithUserFieldNames?: ExampleRowRequestSerializerWithUserFieldNames, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a comment on the specified row.  This is a **premium** feature.
     * @param {number} rowId The row to create a comment for.
     * @param {number} tableId The table to find the row to comment on in.
     * @param {RowCommentCreate} rowCommentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRowComment: (rowId: number, tableId: number, rowCommentCreate: RowCommentCreate, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an existing row in the table if the user has access to the table\'s workspace.
     * @param {number} rowId Deletes the row related to the value.
     * @param {number} tableId Deletes the row in the table related to the value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableRow: (rowId: number, tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a row comment.  This is a **premium** feature.
     * @param {number} commentId The row comment to delete.
     * @param {number} tableId The table the row is in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRowComment: (commentId: number, tableId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the adjacent row to a given row_id in the table with the given table_id. If the previous flag is set it will return the previous row, otherwise it will return the next row. You can specifya view_id and it will apply the filters and sorts of the provided view.
     * @param {number} rowId Returns the row adjacent the provided value.
     * @param {number} tableId Returns the row of the table related to the provided value.
     * @param {boolean} [previous] A flag query parameter which if provided returns theprevious row to the specified row_id. If it\&#39;s not setit will return the next row.
     * @param {string} [search] If provided, the adjacent row will be one that matchesthe search query.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {number} [viewId] Applies the filters and sorts of the provided view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdjacentDatabaseTableRow: (rowId: number, tableId: number, previous?: boolean, search?: string, searchMode?: string, userFieldNames?: boolean, viewId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches an existing row from the table if the user has access to the related table\'s workspace. The properties of the returned row depend on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {number} rowId Returns the row related the provided value.
     * @param {number} tableId Returns the row of the table related to the provided value.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableRow: (rowId: number, tableId: number, userFieldNames?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the row change history of a given row_id in the table with the given table_id. The row change history is paginated and can be limited with the limit and offset query parameters.
     * @param {number} rowId The id of the row to fetch the change history from.
     * @param {number} tableId The id of the table to fetch the row change history from.
     * @param {number} [limit] The maximum number of row change history entries to return.
     * @param {number} [offset] The offset of the row change history entries to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableRowHistory: (rowId: number, tableId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all row comments for the specified table and row.  This is a **premium** feature.
     * @param {number} rowId The row to get row comments for.
     * @param {number} tableId The table the row is in.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {number} [page] Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @param {number} [size] Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRowComments: (rowId: number, tableId: number, limit?: number, offset?: number, page?: number, size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the names of the given row of the given tables. The nameof a row is the primary field value for this row. The result can be usedfor example, when you want to display the name of a linked row from another table.
     * @param {string} [tableId] A list of comma separated row ids to query from the table with id {id}. For example, if you want the name of row &#x60;42&#x60; and &#x60;43&#x60; from table &#x60;28&#x60; this parameter will be &#x60;table__28&#x3D;42,43&#x60;. You can specify multiple rows for different tables but every tables must be in the same database. You need at least read permission on all specified tables.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableRowNames: (tableId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the rows of the table related to the provided parameter if the user has access to the related database\'s workspace. The response is paginated by a page/size style. It is also possible to provide an optional search query, only rows where the data matches the search query are going to be returned then. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {number} tableId Returns the rows of the table related to the provided value.
     * @param {string} [exclude] All the fields are included in the response by default. You can select a subset of fields by providing the exclude query parameter. If you for example provide the following GET parameter &#x60;exclude&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response. If the &#x60;user_field_names&#x60; parameter is provided then instead exclude should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: &#x60;exclude&#x3D;My Field,\&quot;Field With , \&quot;&#x60;. A backslash can be used to escape field names which contain double quotes like so: &#x60;exclude&#x3D;My Field,Field with \\\&quot;&#x60;.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;. The &#x60;field&#x60; value must be the ID of the field to filter on, or the name of the field if &#x60;user_field_names&#x60; is true.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [include] All the fields are included in the response by default. You can select a subset of fields by providing the include query parameter. If you for example provide the following GET parameter &#x60;include&#x3D;field_1,field_2&#x60; then only the fields withid &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response. If the &#x60;user_field_names&#x60; parameter is provided then instead include should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: &#x60;include&#x3D;My Field,\&quot;Field With , \&quot;&#x60;. A backslash can be used to escape field names which contain double quotes like so: &#x60;include&#x3D;My Field,Field with \\\&quot;&#x60;.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A). If the &#x60;user_field_names&#x60; parameter is provided then instead order_by should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: &#x60;order_by&#x3D;My Field,\&quot;Field With , \&quot;&#x60;. A backslash can be used to escape field names which contain double quotes like so: &#x60;order_by&#x3D;My Field,Field with \\\&quot;&#x60;.
     * @param {number} [page] Defines which page of rows should be returned.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {number} [size] Defines how many rows should be returned per page.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {number} [viewId] Includes all the filters and sorts of the provided view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableRows: (tableId: number, exclude?: string, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, orderBy?: string, page?: number, search?: string, searchMode?: string, size?: number, userFieldNames?: boolean, viewId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Moves the row related to given `row_id` parameter to another position. It is only possible to move the row before another existing row or to the end. If the `before_id` is provided then the row related to the `row_id` parameter is moved before that row. If the `before_id` parameter is not provided, then the row will be moved to the end.
     * @param {number} rowId Moves the row related to the value.
     * @param {number} tableId Moves the row in the table related to the value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {number} [beforeId] Moves the row related to the given &#x60;row_id&#x60; before the row related to the provided value. If not provided, then the row will be moved to the end.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveDatabaseTableRow: (rowId: number, tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, beforeId?: number, userFieldNames?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing row in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * @param {number} rowId Updates the row related to the value.
     * @param {number} tableId Updates the row in the table related to the value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {PatchedExampleUpdateRowRequestSerializerWithUserFieldNames} [patchedExampleUpdateRowRequestSerializerWithUserFieldNames]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableRow: (rowId: number, tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, userFieldNames?: boolean, patchedExampleUpdateRowRequestSerializerWithUserFieldNames?: PatchedExampleUpdateRowRequestSerializerWithUserFieldNames, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a row comment.  This is a **premium** feature.
     * @param {number} commentId The row comment to update.
     * @param {number} tableId The table the row is in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRowComment: (commentId: number, tableId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the user\'s notification preferences for comments made on a specified table row.  This is a **premium** feature.
     * @param {number} rowId The row on which to manage the comment subscription.
     * @param {number} tableId The table id where the row is in.
     * @param {RowCommentsNotificationMode} rowCommentsNotificationMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRowCommentNotificationMode: (rowId: number, tableId: number, rowCommentsNotificationMode: RowCommentsNotificationMode, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableRowsApi - functional programming interface
 * @export
 */
export declare const DatabaseTableRowsApiFp: (configuration?: Configuration) => {
    /**
     * Creates new rows in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.   **WARNING:** This endpoint doesn\'t yet work with row created webhooks.
     * @param {number} tableId Creates the rows in the table.
     * @param {ExampleBatchRowsRequest} exampleBatchRowsRequest
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {number} [before] If provided then the newly created rows will be positioned before the row with the provided id.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchCreateDatabaseTableRows(tableId: number, exampleBatchRowsRequest: ExampleBatchRowsRequest, clientSessionId?: string, clientUndoRedoActionGroupId?: string, before?: number, userFieldNames?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExampleBatchRowsResponse>>;
    /**
     * Deletes existing rows in the table if the user has access to the table\'s workspace.   **WARNING:**  This endpoint doesn\'t yet work with row deleted webhooks.
     * @param {number} tableId Deletes the rows in the table related to the value.
     * @param {BatchDeleteRows} batchDeleteRows
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchDeleteDatabaseTableRows(tableId: number, batchDeleteRows: BatchDeleteRows, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates existing rows in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided for each row. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.   **WARNING:** This endpoint doesn\'t yet work with row updated webhooks.
     * @param {number} tableId Updates the rows in the table.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {PatchedExampleBatchUpdateRowsRequest} [patchedExampleBatchUpdateRowsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchUpdateDatabaseTableRows(tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, userFieldNames?: boolean, patchedExampleBatchUpdateRowsRequest?: PatchedExampleBatchUpdateRowsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExampleBatchRowsResponse>>;
    /**
     * Creates a new row in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * @param {number} tableId Creates a row in the table related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {number} [before] If provided then the newly created row will be positioned before the row with the provided id.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {ExampleRowRequestSerializerWithUserFieldNames} [exampleRowRequestSerializerWithUserFieldNames]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableRow(tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, before?: number, userFieldNames?: boolean, exampleRowRequestSerializerWithUserFieldNames?: ExampleRowRequestSerializerWithUserFieldNames, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>>;
    /**
     * Creates a comment on the specified row.  This is a **premium** feature.
     * @param {number} rowId The row to create a comment for.
     * @param {number} tableId The table to find the row to comment on in.
     * @param {RowCommentCreate} rowCommentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRowComment(rowId: number, tableId: number, rowCommentCreate: RowCommentCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RowComment>>;
    /**
     * Deletes an existing row in the table if the user has access to the table\'s workspace.
     * @param {number} rowId Deletes the row related to the value.
     * @param {number} tableId Deletes the row in the table related to the value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableRow(rowId: number, tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a row comment.  This is a **premium** feature.
     * @param {number} commentId The row comment to delete.
     * @param {number} tableId The table the row is in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRowComment(commentId: number, tableId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RowComment>>;
    /**
     * Fetches the adjacent row to a given row_id in the table with the given table_id. If the previous flag is set it will return the previous row, otherwise it will return the next row. You can specifya view_id and it will apply the filters and sorts of the provided view.
     * @param {number} rowId Returns the row adjacent the provided value.
     * @param {number} tableId Returns the row of the table related to the provided value.
     * @param {boolean} [previous] A flag query parameter which if provided returns theprevious row to the specified row_id. If it\&#39;s not setit will return the next row.
     * @param {string} [search] If provided, the adjacent row will be one that matchesthe search query.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {number} [viewId] Applies the filters and sorts of the provided view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdjacentDatabaseTableRow(rowId: number, tableId: number, previous?: boolean, search?: string, searchMode?: string, userFieldNames?: boolean, viewId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>>;
    /**
     * Fetches an existing row from the table if the user has access to the related table\'s workspace. The properties of the returned row depend on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {number} rowId Returns the row related the provided value.
     * @param {number} tableId Returns the row of the table related to the provided value.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableRow(rowId: number, tableId: number, userFieldNames?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>>;
    /**
     * Fetches the row change history of a given row_id in the table with the given table_id. The row change history is paginated and can be limited with the limit and offset query parameters.
     * @param {number} rowId The id of the row to fetch the change history from.
     * @param {number} tableId The id of the table to fetch the row change history from.
     * @param {number} [limit] The maximum number of row change history entries to return.
     * @param {number} [offset] The offset of the row change history entries to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableRowHistory(rowId: number, tableId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerRowHistory>>;
    /**
     * Returns all row comments for the specified table and row.  This is a **premium** feature.
     * @param {number} rowId The row to get row comments for.
     * @param {number} tableId The table the row is in.
     * @param {number} [limit] Defines how many rows should be returned.
     * @param {number} [offset] Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @param {number} [page] Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @param {number} [size] Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRowComments(rowId: number, tableId: number, limit?: number, offset?: number, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerRowComment>>;
    /**
     * Returns the names of the given row of the given tables. The nameof a row is the primary field value for this row. The result can be usedfor example, when you want to display the name of a linked row from another table.
     * @param {string} [tableId] A list of comma separated row ids to query from the table with id {id}. For example, if you want the name of row &#x60;42&#x60; and &#x60;43&#x60; from table &#x60;28&#x60; this parameter will be &#x60;table__28&#x3D;42,43&#x60;. You can specify multiple rows for different tables but every tables must be in the same database. You need at least read permission on all specified tables.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableRowNames(tableId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDatabaseTableRowNames200Response>>;
    /**
     * Lists all the rows of the table related to the provided parameter if the user has access to the related database\'s workspace. The response is paginated by a page/size style. It is also possible to provide an optional search query, only rows where the data matches the search query are going to be returned then. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {number} tableId Returns the rows of the table related to the provided value.
     * @param {string} [exclude] All the fields are included in the response by default. You can select a subset of fields by providing the exclude query parameter. If you for example provide the following GET parameter &#x60;exclude&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response. If the &#x60;user_field_names&#x60; parameter is provided then instead exclude should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: &#x60;exclude&#x3D;My Field,\&quot;Field With , \&quot;&#x60;. A backslash can be used to escape field names which contain double quotes like so: &#x60;exclude&#x3D;My Field,Field with \\\&quot;&#x60;.
     * @param {string} [filterFieldFilter] The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [filterType] &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @param {string} [filters] A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;. The &#x60;field&#x60; value must be the ID of the field to filter on, or the name of the field if &#x60;user_field_names&#x60; is true.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @param {string} [include] All the fields are included in the response by default. You can select a subset of fields by providing the include query parameter. If you for example provide the following GET parameter &#x60;include&#x3D;field_1,field_2&#x60; then only the fields withid &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response. If the &#x60;user_field_names&#x60; parameter is provided then instead include should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: &#x60;include&#x3D;My Field,\&quot;Field With , \&quot;&#x60;. A backslash can be used to escape field names which contain double quotes like so: &#x60;include&#x3D;My Field,Field with \\\&quot;&#x60;.
     * @param {string} [orderBy] Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A). If the &#x60;user_field_names&#x60; parameter is provided then instead order_by should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: &#x60;order_by&#x3D;My Field,\&quot;Field With , \&quot;&#x60;. A backslash can be used to escape field names which contain double quotes like so: &#x60;order_by&#x3D;My Field,Field with \\\&quot;&#x60;.
     * @param {number} [page] Defines which page of rows should be returned.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {number} [size] Defines how many rows should be returned per page.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {number} [viewId] Includes all the filters and sorts of the provided view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableRows(tableId: number, exclude?: string, filterFieldFilter?: string, filterType?: string, filters?: string, include?: string, orderBy?: string, page?: number, search?: string, searchMode?: string, size?: number, userFieldNames?: boolean, viewId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerExampleRowResponseSerializerWithUserFieldNames>>;
    /**
     * Moves the row related to given `row_id` parameter to another position. It is only possible to move the row before another existing row or to the end. If the `before_id` is provided then the row related to the `row_id` parameter is moved before that row. If the `before_id` parameter is not provided, then the row will be moved to the end.
     * @param {number} rowId Moves the row related to the value.
     * @param {number} tableId Moves the row in the table related to the value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {number} [beforeId] Moves the row related to the given &#x60;row_id&#x60; before the row related to the provided value. If not provided, then the row will be moved to the end.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveDatabaseTableRow(rowId: number, tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, beforeId?: number, userFieldNames?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>>;
    /**
     * Updates an existing row in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * @param {number} rowId Updates the row related to the value.
     * @param {number} tableId Updates the row in the table related to the value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {boolean} [userFieldNames] A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @param {PatchedExampleUpdateRowRequestSerializerWithUserFieldNames} [patchedExampleUpdateRowRequestSerializerWithUserFieldNames]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableRow(rowId: number, tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, userFieldNames?: boolean, patchedExampleUpdateRowRequestSerializerWithUserFieldNames?: PatchedExampleUpdateRowRequestSerializerWithUserFieldNames, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>>;
    /**
     * Update a row comment.  This is a **premium** feature.
     * @param {number} commentId The row comment to update.
     * @param {number} tableId The table the row is in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRowComment(commentId: number, tableId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RowComment>>;
    /**
     * Updates the user\'s notification preferences for comments made on a specified table row.  This is a **premium** feature.
     * @param {number} rowId The row on which to manage the comment subscription.
     * @param {number} tableId The table id where the row is in.
     * @param {RowCommentsNotificationMode} rowCommentsNotificationMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRowCommentNotificationMode(rowId: number, tableId: number, rowCommentsNotificationMode: RowCommentsNotificationMode, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * DatabaseTableRowsApi - factory interface
 * @export
 */
export declare const DatabaseTableRowsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates new rows in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.   **WARNING:** This endpoint doesn\'t yet work with row created webhooks.
     * @param {DatabaseTableRowsApiBatchCreateDatabaseTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchCreateDatabaseTableRows(requestParameters: DatabaseTableRowsApiBatchCreateDatabaseTableRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExampleBatchRowsResponse>;
    /**
     * Deletes existing rows in the table if the user has access to the table\'s workspace.   **WARNING:**  This endpoint doesn\'t yet work with row deleted webhooks.
     * @param {DatabaseTableRowsApiBatchDeleteDatabaseTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchDeleteDatabaseTableRows(requestParameters: DatabaseTableRowsApiBatchDeleteDatabaseTableRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates existing rows in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided for each row. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.   **WARNING:** This endpoint doesn\'t yet work with row updated webhooks.
     * @param {DatabaseTableRowsApiBatchUpdateDatabaseTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchUpdateDatabaseTableRows(requestParameters: DatabaseTableRowsApiBatchUpdateDatabaseTableRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExampleBatchRowsResponse>;
    /**
     * Creates a new row in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * @param {DatabaseTableRowsApiCreateDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableRow(requestParameters: DatabaseTableRowsApiCreateDatabaseTableRowRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>;
    /**
     * Creates a comment on the specified row.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiCreateRowCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRowComment(requestParameters: DatabaseTableRowsApiCreateRowCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<RowComment>;
    /**
     * Deletes an existing row in the table if the user has access to the table\'s workspace.
     * @param {DatabaseTableRowsApiDeleteDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableRow(requestParameters: DatabaseTableRowsApiDeleteDatabaseTableRowRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a row comment.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiDeleteRowCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRowComment(requestParameters: DatabaseTableRowsApiDeleteRowCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<RowComment>;
    /**
     * Fetches the adjacent row to a given row_id in the table with the given table_id. If the previous flag is set it will return the previous row, otherwise it will return the next row. You can specifya view_id and it will apply the filters and sorts of the provided view.
     * @param {DatabaseTableRowsApiGetAdjacentDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdjacentDatabaseTableRow(requestParameters: DatabaseTableRowsApiGetAdjacentDatabaseTableRowRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>;
    /**
     * Fetches an existing row from the table if the user has access to the related table\'s workspace. The properties of the returned row depend on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableRowsApiGetDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableRow(requestParameters: DatabaseTableRowsApiGetDatabaseTableRowRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>;
    /**
     * Fetches the row change history of a given row_id in the table with the given table_id. The row change history is paginated and can be limited with the limit and offset query parameters.
     * @param {DatabaseTableRowsApiGetDatabaseTableRowHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableRowHistory(requestParameters: DatabaseTableRowsApiGetDatabaseTableRowHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerRowHistory>;
    /**
     * Returns all row comments for the specified table and row.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiGetRowCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRowComments(requestParameters: DatabaseTableRowsApiGetRowCommentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerRowComment>;
    /**
     * Returns the names of the given row of the given tables. The nameof a row is the primary field value for this row. The result can be usedfor example, when you want to display the name of a linked row from another table.
     * @param {DatabaseTableRowsApiListDatabaseTableRowNamesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableRowNames(requestParameters?: DatabaseTableRowsApiListDatabaseTableRowNamesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListDatabaseTableRowNames200Response>;
    /**
     * Lists all the rows of the table related to the provided parameter if the user has access to the related database\'s workspace. The response is paginated by a page/size style. It is also possible to provide an optional search query, only rows where the data matches the search query are going to be returned then. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableRowsApiListDatabaseTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableRows(requestParameters: DatabaseTableRowsApiListDatabaseTableRowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerExampleRowResponseSerializerWithUserFieldNames>;
    /**
     * Moves the row related to given `row_id` parameter to another position. It is only possible to move the row before another existing row or to the end. If the `before_id` is provided then the row related to the `row_id` parameter is moved before that row. If the `before_id` parameter is not provided, then the row will be moved to the end.
     * @param {DatabaseTableRowsApiMoveDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveDatabaseTableRow(requestParameters: DatabaseTableRowsApiMoveDatabaseTableRowRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>;
    /**
     * Updates an existing row in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * @param {DatabaseTableRowsApiUpdateDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableRow(requestParameters: DatabaseTableRowsApiUpdateDatabaseTableRowRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExampleRowResponseSerializerWithUserFieldNames>;
    /**
     * Update a row comment.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiUpdateRowCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRowComment(requestParameters: DatabaseTableRowsApiUpdateRowCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<RowComment>;
    /**
     * Updates the user\'s notification preferences for comments made on a specified table row.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiUpdateRowCommentNotificationModeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRowCommentNotificationMode(requestParameters: DatabaseTableRowsApiUpdateRowCommentNotificationModeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for batchCreateDatabaseTableRows operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiBatchCreateDatabaseTableRowsRequest
 */
export interface DatabaseTableRowsApiBatchCreateDatabaseTableRowsRequest {
    /**
     * Creates the rows in the table.
     * @type {number}
     * @memberof DatabaseTableRowsApiBatchCreateDatabaseTableRows
     */
    readonly tableId: number;
    /**
     *
     * @type {ExampleBatchRowsRequest}
     * @memberof DatabaseTableRowsApiBatchCreateDatabaseTableRows
     */
    readonly exampleBatchRowsRequest: ExampleBatchRowsRequest;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableRowsApiBatchCreateDatabaseTableRows
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableRowsApiBatchCreateDatabaseTableRows
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     * If provided then the newly created rows will be positioned before the row with the provided id.
     * @type {number}
     * @memberof DatabaseTableRowsApiBatchCreateDatabaseTableRows
     */
    readonly before?: number;
    /**
     * A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @type {boolean}
     * @memberof DatabaseTableRowsApiBatchCreateDatabaseTableRows
     */
    readonly userFieldNames?: boolean;
}
/**
 * Request parameters for batchDeleteDatabaseTableRows operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiBatchDeleteDatabaseTableRowsRequest
 */
export interface DatabaseTableRowsApiBatchDeleteDatabaseTableRowsRequest {
    /**
     * Deletes the rows in the table related to the value.
     * @type {number}
     * @memberof DatabaseTableRowsApiBatchDeleteDatabaseTableRows
     */
    readonly tableId: number;
    /**
     *
     * @type {BatchDeleteRows}
     * @memberof DatabaseTableRowsApiBatchDeleteDatabaseTableRows
     */
    readonly batchDeleteRows: BatchDeleteRows;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableRowsApiBatchDeleteDatabaseTableRows
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableRowsApiBatchDeleteDatabaseTableRows
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for batchUpdateDatabaseTableRows operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiBatchUpdateDatabaseTableRowsRequest
 */
export interface DatabaseTableRowsApiBatchUpdateDatabaseTableRowsRequest {
    /**
     * Updates the rows in the table.
     * @type {number}
     * @memberof DatabaseTableRowsApiBatchUpdateDatabaseTableRows
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableRowsApiBatchUpdateDatabaseTableRows
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableRowsApiBatchUpdateDatabaseTableRows
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     * A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @type {boolean}
     * @memberof DatabaseTableRowsApiBatchUpdateDatabaseTableRows
     */
    readonly userFieldNames?: boolean;
    /**
     *
     * @type {PatchedExampleBatchUpdateRowsRequest}
     * @memberof DatabaseTableRowsApiBatchUpdateDatabaseTableRows
     */
    readonly patchedExampleBatchUpdateRowsRequest?: PatchedExampleBatchUpdateRowsRequest;
}
/**
 * Request parameters for createDatabaseTableRow operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiCreateDatabaseTableRowRequest
 */
export interface DatabaseTableRowsApiCreateDatabaseTableRowRequest {
    /**
     * Creates a row in the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTableRowsApiCreateDatabaseTableRow
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableRowsApiCreateDatabaseTableRow
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableRowsApiCreateDatabaseTableRow
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     * If provided then the newly created row will be positioned before the row with the provided id.
     * @type {number}
     * @memberof DatabaseTableRowsApiCreateDatabaseTableRow
     */
    readonly before?: number;
    /**
     * A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @type {boolean}
     * @memberof DatabaseTableRowsApiCreateDatabaseTableRow
     */
    readonly userFieldNames?: boolean;
    /**
     *
     * @type {ExampleRowRequestSerializerWithUserFieldNames}
     * @memberof DatabaseTableRowsApiCreateDatabaseTableRow
     */
    readonly exampleRowRequestSerializerWithUserFieldNames?: ExampleRowRequestSerializerWithUserFieldNames;
}
/**
 * Request parameters for createRowComment operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiCreateRowCommentRequest
 */
export interface DatabaseTableRowsApiCreateRowCommentRequest {
    /**
     * The row to create a comment for.
     * @type {number}
     * @memberof DatabaseTableRowsApiCreateRowComment
     */
    readonly rowId: number;
    /**
     * The table to find the row to comment on in.
     * @type {number}
     * @memberof DatabaseTableRowsApiCreateRowComment
     */
    readonly tableId: number;
    /**
     *
     * @type {RowCommentCreate}
     * @memberof DatabaseTableRowsApiCreateRowComment
     */
    readonly rowCommentCreate: RowCommentCreate;
}
/**
 * Request parameters for deleteDatabaseTableRow operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiDeleteDatabaseTableRowRequest
 */
export interface DatabaseTableRowsApiDeleteDatabaseTableRowRequest {
    /**
     * Deletes the row related to the value.
     * @type {number}
     * @memberof DatabaseTableRowsApiDeleteDatabaseTableRow
     */
    readonly rowId: number;
    /**
     * Deletes the row in the table related to the value.
     * @type {number}
     * @memberof DatabaseTableRowsApiDeleteDatabaseTableRow
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableRowsApiDeleteDatabaseTableRow
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableRowsApiDeleteDatabaseTableRow
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for deleteRowComment operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiDeleteRowCommentRequest
 */
export interface DatabaseTableRowsApiDeleteRowCommentRequest {
    /**
     * The row comment to delete.
     * @type {number}
     * @memberof DatabaseTableRowsApiDeleteRowComment
     */
    readonly commentId: number;
    /**
     * The table the row is in.
     * @type {number}
     * @memberof DatabaseTableRowsApiDeleteRowComment
     */
    readonly tableId: number;
}
/**
 * Request parameters for getAdjacentDatabaseTableRow operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiGetAdjacentDatabaseTableRowRequest
 */
export interface DatabaseTableRowsApiGetAdjacentDatabaseTableRowRequest {
    /**
     * Returns the row adjacent the provided value.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetAdjacentDatabaseTableRow
     */
    readonly rowId: number;
    /**
     * Returns the row of the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetAdjacentDatabaseTableRow
     */
    readonly tableId: number;
    /**
     * A flag query parameter which if provided returns theprevious row to the specified row_id. If it\&#39;s not setit will return the next row.
     * @type {boolean}
     * @memberof DatabaseTableRowsApiGetAdjacentDatabaseTableRow
     */
    readonly previous?: boolean;
    /**
     * If provided, the adjacent row will be one that matchesthe search query.
     * @type {string}
     * @memberof DatabaseTableRowsApiGetAdjacentDatabaseTableRow
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableRowsApiGetAdjacentDatabaseTableRow
     */
    readonly searchMode?: string;
    /**
     * A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @type {boolean}
     * @memberof DatabaseTableRowsApiGetAdjacentDatabaseTableRow
     */
    readonly userFieldNames?: boolean;
    /**
     * Applies the filters and sorts of the provided view.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetAdjacentDatabaseTableRow
     */
    readonly viewId?: number;
}
/**
 * Request parameters for getDatabaseTableRow operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiGetDatabaseTableRowRequest
 */
export interface DatabaseTableRowsApiGetDatabaseTableRowRequest {
    /**
     * Returns the row related the provided value.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetDatabaseTableRow
     */
    readonly rowId: number;
    /**
     * Returns the row of the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetDatabaseTableRow
     */
    readonly tableId: number;
    /**
     * A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @type {boolean}
     * @memberof DatabaseTableRowsApiGetDatabaseTableRow
     */
    readonly userFieldNames?: boolean;
}
/**
 * Request parameters for getDatabaseTableRowHistory operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiGetDatabaseTableRowHistoryRequest
 */
export interface DatabaseTableRowsApiGetDatabaseTableRowHistoryRequest {
    /**
     * The id of the row to fetch the change history from.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetDatabaseTableRowHistory
     */
    readonly rowId: number;
    /**
     * The id of the table to fetch the row change history from.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetDatabaseTableRowHistory
     */
    readonly tableId: number;
    /**
     * The maximum number of row change history entries to return.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetDatabaseTableRowHistory
     */
    readonly limit?: number;
    /**
     * The offset of the row change history entries to return.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetDatabaseTableRowHistory
     */
    readonly offset?: number;
}
/**
 * Request parameters for getRowComments operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiGetRowCommentsRequest
 */
export interface DatabaseTableRowsApiGetRowCommentsRequest {
    /**
     * The row to get row comments for.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetRowComments
     */
    readonly rowId: number;
    /**
     * The table the row is in.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetRowComments
     */
    readonly tableId: number;
    /**
     * Defines how many rows should be returned.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetRowComments
     */
    readonly limit?: number;
    /**
     * Can only be used in combination with the &#x60;limit&#x60; parameter and defines from which offset the rows should be returned.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetRowComments
     */
    readonly offset?: number;
    /**
     * Defines which page of rows should be returned. Either the &#x60;page&#x60; or &#x60;limit&#x60; can be provided, not both.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetRowComments
     */
    readonly page?: number;
    /**
     * Can only be used in combination with the &#x60;page&#x60; parameter and defines how many rows should be returned.
     * @type {number}
     * @memberof DatabaseTableRowsApiGetRowComments
     */
    readonly size?: number;
}
/**
 * Request parameters for listDatabaseTableRowNames operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiListDatabaseTableRowNamesRequest
 */
export interface DatabaseTableRowsApiListDatabaseTableRowNamesRequest {
    /**
     * A list of comma separated row ids to query from the table with id {id}. For example, if you want the name of row &#x60;42&#x60; and &#x60;43&#x60; from table &#x60;28&#x60; this parameter will be &#x60;table__28&#x3D;42,43&#x60;. You can specify multiple rows for different tables but every tables must be in the same database. You need at least read permission on all specified tables.
     * @type {string}
     * @memberof DatabaseTableRowsApiListDatabaseTableRowNames
     */
    readonly tableId?: string;
}
/**
 * Request parameters for listDatabaseTableRows operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiListDatabaseTableRowsRequest
 */
export interface DatabaseTableRowsApiListDatabaseTableRowsRequest {
    /**
     * Returns the rows of the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly tableId: number;
    /**
     * All the fields are included in the response by default. You can select a subset of fields by providing the exclude query parameter. If you for example provide the following GET parameter &#x60;exclude&#x3D;field_1,field_2&#x60; then the fields with id &#x60;1&#x60; and id &#x60;2&#x60; are going to be excluded from the selection and response. If the &#x60;user_field_names&#x60; parameter is provided then instead exclude should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: &#x60;exclude&#x3D;My Field,\&quot;Field With , \&quot;&#x60;. A backslash can be used to escape field names which contain double quotes like so: &#x60;exclude&#x3D;My Field,Field with \\\&quot;&#x60;.
     * @type {string}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly exclude?: string;
    /**
     * The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.  Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.   For example if you provide the following GET parameter &#x60;filter__field_1__equal&#x3D;test&#x60; then only rows where the value of field_1 is equal to test are going to be returned.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @type {string}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly filterFieldFilter?: string;
    /**
     * &#x60;AND&#x60;: Indicates that the rows must match all the provided filters. &#x60;OR&#x60;: Indicates that the rows only have to match one of the filters.  This works only if two or more filters are provided.Please note that if the &#x60;filters&#x60; parameter is provided, this parameter will be ignored.
     * @type {string}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly filterType?: string;
    /**
     * A JSON serialized string containing the filter tree to apply to this view. The filter tree is a nested structure containing the filters that need to be applied.   Please note that if this parameter is provided, all other &#x60;filter__{field}__{filter}&#x60; will be ignored, as well as the &#x60;filter_type&#x60; parameter.   An example of a valid filter tree is the following:&#x60;{\&quot;filter_type\&quot;: \&quot;AND\&quot;, \&quot;filters\&quot;: [{\&quot;field\&quot;: 1, \&quot;type\&quot;: \&quot;equal\&quot;, \&quot;value\&quot;: \&quot;test\&quot;}]}&#x60;. The &#x60;field&#x60; value must be the ID of the field to filter on, or the name of the field if &#x60;user_field_names&#x60; is true.  The following filters are available: equal, not_equal, filename_contains, files_lower_than, has_file_type, contains, contains_not, contains_word, doesnt_contain_word, length_is_lower_than, higher_than, higher_than_or_equal, lower_than, lower_than_or_equal, is_even_and_whole, date_equal, date_before, date_before_or_equal, date_after_days_ago, date_after, date_after_or_equal, date_not_equal, date_equals_today, date_before_today, date_after_today, date_within_days, date_within_weeks, date_within_months, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, date_is, date_is_not, date_is_before, date_is_on_or_before, date_is_after, date_is_on_or_after, date_is_within, single_select_equal, single_select_not_equal, single_select_is_any_of, single_select_is_none_of, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not, user_is, user_is_not, has_value_equal, has_not_value_equal, has_value_contains, has_not_value_contains, has_value_contains_word, has_not_value_contains_word, has_value_length_is_lower_than, has_empty_value, has_not_empty_value.
     * @type {string}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly filters?: string;
    /**
     * All the fields are included in the response by default. You can select a subset of fields by providing the include query parameter. If you for example provide the following GET parameter &#x60;include&#x3D;field_1,field_2&#x60; then only the fields withid &#x60;1&#x60; and id &#x60;2&#x60; are going to be selected and included in the response. If the &#x60;user_field_names&#x60; parameter is provided then instead include should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: &#x60;include&#x3D;My Field,\&quot;Field With , \&quot;&#x60;. A backslash can be used to escape field names which contain double quotes like so: &#x60;include&#x3D;My Field,Field with \\\&quot;&#x60;.
     * @type {string}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly include?: string;
    /**
     * Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a \&#39;-\&#39; it can be ordered descending (Z-A). If the &#x60;user_field_names&#x60; parameter is provided then instead order_by should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: &#x60;order_by&#x3D;My Field,\&quot;Field With , \&quot;&#x60;. A backslash can be used to escape field names which contain double quotes like so: &#x60;order_by&#x3D;My Field,Field with \\\&quot;&#x60;.
     * @type {string}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly orderBy?: string;
    /**
     * Defines which page of rows should be returned.
     * @type {number}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly page?: number;
    /**
     * If provided only rows with data that matches the search query are going to be returned.
     * @type {string}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly searchMode?: string;
    /**
     * Defines how many rows should be returned per page.
     * @type {number}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly size?: number;
    /**
     * A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @type {boolean}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly userFieldNames?: boolean;
    /**
     * Includes all the filters and sorts of the provided view.
     * @type {number}
     * @memberof DatabaseTableRowsApiListDatabaseTableRows
     */
    readonly viewId?: number;
}
/**
 * Request parameters for moveDatabaseTableRow operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiMoveDatabaseTableRowRequest
 */
export interface DatabaseTableRowsApiMoveDatabaseTableRowRequest {
    /**
     * Moves the row related to the value.
     * @type {number}
     * @memberof DatabaseTableRowsApiMoveDatabaseTableRow
     */
    readonly rowId: number;
    /**
     * Moves the row in the table related to the value.
     * @type {number}
     * @memberof DatabaseTableRowsApiMoveDatabaseTableRow
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableRowsApiMoveDatabaseTableRow
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableRowsApiMoveDatabaseTableRow
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     * Moves the row related to the given &#x60;row_id&#x60; before the row related to the provided value. If not provided, then the row will be moved to the end.
     * @type {number}
     * @memberof DatabaseTableRowsApiMoveDatabaseTableRow
     */
    readonly beforeId?: number;
    /**
     * A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @type {boolean}
     * @memberof DatabaseTableRowsApiMoveDatabaseTableRow
     */
    readonly userFieldNames?: boolean;
}
/**
 * Request parameters for updateDatabaseTableRow operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiUpdateDatabaseTableRowRequest
 */
export interface DatabaseTableRowsApiUpdateDatabaseTableRowRequest {
    /**
     * Updates the row related to the value.
     * @type {number}
     * @memberof DatabaseTableRowsApiUpdateDatabaseTableRow
     */
    readonly rowId: number;
    /**
     * Updates the row in the table related to the value.
     * @type {number}
     * @memberof DatabaseTableRowsApiUpdateDatabaseTableRow
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableRowsApiUpdateDatabaseTableRow
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableRowsApiUpdateDatabaseTableRow
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     * A flag query parameter that, if provided with one of the following values: &#x60;y&#x60;, &#x60;yes&#x60;, &#x60;true&#x60;, &#x60;t&#x60;, &#x60;on&#x60;, &#x60;1&#x60;, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123).
     * @type {boolean}
     * @memberof DatabaseTableRowsApiUpdateDatabaseTableRow
     */
    readonly userFieldNames?: boolean;
    /**
     *
     * @type {PatchedExampleUpdateRowRequestSerializerWithUserFieldNames}
     * @memberof DatabaseTableRowsApiUpdateDatabaseTableRow
     */
    readonly patchedExampleUpdateRowRequestSerializerWithUserFieldNames?: PatchedExampleUpdateRowRequestSerializerWithUserFieldNames;
}
/**
 * Request parameters for updateRowComment operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiUpdateRowCommentRequest
 */
export interface DatabaseTableRowsApiUpdateRowCommentRequest {
    /**
     * The row comment to update.
     * @type {number}
     * @memberof DatabaseTableRowsApiUpdateRowComment
     */
    readonly commentId: number;
    /**
     * The table the row is in.
     * @type {number}
     * @memberof DatabaseTableRowsApiUpdateRowComment
     */
    readonly tableId: number;
}
/**
 * Request parameters for updateRowCommentNotificationMode operation in DatabaseTableRowsApi.
 * @export
 * @interface DatabaseTableRowsApiUpdateRowCommentNotificationModeRequest
 */
export interface DatabaseTableRowsApiUpdateRowCommentNotificationModeRequest {
    /**
     * The row on which to manage the comment subscription.
     * @type {number}
     * @memberof DatabaseTableRowsApiUpdateRowCommentNotificationMode
     */
    readonly rowId: number;
    /**
     * The table id where the row is in.
     * @type {number}
     * @memberof DatabaseTableRowsApiUpdateRowCommentNotificationMode
     */
    readonly tableId: number;
    /**
     *
     * @type {RowCommentsNotificationMode}
     * @memberof DatabaseTableRowsApiUpdateRowCommentNotificationMode
     */
    readonly rowCommentsNotificationMode: RowCommentsNotificationMode;
}
/**
 * DatabaseTableRowsApi - object-oriented interface
 * @export
 * @class DatabaseTableRowsApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableRowsApi extends BaseAPI {
    /**
     * Creates new rows in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.   **WARNING:** This endpoint doesn\'t yet work with row created webhooks.
     * @param {DatabaseTableRowsApiBatchCreateDatabaseTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    batchCreateDatabaseTableRows(requestParameters: DatabaseTableRowsApiBatchCreateDatabaseTableRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExampleBatchRowsResponse, any>>;
    /**
     * Deletes existing rows in the table if the user has access to the table\'s workspace.   **WARNING:**  This endpoint doesn\'t yet work with row deleted webhooks.
     * @param {DatabaseTableRowsApiBatchDeleteDatabaseTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    batchDeleteDatabaseTableRows(requestParameters: DatabaseTableRowsApiBatchDeleteDatabaseTableRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates existing rows in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided for each row. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.   **WARNING:** This endpoint doesn\'t yet work with row updated webhooks.
     * @param {DatabaseTableRowsApiBatchUpdateDatabaseTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    batchUpdateDatabaseTableRows(requestParameters: DatabaseTableRowsApiBatchUpdateDatabaseTableRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExampleBatchRowsResponse, any>>;
    /**
     * Creates a new row in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * @param {DatabaseTableRowsApiCreateDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    createDatabaseTableRow(requestParameters: DatabaseTableRowsApiCreateDatabaseTableRowRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExampleRowResponseSerializerWithUserFieldNames, any>>;
    /**
     * Creates a comment on the specified row.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiCreateRowCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    createRowComment(requestParameters: DatabaseTableRowsApiCreateRowCommentRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RowComment, any>>;
    /**
     * Deletes an existing row in the table if the user has access to the table\'s workspace.
     * @param {DatabaseTableRowsApiDeleteDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    deleteDatabaseTableRow(requestParameters: DatabaseTableRowsApiDeleteDatabaseTableRowRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a row comment.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiDeleteRowCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    deleteRowComment(requestParameters: DatabaseTableRowsApiDeleteRowCommentRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RowComment, any>>;
    /**
     * Fetches the adjacent row to a given row_id in the table with the given table_id. If the previous flag is set it will return the previous row, otherwise it will return the next row. You can specifya view_id and it will apply the filters and sorts of the provided view.
     * @param {DatabaseTableRowsApiGetAdjacentDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    getAdjacentDatabaseTableRow(requestParameters: DatabaseTableRowsApiGetAdjacentDatabaseTableRowRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExampleRowResponseSerializerWithUserFieldNames, any>>;
    /**
     * Fetches an existing row from the table if the user has access to the related table\'s workspace. The properties of the returned row depend on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableRowsApiGetDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    getDatabaseTableRow(requestParameters: DatabaseTableRowsApiGetDatabaseTableRowRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExampleRowResponseSerializerWithUserFieldNames, any>>;
    /**
     * Fetches the row change history of a given row_id in the table with the given table_id. The row change history is paginated and can be limited with the limit and offset query parameters.
     * @param {DatabaseTableRowsApiGetDatabaseTableRowHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    getDatabaseTableRowHistory(requestParameters: DatabaseTableRowsApiGetDatabaseTableRowHistoryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerRowHistory, any>>;
    /**
     * Returns all row comments for the specified table and row.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiGetRowCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    getRowComments(requestParameters: DatabaseTableRowsApiGetRowCommentsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerRowComment, any>>;
    /**
     * Returns the names of the given row of the given tables. The nameof a row is the primary field value for this row. The result can be usedfor example, when you want to display the name of a linked row from another table.
     * @param {DatabaseTableRowsApiListDatabaseTableRowNamesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    listDatabaseTableRowNames(requestParameters?: DatabaseTableRowsApiListDatabaseTableRowNamesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListDatabaseTableRowNames200Response, any>>;
    /**
     * Lists all the rows of the table related to the provided parameter if the user has access to the related database\'s workspace. The response is paginated by a page/size style. It is also possible to provide an optional search query, only rows where the data matches the search query are going to be returned then. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.
     * @param {DatabaseTableRowsApiListDatabaseTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    listDatabaseTableRows(requestParameters: DatabaseTableRowsApiListDatabaseTableRowsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerExampleRowResponseSerializerWithUserFieldNames, any>>;
    /**
     * Moves the row related to given `row_id` parameter to another position. It is only possible to move the row before another existing row or to the end. If the `before_id` is provided then the row related to the `row_id` parameter is moved before that row. If the `before_id` parameter is not provided, then the row will be moved to the end.
     * @param {DatabaseTableRowsApiMoveDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    moveDatabaseTableRow(requestParameters: DatabaseTableRowsApiMoveDatabaseTableRowRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExampleRowResponseSerializerWithUserFieldNames, any>>;
    /**
     * Updates an existing row in the table if the user has access to the related table\'s workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * @param {DatabaseTableRowsApiUpdateDatabaseTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    updateDatabaseTableRow(requestParameters: DatabaseTableRowsApiUpdateDatabaseTableRowRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExampleRowResponseSerializerWithUserFieldNames, any>>;
    /**
     * Update a row comment.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiUpdateRowCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    updateRowComment(requestParameters: DatabaseTableRowsApiUpdateRowCommentRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RowComment, any>>;
    /**
     * Updates the user\'s notification preferences for comments made on a specified table row.  This is a **premium** feature.
     * @param {DatabaseTableRowsApiUpdateRowCommentNotificationModeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableRowsApi
     */
    updateRowCommentNotificationMode(requestParameters: DatabaseTableRowsApiUpdateRowCommentNotificationModeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * DatabaseTableViewDecorationsApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableViewDecorationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new decoration for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace.
     * @param {number} viewId Creates a decoration for the view related to the given value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {DecoratorValueProviderTypeCreateViewDecoration} [decoratorValueProviderTypeCreateViewDecoration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewDecoration: (viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, decoratorValueProviderTypeCreateViewDecoration?: DecoratorValueProviderTypeCreateViewDecoration, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing decoration if the authorized user has access to the related database\'s workspace.
     * @param {number} viewDecorationId Deletes the decoration related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewDecoration: (viewDecorationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the existing view decoration if the current user has access to the related database\'s workspace.
     * @param {number} viewDecorationId Returns the view decoration related to the provided id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewDecoration: (viewDecorationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all decorations of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple decorations. View decorators can be used to decorate rows. This can, for example, be used to change the border or background color of a row if it matches certain conditions.
     * @param {number} viewId Returns only decoration of the view given to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewDecorations: (viewId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing decoration if the authorized user has access to the related database\'s workspace.
     * @param {number} viewDecorationId Updates the view decoration related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedDecoratorValueProviderTypeUpdateViewDecoration} [patchedDecoratorValueProviderTypeUpdateViewDecoration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewDecoration: (viewDecorationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedDecoratorValueProviderTypeUpdateViewDecoration?: PatchedDecoratorValueProviderTypeUpdateViewDecoration, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableViewDecorationsApi - functional programming interface
 * @export
 */
export declare const DatabaseTableViewDecorationsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new decoration for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace.
     * @param {number} viewId Creates a decoration for the view related to the given value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {DecoratorValueProviderTypeCreateViewDecoration} [decoratorValueProviderTypeCreateViewDecoration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewDecoration(viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, decoratorValueProviderTypeCreateViewDecoration?: DecoratorValueProviderTypeCreateViewDecoration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecoratorValueProviderTypeViewDecoration>>;
    /**
     * Deletes the existing decoration if the authorized user has access to the related database\'s workspace.
     * @param {number} viewDecorationId Deletes the decoration related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewDecoration(viewDecorationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the existing view decoration if the current user has access to the related database\'s workspace.
     * @param {number} viewDecorationId Returns the view decoration related to the provided id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewDecoration(viewDecorationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecoratorValueProviderTypeViewDecoration>>;
    /**
     * Lists all decorations of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple decorations. View decorators can be used to decorate rows. This can, for example, be used to change the border or background color of a row if it matches certain conditions.
     * @param {number} viewId Returns only decoration of the view given to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewDecorations(viewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DecoratorValueProviderTypeViewDecoration>>>;
    /**
     * Updates the existing decoration if the authorized user has access to the related database\'s workspace.
     * @param {number} viewDecorationId Updates the view decoration related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedDecoratorValueProviderTypeUpdateViewDecoration} [patchedDecoratorValueProviderTypeUpdateViewDecoration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewDecoration(viewDecorationId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedDecoratorValueProviderTypeUpdateViewDecoration?: PatchedDecoratorValueProviderTypeUpdateViewDecoration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecoratorValueProviderTypeViewDecoration>>;
};
/**
 * DatabaseTableViewDecorationsApi - factory interface
 * @export
 */
export declare const DatabaseTableViewDecorationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new decoration for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewDecoration(requestParameters: DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecorationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DecoratorValueProviderTypeViewDecoration>;
    /**
     * Deletes the existing decoration if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewDecorationsApiDeleteDatabaseTableViewDecorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewDecoration(requestParameters: DatabaseTableViewDecorationsApiDeleteDatabaseTableViewDecorationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns the existing view decoration if the current user has access to the related database\'s workspace.
     * @param {DatabaseTableViewDecorationsApiGetDatabaseTableViewDecorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewDecoration(requestParameters: DatabaseTableViewDecorationsApiGetDatabaseTableViewDecorationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DecoratorValueProviderTypeViewDecoration>;
    /**
     * Lists all decorations of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple decorations. View decorators can be used to decorate rows. This can, for example, be used to change the border or background color of a row if it matches certain conditions.
     * @param {DatabaseTableViewDecorationsApiListDatabaseTableViewDecorationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewDecorations(requestParameters: DatabaseTableViewDecorationsApiListDatabaseTableViewDecorationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<DecoratorValueProviderTypeViewDecoration>>;
    /**
     * Updates the existing decoration if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewDecoration(requestParameters: DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecorationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DecoratorValueProviderTypeViewDecoration>;
};
/**
 * Request parameters for createDatabaseTableViewDecoration operation in DatabaseTableViewDecorationsApi.
 * @export
 * @interface DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecorationRequest
 */
export interface DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecorationRequest {
    /**
     * Creates a decoration for the view related to the given value.
     * @type {number}
     * @memberof DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecoration
     */
    readonly viewId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecoration
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecoration
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {DecoratorValueProviderTypeCreateViewDecoration}
     * @memberof DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecoration
     */
    readonly decoratorValueProviderTypeCreateViewDecoration?: DecoratorValueProviderTypeCreateViewDecoration;
}
/**
 * Request parameters for deleteDatabaseTableViewDecoration operation in DatabaseTableViewDecorationsApi.
 * @export
 * @interface DatabaseTableViewDecorationsApiDeleteDatabaseTableViewDecorationRequest
 */
export interface DatabaseTableViewDecorationsApiDeleteDatabaseTableViewDecorationRequest {
    /**
     * Deletes the decoration related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewDecorationsApiDeleteDatabaseTableViewDecoration
     */
    readonly viewDecorationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewDecorationsApiDeleteDatabaseTableViewDecoration
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewDecorationsApiDeleteDatabaseTableViewDecoration
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for getDatabaseTableViewDecoration operation in DatabaseTableViewDecorationsApi.
 * @export
 * @interface DatabaseTableViewDecorationsApiGetDatabaseTableViewDecorationRequest
 */
export interface DatabaseTableViewDecorationsApiGetDatabaseTableViewDecorationRequest {
    /**
     * Returns the view decoration related to the provided id.
     * @type {number}
     * @memberof DatabaseTableViewDecorationsApiGetDatabaseTableViewDecoration
     */
    readonly viewDecorationId: number;
}
/**
 * Request parameters for listDatabaseTableViewDecorations operation in DatabaseTableViewDecorationsApi.
 * @export
 * @interface DatabaseTableViewDecorationsApiListDatabaseTableViewDecorationsRequest
 */
export interface DatabaseTableViewDecorationsApiListDatabaseTableViewDecorationsRequest {
    /**
     * Returns only decoration of the view given to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewDecorationsApiListDatabaseTableViewDecorations
     */
    readonly viewId: number;
}
/**
 * Request parameters for updateDatabaseTableViewDecoration operation in DatabaseTableViewDecorationsApi.
 * @export
 * @interface DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecorationRequest
 */
export interface DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecorationRequest {
    /**
     * Updates the view decoration related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecoration
     */
    readonly viewDecorationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecoration
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecoration
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedDecoratorValueProviderTypeUpdateViewDecoration}
     * @memberof DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecoration
     */
    readonly patchedDecoratorValueProviderTypeUpdateViewDecoration?: PatchedDecoratorValueProviderTypeUpdateViewDecoration;
}
/**
 * DatabaseTableViewDecorationsApi - object-oriented interface
 * @export
 * @class DatabaseTableViewDecorationsApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableViewDecorationsApi extends BaseAPI {
    /**
     * Creates a new decoration for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewDecorationsApi
     */
    createDatabaseTableViewDecoration(requestParameters: DatabaseTableViewDecorationsApiCreateDatabaseTableViewDecorationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DecoratorValueProviderTypeViewDecoration, any>>;
    /**
     * Deletes the existing decoration if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewDecorationsApiDeleteDatabaseTableViewDecorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewDecorationsApi
     */
    deleteDatabaseTableViewDecoration(requestParameters: DatabaseTableViewDecorationsApiDeleteDatabaseTableViewDecorationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the existing view decoration if the current user has access to the related database\'s workspace.
     * @param {DatabaseTableViewDecorationsApiGetDatabaseTableViewDecorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewDecorationsApi
     */
    getDatabaseTableViewDecoration(requestParameters: DatabaseTableViewDecorationsApiGetDatabaseTableViewDecorationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DecoratorValueProviderTypeViewDecoration, any>>;
    /**
     * Lists all decorations of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple decorations. View decorators can be used to decorate rows. This can, for example, be used to change the border or background color of a row if it matches certain conditions.
     * @param {DatabaseTableViewDecorationsApiListDatabaseTableViewDecorationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewDecorationsApi
     */
    listDatabaseTableViewDecorations(requestParameters: DatabaseTableViewDecorationsApiListDatabaseTableViewDecorationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DecoratorValueProviderTypeViewDecoration[], any>>;
    /**
     * Updates the existing decoration if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewDecorationsApi
     */
    updateDatabaseTableViewDecoration(requestParameters: DatabaseTableViewDecorationsApiUpdateDatabaseTableViewDecorationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DecoratorValueProviderTypeViewDecoration, any>>;
}
/**
 * DatabaseTableViewFiltersApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableViewFiltersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new filter for the view related to the provided `view_id` parameter. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, then only the rows that apply to all the filters are going to be returned. A filter compares the value of a field to the value of a filter. It depends on the type how values are going to be compared.
     * @param {number} viewId Creates a filter for the view related to the provided value.
     * @param {CreateViewFilter} createViewFilter
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewFilter: (viewId: number, createViewFilter: CreateViewFilter, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new filter group for the view related to the provided `view_id` parameter.
     * @param {number} viewId The ID of the view where create the new filter group.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {CreateViewFilterGroup} [createViewFilterGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewFilterGroup: (viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, createViewFilterGroup?: CreateViewFilterGroup, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing filter if the authorized user has access to the related database\'s workspace.
     * @param {number} viewFilterId The ID of the view filter to delete.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewFilter: (viewFilterId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing filter group with the given `view_filter_group_id`.
     * @param {string} filterGroupId
     * @param {number} viewFilterGroupId The ID of the view filter group to delete.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewFilterGroup: (filterGroupId: string, viewFilterGroupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the existing view filter.
     * @param {number} viewFilterId The ID of the view filter to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewFilter: (viewFilterId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the existing view filter group with the given `view_filter_group_id`.
     * @param {string} filterGroupId
     * @param {number} viewFilterGroupId Teh ID of the view filter group to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewFilterGroup: (filterGroupId: string, viewFilterGroupId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all filters of the view related to the provided `view_id`. A view can have multiple filters. When all the rows are requested for the view only those that apply to the filters are returned.
     * @param {number} viewId Returns only filters of the view related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewFilters: (viewId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing filter.
     * @param {number} viewFilterId The ID of the view filter to update.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedUpdateViewFilter} [patchedUpdateViewFilter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewFilter: (viewFilterId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedUpdateViewFilter?: PatchedUpdateViewFilter, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing filter group with the given `view_filter_group_id`.
     * @param {string} filterGroupId
     * @param {number} viewFilterGroupId The ID of the view filter group to update.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedUpdateViewFilterGroup} [patchedUpdateViewFilterGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewFilterGroup: (filterGroupId: string, viewFilterGroupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedUpdateViewFilterGroup?: PatchedUpdateViewFilterGroup, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableViewFiltersApi - functional programming interface
 * @export
 */
export declare const DatabaseTableViewFiltersApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new filter for the view related to the provided `view_id` parameter. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, then only the rows that apply to all the filters are going to be returned. A filter compares the value of a field to the value of a filter. It depends on the type how values are going to be compared.
     * @param {number} viewId Creates a filter for the view related to the provided value.
     * @param {CreateViewFilter} createViewFilter
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewFilter(viewId: number, createViewFilter: CreateViewFilter, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewFilter>>;
    /**
     * Creates a new filter group for the view related to the provided `view_id` parameter.
     * @param {number} viewId The ID of the view where create the new filter group.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {CreateViewFilterGroup} [createViewFilterGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewFilterGroup(viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, createViewFilterGroup?: CreateViewFilterGroup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewFilterGroup>>;
    /**
     * Deletes the existing filter if the authorized user has access to the related database\'s workspace.
     * @param {number} viewFilterId The ID of the view filter to delete.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewFilter(viewFilterId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes the existing filter group with the given `view_filter_group_id`.
     * @param {string} filterGroupId
     * @param {number} viewFilterGroupId The ID of the view filter group to delete.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewFilterGroup(filterGroupId: string, viewFilterGroupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the existing view filter.
     * @param {number} viewFilterId The ID of the view filter to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewFilter(viewFilterId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewFilter>>;
    /**
     * Returns the existing view filter group with the given `view_filter_group_id`.
     * @param {string} filterGroupId
     * @param {number} viewFilterGroupId Teh ID of the view filter group to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewFilterGroup(filterGroupId: string, viewFilterGroupId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewFilterGroup>>;
    /**
     * Lists all filters of the view related to the provided `view_id`. A view can have multiple filters. When all the rows are requested for the view only those that apply to the filters are returned.
     * @param {number} viewId Returns only filters of the view related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewFilters(viewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewFilter>>>;
    /**
     * Updates the existing filter.
     * @param {number} viewFilterId The ID of the view filter to update.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedUpdateViewFilter} [patchedUpdateViewFilter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewFilter(viewFilterId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedUpdateViewFilter?: PatchedUpdateViewFilter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewFilter>>;
    /**
     * Updates the existing filter group with the given `view_filter_group_id`.
     * @param {string} filterGroupId
     * @param {number} viewFilterGroupId The ID of the view filter group to update.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedUpdateViewFilterGroup} [patchedUpdateViewFilterGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewFilterGroup(filterGroupId: string, viewFilterGroupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedUpdateViewFilterGroup?: PatchedUpdateViewFilterGroup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewFilterGroup>>;
};
/**
 * DatabaseTableViewFiltersApi - factory interface
 * @export
 */
export declare const DatabaseTableViewFiltersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new filter for the view related to the provided `view_id` parameter. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, then only the rows that apply to all the filters are going to be returned. A filter compares the value of a field to the value of a filter. It depends on the type how values are going to be compared.
     * @param {DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewFilter(requestParameters: DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewFilter>;
    /**
     * Creates a new filter group for the view related to the provided `view_id` parameter.
     * @param {DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewFilterGroup(requestParameters: DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewFilterGroup>;
    /**
     * Deletes the existing filter if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewFilter(requestParameters: DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes the existing filter group with the given `view_filter_group_id`.
     * @param {DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewFilterGroup(requestParameters: DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns the existing view filter.
     * @param {DatabaseTableViewFiltersApiGetDatabaseTableViewFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewFilter(requestParameters: DatabaseTableViewFiltersApiGetDatabaseTableViewFilterRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewFilter>;
    /**
     * Returns the existing view filter group with the given `view_filter_group_id`.
     * @param {DatabaseTableViewFiltersApiGetDatabaseTableViewFilterGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewFilterGroup(requestParameters: DatabaseTableViewFiltersApiGetDatabaseTableViewFilterGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewFilterGroup>;
    /**
     * Lists all filters of the view related to the provided `view_id`. A view can have multiple filters. When all the rows are requested for the view only those that apply to the filters are returned.
     * @param {DatabaseTableViewFiltersApiListDatabaseTableViewFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewFilters(requestParameters: DatabaseTableViewFiltersApiListDatabaseTableViewFiltersRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ViewFilter>>;
    /**
     * Updates the existing filter.
     * @param {DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewFilter(requestParameters: DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewFilter>;
    /**
     * Updates the existing filter group with the given `view_filter_group_id`.
     * @param {DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewFilterGroup(requestParameters: DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewFilterGroup>;
};
/**
 * Request parameters for createDatabaseTableViewFilter operation in DatabaseTableViewFiltersApi.
 * @export
 * @interface DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterRequest
 */
export interface DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterRequest {
    /**
     * Creates a filter for the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewFiltersApiCreateDatabaseTableViewFilter
     */
    readonly viewId: number;
    /**
     *
     * @type {CreateViewFilter}
     * @memberof DatabaseTableViewFiltersApiCreateDatabaseTableViewFilter
     */
    readonly createViewFilter: CreateViewFilter;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiCreateDatabaseTableViewFilter
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiCreateDatabaseTableViewFilter
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for createDatabaseTableViewFilterGroup operation in DatabaseTableViewFiltersApi.
 * @export
 * @interface DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroupRequest
 */
export interface DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroupRequest {
    /**
     * The ID of the view where create the new filter group.
     * @type {number}
     * @memberof DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroup
     */
    readonly viewId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroup
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroup
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {CreateViewFilterGroup}
     * @memberof DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroup
     */
    readonly createViewFilterGroup?: CreateViewFilterGroup;
}
/**
 * Request parameters for deleteDatabaseTableViewFilter operation in DatabaseTableViewFiltersApi.
 * @export
 * @interface DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterRequest
 */
export interface DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterRequest {
    /**
     * The ID of the view filter to delete.
     * @type {number}
     * @memberof DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilter
     */
    readonly viewFilterId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilter
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilter
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for deleteDatabaseTableViewFilterGroup operation in DatabaseTableViewFiltersApi.
 * @export
 * @interface DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroupRequest
 */
export interface DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroupRequest {
    /**
     *
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroup
     */
    readonly filterGroupId: string;
    /**
     * The ID of the view filter group to delete.
     * @type {number}
     * @memberof DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroup
     */
    readonly viewFilterGroupId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroup
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroup
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for getDatabaseTableViewFilter operation in DatabaseTableViewFiltersApi.
 * @export
 * @interface DatabaseTableViewFiltersApiGetDatabaseTableViewFilterRequest
 */
export interface DatabaseTableViewFiltersApiGetDatabaseTableViewFilterRequest {
    /**
     * The ID of the view filter to return.
     * @type {number}
     * @memberof DatabaseTableViewFiltersApiGetDatabaseTableViewFilter
     */
    readonly viewFilterId: number;
}
/**
 * Request parameters for getDatabaseTableViewFilterGroup operation in DatabaseTableViewFiltersApi.
 * @export
 * @interface DatabaseTableViewFiltersApiGetDatabaseTableViewFilterGroupRequest
 */
export interface DatabaseTableViewFiltersApiGetDatabaseTableViewFilterGroupRequest {
    /**
     *
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiGetDatabaseTableViewFilterGroup
     */
    readonly filterGroupId: string;
    /**
     * Teh ID of the view filter group to return.
     * @type {number}
     * @memberof DatabaseTableViewFiltersApiGetDatabaseTableViewFilterGroup
     */
    readonly viewFilterGroupId: number;
}
/**
 * Request parameters for listDatabaseTableViewFilters operation in DatabaseTableViewFiltersApi.
 * @export
 * @interface DatabaseTableViewFiltersApiListDatabaseTableViewFiltersRequest
 */
export interface DatabaseTableViewFiltersApiListDatabaseTableViewFiltersRequest {
    /**
     * Returns only filters of the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewFiltersApiListDatabaseTableViewFilters
     */
    readonly viewId: number;
}
/**
 * Request parameters for updateDatabaseTableViewFilter operation in DatabaseTableViewFiltersApi.
 * @export
 * @interface DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterRequest
 */
export interface DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterRequest {
    /**
     * The ID of the view filter to update.
     * @type {number}
     * @memberof DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilter
     */
    readonly viewFilterId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilter
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilter
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedUpdateViewFilter}
     * @memberof DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilter
     */
    readonly patchedUpdateViewFilter?: PatchedUpdateViewFilter;
}
/**
 * Request parameters for updateDatabaseTableViewFilterGroup operation in DatabaseTableViewFiltersApi.
 * @export
 * @interface DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroupRequest
 */
export interface DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroupRequest {
    /**
     *
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroup
     */
    readonly filterGroupId: string;
    /**
     * The ID of the view filter group to update.
     * @type {number}
     * @memberof DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroup
     */
    readonly viewFilterGroupId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroup
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroup
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedUpdateViewFilterGroup}
     * @memberof DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroup
     */
    readonly patchedUpdateViewFilterGroup?: PatchedUpdateViewFilterGroup;
}
/**
 * DatabaseTableViewFiltersApi - object-oriented interface
 * @export
 * @class DatabaseTableViewFiltersApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableViewFiltersApi extends BaseAPI {
    /**
     * Creates a new filter for the view related to the provided `view_id` parameter. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, then only the rows that apply to all the filters are going to be returned. A filter compares the value of a field to the value of a filter. It depends on the type how values are going to be compared.
     * @param {DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewFiltersApi
     */
    createDatabaseTableViewFilter(requestParameters: DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewFilter, any>>;
    /**
     * Creates a new filter group for the view related to the provided `view_id` parameter.
     * @param {DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewFiltersApi
     */
    createDatabaseTableViewFilterGroup(requestParameters: DatabaseTableViewFiltersApiCreateDatabaseTableViewFilterGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewFilterGroup, any>>;
    /**
     * Deletes the existing filter if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewFiltersApi
     */
    deleteDatabaseTableViewFilter(requestParameters: DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes the existing filter group with the given `view_filter_group_id`.
     * @param {DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewFiltersApi
     */
    deleteDatabaseTableViewFilterGroup(requestParameters: DatabaseTableViewFiltersApiDeleteDatabaseTableViewFilterGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the existing view filter.
     * @param {DatabaseTableViewFiltersApiGetDatabaseTableViewFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewFiltersApi
     */
    getDatabaseTableViewFilter(requestParameters: DatabaseTableViewFiltersApiGetDatabaseTableViewFilterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewFilter, any>>;
    /**
     * Returns the existing view filter group with the given `view_filter_group_id`.
     * @param {DatabaseTableViewFiltersApiGetDatabaseTableViewFilterGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewFiltersApi
     */
    getDatabaseTableViewFilterGroup(requestParameters: DatabaseTableViewFiltersApiGetDatabaseTableViewFilterGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewFilterGroup, any>>;
    /**
     * Lists all filters of the view related to the provided `view_id`. A view can have multiple filters. When all the rows are requested for the view only those that apply to the filters are returned.
     * @param {DatabaseTableViewFiltersApiListDatabaseTableViewFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewFiltersApi
     */
    listDatabaseTableViewFilters(requestParameters: DatabaseTableViewFiltersApiListDatabaseTableViewFiltersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewFilter[], any>>;
    /**
     * Updates the existing filter.
     * @param {DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewFiltersApi
     */
    updateDatabaseTableViewFilter(requestParameters: DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewFilter, any>>;
    /**
     * Updates the existing filter group with the given `view_filter_group_id`.
     * @param {DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewFiltersApi
     */
    updateDatabaseTableViewFilterGroup(requestParameters: DatabaseTableViewFiltersApiUpdateDatabaseTableViewFilterGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewFilterGroup, any>>;
}
/**
 * DatabaseTableViewGroupingsApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableViewGroupingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new group by for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace.
     * @param {number} viewId Creates a group by for the view related to the provided value.
     * @param {CreateViewGroupBy} createViewGroupBy
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewGroup: (viewId: number, createViewGroupBy: CreateViewGroupBy, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing group by if the authorized user has access to the related database\'s workspace.
     * @param {number} viewGroupById Deletes the group by related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewGroup: (viewGroupById: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the existing view group by if the authorized user has access to the related database\'s workspace.
     * @param {number} viewGroupById Returns the view group by related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewGroup: (viewGroupById: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all groupings of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple groupings.
     * @param {number} viewId Returns only groupings of the view related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewGroupings: (viewId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing group by if the authorized user has access to the related database\'s workspace.
     * @param {number} viewGroupById Updates the view group by related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedUpdateViewGroupBy} [patchedUpdateViewGroupBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewGroup: (viewGroupById: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedUpdateViewGroupBy?: PatchedUpdateViewGroupBy, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableViewGroupingsApi - functional programming interface
 * @export
 */
export declare const DatabaseTableViewGroupingsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new group by for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace.
     * @param {number} viewId Creates a group by for the view related to the provided value.
     * @param {CreateViewGroupBy} createViewGroupBy
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewGroup(viewId: number, createViewGroupBy: CreateViewGroupBy, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewGroupBy>>;
    /**
     * Deletes the existing group by if the authorized user has access to the related database\'s workspace.
     * @param {number} viewGroupById Deletes the group by related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewGroup(viewGroupById: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the existing view group by if the authorized user has access to the related database\'s workspace.
     * @param {number} viewGroupById Returns the view group by related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewGroup(viewGroupById: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewGroupBy>>;
    /**
     * Lists all groupings of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple groupings.
     * @param {number} viewId Returns only groupings of the view related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewGroupings(viewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewGroupBy>>>;
    /**
     * Updates the existing group by if the authorized user has access to the related database\'s workspace.
     * @param {number} viewGroupById Updates the view group by related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedUpdateViewGroupBy} [patchedUpdateViewGroupBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewGroup(viewGroupById: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedUpdateViewGroupBy?: PatchedUpdateViewGroupBy, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewGroupBy>>;
};
/**
 * DatabaseTableViewGroupingsApi - factory interface
 * @export
 */
export declare const DatabaseTableViewGroupingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new group by for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewGroup(requestParameters: DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewGroupBy>;
    /**
     * Deletes the existing group by if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewGroupingsApiDeleteDatabaseTableViewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewGroup(requestParameters: DatabaseTableViewGroupingsApiDeleteDatabaseTableViewGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns the existing view group by if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewGroupingsApiGetDatabaseTableViewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewGroup(requestParameters: DatabaseTableViewGroupingsApiGetDatabaseTableViewGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewGroupBy>;
    /**
     * Lists all groupings of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple groupings.
     * @param {DatabaseTableViewGroupingsApiListDatabaseTableViewGroupingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewGroupings(requestParameters: DatabaseTableViewGroupingsApiListDatabaseTableViewGroupingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ViewGroupBy>>;
    /**
     * Updates the existing group by if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewGroup(requestParameters: DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewGroupBy>;
};
/**
 * Request parameters for createDatabaseTableViewGroup operation in DatabaseTableViewGroupingsApi.
 * @export
 * @interface DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroupRequest
 */
export interface DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroupRequest {
    /**
     * Creates a group by for the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroup
     */
    readonly viewId: number;
    /**
     *
     * @type {CreateViewGroupBy}
     * @memberof DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroup
     */
    readonly createViewGroupBy: CreateViewGroupBy;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroup
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroup
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for deleteDatabaseTableViewGroup operation in DatabaseTableViewGroupingsApi.
 * @export
 * @interface DatabaseTableViewGroupingsApiDeleteDatabaseTableViewGroupRequest
 */
export interface DatabaseTableViewGroupingsApiDeleteDatabaseTableViewGroupRequest {
    /**
     * Deletes the group by related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewGroupingsApiDeleteDatabaseTableViewGroup
     */
    readonly viewGroupById: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewGroupingsApiDeleteDatabaseTableViewGroup
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewGroupingsApiDeleteDatabaseTableViewGroup
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for getDatabaseTableViewGroup operation in DatabaseTableViewGroupingsApi.
 * @export
 * @interface DatabaseTableViewGroupingsApiGetDatabaseTableViewGroupRequest
 */
export interface DatabaseTableViewGroupingsApiGetDatabaseTableViewGroupRequest {
    /**
     * Returns the view group by related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewGroupingsApiGetDatabaseTableViewGroup
     */
    readonly viewGroupById: number;
}
/**
 * Request parameters for listDatabaseTableViewGroupings operation in DatabaseTableViewGroupingsApi.
 * @export
 * @interface DatabaseTableViewGroupingsApiListDatabaseTableViewGroupingsRequest
 */
export interface DatabaseTableViewGroupingsApiListDatabaseTableViewGroupingsRequest {
    /**
     * Returns only groupings of the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewGroupingsApiListDatabaseTableViewGroupings
     */
    readonly viewId: number;
}
/**
 * Request parameters for updateDatabaseTableViewGroup operation in DatabaseTableViewGroupingsApi.
 * @export
 * @interface DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroupRequest
 */
export interface DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroupRequest {
    /**
     * Updates the view group by related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroup
     */
    readonly viewGroupById: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroup
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroup
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedUpdateViewGroupBy}
     * @memberof DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroup
     */
    readonly patchedUpdateViewGroupBy?: PatchedUpdateViewGroupBy;
}
/**
 * DatabaseTableViewGroupingsApi - object-oriented interface
 * @export
 * @class DatabaseTableViewGroupingsApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableViewGroupingsApi extends BaseAPI {
    /**
     * Creates a new group by for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewGroupingsApi
     */
    createDatabaseTableViewGroup(requestParameters: DatabaseTableViewGroupingsApiCreateDatabaseTableViewGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewGroupBy, any>>;
    /**
     * Deletes the existing group by if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewGroupingsApiDeleteDatabaseTableViewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewGroupingsApi
     */
    deleteDatabaseTableViewGroup(requestParameters: DatabaseTableViewGroupingsApiDeleteDatabaseTableViewGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the existing view group by if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewGroupingsApiGetDatabaseTableViewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewGroupingsApi
     */
    getDatabaseTableViewGroup(requestParameters: DatabaseTableViewGroupingsApiGetDatabaseTableViewGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewGroupBy, any>>;
    /**
     * Lists all groupings of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple groupings.
     * @param {DatabaseTableViewGroupingsApiListDatabaseTableViewGroupingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewGroupingsApi
     */
    listDatabaseTableViewGroupings(requestParameters: DatabaseTableViewGroupingsApiListDatabaseTableViewGroupingsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewGroupBy[], any>>;
    /**
     * Updates the existing group by if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewGroupingsApi
     */
    updateDatabaseTableViewGroup(requestParameters: DatabaseTableViewGroupingsApiUpdateDatabaseTableViewGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewGroupBy, any>>;
}
/**
 * DatabaseTableViewSortingsApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableViewSortingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new sort for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, they will be returned in the respected order defined by all the sortings.
     * @param {number} viewId Creates a sort for the view related to the provided value.
     * @param {CreateViewSort} createViewSort
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewSort: (viewId: number, createViewSort: CreateViewSort, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing sort if the authorized user has access to the related database\'s workspace.
     * @param {number} viewSortId Deletes the sort related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewSort: (viewSortId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the existing view sort if the authorized user has access to the related database\'s workspace.
     * @param {number} viewSortId Returns the view sort related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewSort: (viewSortId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all sortings of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple sortings. When all the rows are requested they will be in the desired order.
     * @param {number} viewId Returns only sortings of the view related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewSortings: (viewId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing sort if the authorized user has access to the related database\'s workspace.
     * @param {number} viewSortId Updates the view sort related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedUpdateViewSort} [patchedUpdateViewSort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewSort: (viewSortId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedUpdateViewSort?: PatchedUpdateViewSort, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableViewSortingsApi - functional programming interface
 * @export
 */
export declare const DatabaseTableViewSortingsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new sort for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, they will be returned in the respected order defined by all the sortings.
     * @param {number} viewId Creates a sort for the view related to the provided value.
     * @param {CreateViewSort} createViewSort
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewSort(viewId: number, createViewSort: CreateViewSort, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewSort>>;
    /**
     * Deletes the existing sort if the authorized user has access to the related database\'s workspace.
     * @param {number} viewSortId Deletes the sort related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewSort(viewSortId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the existing view sort if the authorized user has access to the related database\'s workspace.
     * @param {number} viewSortId Returns the view sort related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewSort(viewSortId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewSort>>;
    /**
     * Lists all sortings of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple sortings. When all the rows are requested they will be in the desired order.
     * @param {number} viewId Returns only sortings of the view related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewSortings(viewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewSort>>>;
    /**
     * Updates the existing sort if the authorized user has access to the related database\'s workspace.
     * @param {number} viewSortId Updates the view sort related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedUpdateViewSort} [patchedUpdateViewSort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewSort(viewSortId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedUpdateViewSort?: PatchedUpdateViewSort, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewSort>>;
};
/**
 * DatabaseTableViewSortingsApi - factory interface
 * @export
 */
export declare const DatabaseTableViewSortingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new sort for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, they will be returned in the respected order defined by all the sortings.
     * @param {DatabaseTableViewSortingsApiCreateDatabaseTableViewSortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableViewSort(requestParameters: DatabaseTableViewSortingsApiCreateDatabaseTableViewSortRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewSort>;
    /**
     * Deletes the existing sort if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewSortingsApiDeleteDatabaseTableViewSortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableViewSort(requestParameters: DatabaseTableViewSortingsApiDeleteDatabaseTableViewSortRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns the existing view sort if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewSortingsApiGetDatabaseTableViewSortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewSort(requestParameters: DatabaseTableViewSortingsApiGetDatabaseTableViewSortRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewSort>;
    /**
     * Lists all sortings of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple sortings. When all the rows are requested they will be in the desired order.
     * @param {DatabaseTableViewSortingsApiListDatabaseTableViewSortingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViewSortings(requestParameters: DatabaseTableViewSortingsApiListDatabaseTableViewSortingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ViewSort>>;
    /**
     * Updates the existing sort if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewSortingsApiUpdateDatabaseTableViewSortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewSort(requestParameters: DatabaseTableViewSortingsApiUpdateDatabaseTableViewSortRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewSort>;
};
/**
 * Request parameters for createDatabaseTableViewSort operation in DatabaseTableViewSortingsApi.
 * @export
 * @interface DatabaseTableViewSortingsApiCreateDatabaseTableViewSortRequest
 */
export interface DatabaseTableViewSortingsApiCreateDatabaseTableViewSortRequest {
    /**
     * Creates a sort for the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewSortingsApiCreateDatabaseTableViewSort
     */
    readonly viewId: number;
    /**
     *
     * @type {CreateViewSort}
     * @memberof DatabaseTableViewSortingsApiCreateDatabaseTableViewSort
     */
    readonly createViewSort: CreateViewSort;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewSortingsApiCreateDatabaseTableViewSort
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewSortingsApiCreateDatabaseTableViewSort
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for deleteDatabaseTableViewSort operation in DatabaseTableViewSortingsApi.
 * @export
 * @interface DatabaseTableViewSortingsApiDeleteDatabaseTableViewSortRequest
 */
export interface DatabaseTableViewSortingsApiDeleteDatabaseTableViewSortRequest {
    /**
     * Deletes the sort related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewSortingsApiDeleteDatabaseTableViewSort
     */
    readonly viewSortId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewSortingsApiDeleteDatabaseTableViewSort
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewSortingsApiDeleteDatabaseTableViewSort
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for getDatabaseTableViewSort operation in DatabaseTableViewSortingsApi.
 * @export
 * @interface DatabaseTableViewSortingsApiGetDatabaseTableViewSortRequest
 */
export interface DatabaseTableViewSortingsApiGetDatabaseTableViewSortRequest {
    /**
     * Returns the view sort related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewSortingsApiGetDatabaseTableViewSort
     */
    readonly viewSortId: number;
}
/**
 * Request parameters for listDatabaseTableViewSortings operation in DatabaseTableViewSortingsApi.
 * @export
 * @interface DatabaseTableViewSortingsApiListDatabaseTableViewSortingsRequest
 */
export interface DatabaseTableViewSortingsApiListDatabaseTableViewSortingsRequest {
    /**
     * Returns only sortings of the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewSortingsApiListDatabaseTableViewSortings
     */
    readonly viewId: number;
}
/**
 * Request parameters for updateDatabaseTableViewSort operation in DatabaseTableViewSortingsApi.
 * @export
 * @interface DatabaseTableViewSortingsApiUpdateDatabaseTableViewSortRequest
 */
export interface DatabaseTableViewSortingsApiUpdateDatabaseTableViewSortRequest {
    /**
     * Updates the view sort related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewSortingsApiUpdateDatabaseTableViewSort
     */
    readonly viewSortId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewSortingsApiUpdateDatabaseTableViewSort
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewSortingsApiUpdateDatabaseTableViewSort
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedUpdateViewSort}
     * @memberof DatabaseTableViewSortingsApiUpdateDatabaseTableViewSort
     */
    readonly patchedUpdateViewSort?: PatchedUpdateViewSort;
}
/**
 * DatabaseTableViewSortingsApi - object-oriented interface
 * @export
 * @class DatabaseTableViewSortingsApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableViewSortingsApi extends BaseAPI {
    /**
     * Creates a new sort for the view related to the provided `view_id` parameter if the authorized user has access to the related database\'s workspace. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, they will be returned in the respected order defined by all the sortings.
     * @param {DatabaseTableViewSortingsApiCreateDatabaseTableViewSortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewSortingsApi
     */
    createDatabaseTableViewSort(requestParameters: DatabaseTableViewSortingsApiCreateDatabaseTableViewSortRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewSort, any>>;
    /**
     * Deletes the existing sort if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewSortingsApiDeleteDatabaseTableViewSortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewSortingsApi
     */
    deleteDatabaseTableViewSort(requestParameters: DatabaseTableViewSortingsApiDeleteDatabaseTableViewSortRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the existing view sort if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewSortingsApiGetDatabaseTableViewSortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewSortingsApi
     */
    getDatabaseTableViewSort(requestParameters: DatabaseTableViewSortingsApiGetDatabaseTableViewSortRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewSort, any>>;
    /**
     * Lists all sortings of the view related to the provided `view_id` if the user has access to the related database\'s workspace. A view can have multiple sortings. When all the rows are requested they will be in the desired order.
     * @param {DatabaseTableViewSortingsApiListDatabaseTableViewSortingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewSortingsApi
     */
    listDatabaseTableViewSortings(requestParameters: DatabaseTableViewSortingsApiListDatabaseTableViewSortingsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewSort[], any>>;
    /**
     * Updates the existing sort if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableViewSortingsApiUpdateDatabaseTableViewSortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewSortingsApi
     */
    updateDatabaseTableViewSort(requestParameters: DatabaseTableViewSortingsApiUpdateDatabaseTableViewSortRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewSort, any>>;
}
/**
 * DatabaseTableViewsApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableViewsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns ICal feed for a specific Calendar view identified by ical_slug value. Calendar View resource contains full url in .ical_feed_url field.
     * @param {string} icalSlug ICal feed unique slug.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calendarIcalFeed: (icalSlug: string, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new view for the table related to the provided `table_id` parameter. Depending on the type, different properties can optionally be set.
     * @param {number} tableId Creates a view for the table related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {string} [include] A comma separated list of extra attributes to include on each view in the response. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @param {ViewCreateView} [viewCreateView]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableView: (tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, include?: string, viewCreateView?: ViewCreateView, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * If the view is publicly shared or if an authenticated user has access to the related workspace, then this endpoint can be used to do a value lookup of the link row fields that are included in the view. Normally it is not possible for a not authenticated visitor to fetch the rows of a table. This endpoint makes it possible to fetch the id and primary field value of the related table of a link row included in the view.
     * @param {number} fieldId The field id of the link row field.
     * @param {string} slug The slug related to the view.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    databaseTablePublicViewLinkRowFieldLookup: (fieldId: number, slug: string, search?: string, searchMode?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing view. Note that all the related settings of the view are going to be deleted also. The data stays intact after deleting the view because this is related to the table and not the view.
     * @param {number} viewId Deletes the view related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableView: (viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Duplicates an existing view if the user has access to it. When a view is duplicated everything is copied except: - The name is appended with the copy number. Ex: `ViewName`->`ViewName(2)` and `View(2)`->`View(3)` - If the original view is publicly shared, the new view will not be shared anymore
     * @param {number} viewId Duplicates the view related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateDatabaseTableView: (viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the existing view. Depending on the type different properties could be returned.
     * @param {number} viewId Returns the view related to the provided value.
     * @param {string} [include] A comma separated list of extra attributes to include on the returned view. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableView: (viewId: number, include?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with the fields options of the provided view if the authenticated user has access to the related workspace.
     * @param {number} viewId Responds with field options related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewFieldOptions: (viewId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the required public information to display a single shared view.
     * @param {string} slug The slug of the view to get public information about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicViewInfo: (slug: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all views of the table related to the provided `table_id`. If the workspace is related to a template, then this endpoint will be publicly accessible. A table can have multiple views. Each view can display the data in a different way. For example the `grid` view shows the in a spreadsheet like way. That type has custom endpoints for data retrieval and manipulation. In the future other views types like a calendar or Kanban are going to be added. Each type can have different properties.
     * @param {number} tableId Returns only views of the table related to the provided value.
     * @param {string} [include] A comma separated list of extra attributes to include on each view in the response. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @param {number} [limit] The maximum amount of views that must be returned. This endpoint doesn\&#39;t support pagination, but if you for example just need to fetch the first view, you can do that by setting a limit. There isn\&#39;t a limit by default.
     * @param {string} [type] Optionally filter on the view type. If provided, only views of that type will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViews: (tableId: number, include?: string, limit?: number, type?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Changes the order of the provided view ids to the matching position that the id has in the list. The order of the not provided views will be set to `0`.
     * @param {number} tableId Updates the order of the views in the table related to the provided value.
     * @param {OrderViews} orderViews
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderDatabaseTableViews: (tableId: number, orderViews: OrderViews, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets view attributes only available for premium users.
     * @param {number} viewId Sets show_logo of this view.
     * @param {PatchedUpdatePremiumViewAttributes} [patchedUpdatePremiumViewAttributes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    premiumViewAttributesUpdate: (viewId: number, patchedUpdatePremiumViewAttributes?: PatchedUpdatePremiumViewAttributes, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a valid never-expiring JWT token for this public shared view if the password provided matches with the one saved by the view\'s owner.
     * @param {string} slug The slug of the grid view to get public information about.
     * @param {PublicViewAuthRequest} publicViewAuthRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicViewTokenAuth: (slug: string, publicViewAuthRequest: PublicViewAuthRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Rotates the unique slug of the calendar view\'s ical feed by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won\'t be able to access the view anymore.
     * @param {number} viewId Rotates the ical feed slug of the calendar view related to the provided id.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateCalendarViewIcalFeedSlug: (viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Rotates the unique slug of the view by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won\'t be able to access the viewanymore. Only view types which are sharable can have their slugs rotated.
     * @param {number} viewId Rotates the slug of the view related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateDatabaseViewSlug: (viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing view. The type cannot be changed. It depends on the existing type which properties can be changed.
     * @param {number} viewId Updates the view related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {string} [include] A comma separated list of extra attributes to include on the returned view. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @param {PatchedViewUpdateView} [patchedViewUpdateView]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableView: (viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, include?: string, patchedViewUpdateView?: PatchedViewUpdateView, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the field options of a view. The field options differ per field type  This could for example be used to update the field width of a `grid` view if the user changes it.
     * @param {number} viewId Updates the field options related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedViewFieldOptions} [patchedViewFieldOptions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewFieldOptions: (viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedViewFieldOptions?: PatchedViewFieldOptions, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableViewsApi - functional programming interface
 * @export
 */
export declare const DatabaseTableViewsApiFp: (configuration?: Configuration) => {
    /**
     * Returns ICal feed for a specific Calendar view identified by ical_slug value. Calendar View resource contains full url in .ical_feed_url field.
     * @param {string} icalSlug ICal feed unique slug.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calendarIcalFeed(icalSlug: string, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>>;
    /**
     * Creates a new view for the table related to the provided `table_id` parameter. Depending on the type, different properties can optionally be set.
     * @param {number} tableId Creates a view for the table related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {string} [include] A comma separated list of extra attributes to include on each view in the response. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @param {ViewCreateView} [viewCreateView]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableView(tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, include?: string, viewCreateView?: ViewCreateView, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewView>>;
    /**
     * If the view is publicly shared or if an authenticated user has access to the related workspace, then this endpoint can be used to do a value lookup of the link row fields that are included in the view. Normally it is not possible for a not authenticated visitor to fetch the rows of a table. This endpoint makes it possible to fetch the id and primary field value of the related table of a link row included in the view.
     * @param {number} fieldId The field id of the link row field.
     * @param {string} slug The slug related to the view.
     * @param {string} [search] If provided only rows with data that matches the search query are going to be returned.
     * @param {string} [searchMode] If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    databaseTablePublicViewLinkRowFieldLookup(fieldId: number, slug: string, search?: string, searchMode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerLinkRowValue>>;
    /**
     * Deletes the existing view. Note that all the related settings of the view are going to be deleted also. The data stays intact after deleting the view because this is related to the table and not the view.
     * @param {number} viewId Deletes the view related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableView(viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Duplicates an existing view if the user has access to it. When a view is duplicated everything is copied except: - The name is appended with the copy number. Ex: `ViewName`->`ViewName(2)` and `View(2)`->`View(3)` - If the original view is publicly shared, the new view will not be shared anymore
     * @param {number} viewId Duplicates the view related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateDatabaseTableView(viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewView>>;
    /**
     * Returns the existing view. Depending on the type different properties could be returned.
     * @param {number} viewId Returns the view related to the provided value.
     * @param {string} [include] A comma separated list of extra attributes to include on the returned view. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableView(viewId: number, include?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewView>>;
    /**
     * Responds with the fields options of the provided view if the authenticated user has access to the related workspace.
     * @param {number} viewId Responds with field options related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewFieldOptions(viewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewFieldOptions>>;
    /**
     * Returns the required public information to display a single shared view.
     * @param {string} slug The slug of the view to get public information about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicViewInfo(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicViewInfo>>;
    /**
     * Lists all views of the table related to the provided `table_id`. If the workspace is related to a template, then this endpoint will be publicly accessible. A table can have multiple views. Each view can display the data in a different way. For example the `grid` view shows the in a spreadsheet like way. That type has custom endpoints for data retrieval and manipulation. In the future other views types like a calendar or Kanban are going to be added. Each type can have different properties.
     * @param {number} tableId Returns only views of the table related to the provided value.
     * @param {string} [include] A comma separated list of extra attributes to include on each view in the response. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @param {number} [limit] The maximum amount of views that must be returned. This endpoint doesn\&#39;t support pagination, but if you for example just need to fetch the first view, you can do that by setting a limit. There isn\&#39;t a limit by default.
     * @param {string} [type] Optionally filter on the view type. If provided, only views of that type will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViews(tableId: number, include?: string, limit?: number, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewView>>>;
    /**
     * Changes the order of the provided view ids to the matching position that the id has in the list. The order of the not provided views will be set to `0`.
     * @param {number} tableId Updates the order of the views in the table related to the provided value.
     * @param {OrderViews} orderViews
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderDatabaseTableViews(tableId: number, orderViews: OrderViews, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sets view attributes only available for premium users.
     * @param {number} viewId Sets show_logo of this view.
     * @param {PatchedUpdatePremiumViewAttributes} [patchedUpdatePremiumViewAttributes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    premiumViewAttributesUpdate(viewId: number, patchedUpdatePremiumViewAttributes?: PatchedUpdatePremiumViewAttributes, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<View>>;
    /**
     * Returns a valid never-expiring JWT token for this public shared view if the password provided matches with the one saved by the view\'s owner.
     * @param {string} slug The slug of the grid view to get public information about.
     * @param {PublicViewAuthRequest} publicViewAuthRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicViewTokenAuth(slug: string, publicViewAuthRequest: PublicViewAuthRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicViewAuthResponse>>;
    /**
     * Rotates the unique slug of the calendar view\'s ical feed by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won\'t be able to access the view anymore.
     * @param {number} viewId Rotates the ical feed slug of the calendar view related to the provided id.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateCalendarViewIcalFeedSlug(viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewView>>;
    /**
     * Rotates the unique slug of the view by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won\'t be able to access the viewanymore. Only view types which are sharable can have their slugs rotated.
     * @param {number} viewId Rotates the slug of the view related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateDatabaseViewSlug(viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewView>>;
    /**
     * Updates the existing view. The type cannot be changed. It depends on the existing type which properties can be changed.
     * @param {number} viewId Updates the view related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {string} [include] A comma separated list of extra attributes to include on the returned view. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @param {PatchedViewUpdateView} [patchedViewUpdateView]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableView(viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, include?: string, patchedViewUpdateView?: PatchedViewUpdateView, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewView>>;
    /**
     * Updates the field options of a view. The field options differ per field type  This could for example be used to update the field width of a `grid` view if the user changes it.
     * @param {number} viewId Updates the field options related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedViewFieldOptions} [patchedViewFieldOptions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewFieldOptions(viewId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedViewFieldOptions?: PatchedViewFieldOptions, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewFieldOptions>>;
};
/**
 * DatabaseTableViewsApi - factory interface
 * @export
 */
export declare const DatabaseTableViewsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns ICal feed for a specific Calendar view identified by ical_slug value. Calendar View resource contains full url in .ical_feed_url field.
     * @param {DatabaseTableViewsApiCalendarIcalFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calendarIcalFeed(requestParameters: DatabaseTableViewsApiCalendarIcalFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<File>;
    /**
     * Creates a new view for the table related to the provided `table_id` parameter. Depending on the type, different properties can optionally be set.
     * @param {DatabaseTableViewsApiCreateDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableView(requestParameters: DatabaseTableViewsApiCreateDatabaseTableViewRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewView>;
    /**
     * If the view is publicly shared or if an authenticated user has access to the related workspace, then this endpoint can be used to do a value lookup of the link row fields that are included in the view. Normally it is not possible for a not authenticated visitor to fetch the rows of a table. This endpoint makes it possible to fetch the id and primary field value of the related table of a link row included in the view.
     * @param {DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    databaseTablePublicViewLinkRowFieldLookup(requestParameters: DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookupRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerLinkRowValue>;
    /**
     * Deletes the existing view. Note that all the related settings of the view are going to be deleted also. The data stays intact after deleting the view because this is related to the table and not the view.
     * @param {DatabaseTableViewsApiDeleteDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableView(requestParameters: DatabaseTableViewsApiDeleteDatabaseTableViewRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Duplicates an existing view if the user has access to it. When a view is duplicated everything is copied except: - The name is appended with the copy number. Ex: `ViewName`->`ViewName(2)` and `View(2)`->`View(3)` - If the original view is publicly shared, the new view will not be shared anymore
     * @param {DatabaseTableViewsApiDuplicateDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateDatabaseTableView(requestParameters: DatabaseTableViewsApiDuplicateDatabaseTableViewRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewView>;
    /**
     * Returns the existing view. Depending on the type different properties could be returned.
     * @param {DatabaseTableViewsApiGetDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableView(requestParameters: DatabaseTableViewsApiGetDatabaseTableViewRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewView>;
    /**
     * Responds with the fields options of the provided view if the authenticated user has access to the related workspace.
     * @param {DatabaseTableViewsApiGetDatabaseTableViewFieldOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableViewFieldOptions(requestParameters: DatabaseTableViewsApiGetDatabaseTableViewFieldOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewFieldOptions>;
    /**
     * Returns the required public information to display a single shared view.
     * @param {DatabaseTableViewsApiGetPublicViewInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicViewInfo(requestParameters: DatabaseTableViewsApiGetPublicViewInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicViewInfo>;
    /**
     * Lists all views of the table related to the provided `table_id`. If the workspace is related to a template, then this endpoint will be publicly accessible. A table can have multiple views. Each view can display the data in a different way. For example the `grid` view shows the in a spreadsheet like way. That type has custom endpoints for data retrieval and manipulation. In the future other views types like a calendar or Kanban are going to be added. Each type can have different properties.
     * @param {DatabaseTableViewsApiListDatabaseTableViewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableViews(requestParameters: DatabaseTableViewsApiListDatabaseTableViewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ViewView>>;
    /**
     * Changes the order of the provided view ids to the matching position that the id has in the list. The order of the not provided views will be set to `0`.
     * @param {DatabaseTableViewsApiOrderDatabaseTableViewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderDatabaseTableViews(requestParameters: DatabaseTableViewsApiOrderDatabaseTableViewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets view attributes only available for premium users.
     * @param {DatabaseTableViewsApiPremiumViewAttributesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    premiumViewAttributesUpdate(requestParameters: DatabaseTableViewsApiPremiumViewAttributesUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<View>;
    /**
     * Returns a valid never-expiring JWT token for this public shared view if the password provided matches with the one saved by the view\'s owner.
     * @param {DatabaseTableViewsApiPublicViewTokenAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicViewTokenAuth(requestParameters: DatabaseTableViewsApiPublicViewTokenAuthRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicViewAuthResponse>;
    /**
     * Rotates the unique slug of the calendar view\'s ical feed by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won\'t be able to access the view anymore.
     * @param {DatabaseTableViewsApiRotateCalendarViewIcalFeedSlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateCalendarViewIcalFeedSlug(requestParameters: DatabaseTableViewsApiRotateCalendarViewIcalFeedSlugRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewView>;
    /**
     * Rotates the unique slug of the view by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won\'t be able to access the viewanymore. Only view types which are sharable can have their slugs rotated.
     * @param {DatabaseTableViewsApiRotateDatabaseViewSlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateDatabaseViewSlug(requestParameters: DatabaseTableViewsApiRotateDatabaseViewSlugRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewView>;
    /**
     * Updates the existing view. The type cannot be changed. It depends on the existing type which properties can be changed.
     * @param {DatabaseTableViewsApiUpdateDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableView(requestParameters: DatabaseTableViewsApiUpdateDatabaseTableViewRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewView>;
    /**
     * Updates the field options of a view. The field options differ per field type  This could for example be used to update the field width of a `grid` view if the user changes it.
     * @param {DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableViewFieldOptions(requestParameters: DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewFieldOptions>;
};
/**
 * Request parameters for calendarIcalFeed operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiCalendarIcalFeedRequest
 */
export interface DatabaseTableViewsApiCalendarIcalFeedRequest {
    /**
     * ICal feed unique slug.
     * @type {string}
     * @memberof DatabaseTableViewsApiCalendarIcalFeed
     */
    readonly icalSlug: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewsApiCalendarIcalFeed
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for createDatabaseTableView operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiCreateDatabaseTableViewRequest
 */
export interface DatabaseTableViewsApiCreateDatabaseTableViewRequest {
    /**
     * Creates a view for the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiCreateDatabaseTableView
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewsApiCreateDatabaseTableView
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewsApiCreateDatabaseTableView
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     * A comma separated list of extra attributes to include on each view in the response. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @type {string}
     * @memberof DatabaseTableViewsApiCreateDatabaseTableView
     */
    readonly include?: string;
    /**
     *
     * @type {ViewCreateView}
     * @memberof DatabaseTableViewsApiCreateDatabaseTableView
     */
    readonly viewCreateView?: ViewCreateView;
}
/**
 * Request parameters for databaseTablePublicViewLinkRowFieldLookup operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookupRequest
 */
export interface DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookupRequest {
    /**
     * The field id of the link row field.
     * @type {number}
     * @memberof DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookup
     */
    readonly fieldId: number;
    /**
     * The slug related to the view.
     * @type {string}
     * @memberof DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookup
     */
    readonly slug: string;
    /**
     * If provided only rows with data that matches the search query are going to be returned.
     * @type {string}
     * @memberof DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookup
     */
    readonly search?: string;
    /**
     * If provided, allows API consumers to determine what kind of search experience they wish to have. If the default &#x60;SearchModes.MODE_FT_WITH_COUNT&#x60; is used, then Postgres full-text search is used. If &#x60;SearchModes.MODE_COMPAT&#x60; is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @type {string}
     * @memberof DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookup
     */
    readonly searchMode?: string;
}
/**
 * Request parameters for deleteDatabaseTableView operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiDeleteDatabaseTableViewRequest
 */
export interface DatabaseTableViewsApiDeleteDatabaseTableViewRequest {
    /**
     * Deletes the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiDeleteDatabaseTableView
     */
    readonly viewId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewsApiDeleteDatabaseTableView
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewsApiDeleteDatabaseTableView
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for duplicateDatabaseTableView operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiDuplicateDatabaseTableViewRequest
 */
export interface DatabaseTableViewsApiDuplicateDatabaseTableViewRequest {
    /**
     * Duplicates the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiDuplicateDatabaseTableView
     */
    readonly viewId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewsApiDuplicateDatabaseTableView
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewsApiDuplicateDatabaseTableView
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for getDatabaseTableView operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiGetDatabaseTableViewRequest
 */
export interface DatabaseTableViewsApiGetDatabaseTableViewRequest {
    /**
     * Returns the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiGetDatabaseTableView
     */
    readonly viewId: number;
    /**
     * A comma separated list of extra attributes to include on the returned view. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @type {string}
     * @memberof DatabaseTableViewsApiGetDatabaseTableView
     */
    readonly include?: string;
}
/**
 * Request parameters for getDatabaseTableViewFieldOptions operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiGetDatabaseTableViewFieldOptionsRequest
 */
export interface DatabaseTableViewsApiGetDatabaseTableViewFieldOptionsRequest {
    /**
     * Responds with field options related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiGetDatabaseTableViewFieldOptions
     */
    readonly viewId: number;
}
/**
 * Request parameters for getPublicViewInfo operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiGetPublicViewInfoRequest
 */
export interface DatabaseTableViewsApiGetPublicViewInfoRequest {
    /**
     * The slug of the view to get public information about.
     * @type {string}
     * @memberof DatabaseTableViewsApiGetPublicViewInfo
     */
    readonly slug: string;
}
/**
 * Request parameters for listDatabaseTableViews operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiListDatabaseTableViewsRequest
 */
export interface DatabaseTableViewsApiListDatabaseTableViewsRequest {
    /**
     * Returns only views of the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiListDatabaseTableViews
     */
    readonly tableId: number;
    /**
     * A comma separated list of extra attributes to include on each view in the response. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @type {string}
     * @memberof DatabaseTableViewsApiListDatabaseTableViews
     */
    readonly include?: string;
    /**
     * The maximum amount of views that must be returned. This endpoint doesn\&#39;t support pagination, but if you for example just need to fetch the first view, you can do that by setting a limit. There isn\&#39;t a limit by default.
     * @type {number}
     * @memberof DatabaseTableViewsApiListDatabaseTableViews
     */
    readonly limit?: number;
    /**
     * Optionally filter on the view type. If provided, only views of that type will be returned.
     * @type {string}
     * @memberof DatabaseTableViewsApiListDatabaseTableViews
     */
    readonly type?: string;
}
/**
 * Request parameters for orderDatabaseTableViews operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiOrderDatabaseTableViewsRequest
 */
export interface DatabaseTableViewsApiOrderDatabaseTableViewsRequest {
    /**
     * Updates the order of the views in the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiOrderDatabaseTableViews
     */
    readonly tableId: number;
    /**
     *
     * @type {OrderViews}
     * @memberof DatabaseTableViewsApiOrderDatabaseTableViews
     */
    readonly orderViews: OrderViews;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewsApiOrderDatabaseTableViews
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewsApiOrderDatabaseTableViews
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for premiumViewAttributesUpdate operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiPremiumViewAttributesUpdateRequest
 */
export interface DatabaseTableViewsApiPremiumViewAttributesUpdateRequest {
    /**
     * Sets show_logo of this view.
     * @type {number}
     * @memberof DatabaseTableViewsApiPremiumViewAttributesUpdate
     */
    readonly viewId: number;
    /**
     *
     * @type {PatchedUpdatePremiumViewAttributes}
     * @memberof DatabaseTableViewsApiPremiumViewAttributesUpdate
     */
    readonly patchedUpdatePremiumViewAttributes?: PatchedUpdatePremiumViewAttributes;
}
/**
 * Request parameters for publicViewTokenAuth operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiPublicViewTokenAuthRequest
 */
export interface DatabaseTableViewsApiPublicViewTokenAuthRequest {
    /**
     * The slug of the grid view to get public information about.
     * @type {string}
     * @memberof DatabaseTableViewsApiPublicViewTokenAuth
     */
    readonly slug: string;
    /**
     *
     * @type {PublicViewAuthRequest}
     * @memberof DatabaseTableViewsApiPublicViewTokenAuth
     */
    readonly publicViewAuthRequest: PublicViewAuthRequest;
}
/**
 * Request parameters for rotateCalendarViewIcalFeedSlug operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiRotateCalendarViewIcalFeedSlugRequest
 */
export interface DatabaseTableViewsApiRotateCalendarViewIcalFeedSlugRequest {
    /**
     * Rotates the ical feed slug of the calendar view related to the provided id.
     * @type {number}
     * @memberof DatabaseTableViewsApiRotateCalendarViewIcalFeedSlug
     */
    readonly viewId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewsApiRotateCalendarViewIcalFeedSlug
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewsApiRotateCalendarViewIcalFeedSlug
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for rotateDatabaseViewSlug operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiRotateDatabaseViewSlugRequest
 */
export interface DatabaseTableViewsApiRotateDatabaseViewSlugRequest {
    /**
     * Rotates the slug of the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiRotateDatabaseViewSlug
     */
    readonly viewId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewsApiRotateDatabaseViewSlug
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewsApiRotateDatabaseViewSlug
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for updateDatabaseTableView operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiUpdateDatabaseTableViewRequest
 */
export interface DatabaseTableViewsApiUpdateDatabaseTableViewRequest {
    /**
     * Updates the view related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiUpdateDatabaseTableView
     */
    readonly viewId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewsApiUpdateDatabaseTableView
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewsApiUpdateDatabaseTableView
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     * A comma separated list of extra attributes to include on the returned view. The supported attributes are &#x60;filters&#x60;, &#x60;sortings&#x60; and &#x60;decorations&#x60;. For example &#x60;include&#x3D;filters,sortings&#x60; will add the attributes &#x60;filters&#x60; and &#x60;sortings&#x60; to every returned view, containing a list of the views filters and sortings respectively.
     * @type {string}
     * @memberof DatabaseTableViewsApiUpdateDatabaseTableView
     */
    readonly include?: string;
    /**
     *
     * @type {PatchedViewUpdateView}
     * @memberof DatabaseTableViewsApiUpdateDatabaseTableView
     */
    readonly patchedViewUpdateView?: PatchedViewUpdateView;
}
/**
 * Request parameters for updateDatabaseTableViewFieldOptions operation in DatabaseTableViewsApi.
 * @export
 * @interface DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptionsRequest
 */
export interface DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptionsRequest {
    /**
     * Updates the field options related to the provided value.
     * @type {number}
     * @memberof DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptions
     */
    readonly viewId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptions
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptions
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedViewFieldOptions}
     * @memberof DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptions
     */
    readonly patchedViewFieldOptions?: PatchedViewFieldOptions;
}
/**
 * DatabaseTableViewsApi - object-oriented interface
 * @export
 * @class DatabaseTableViewsApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableViewsApi extends BaseAPI {
    /**
     * Returns ICal feed for a specific Calendar view identified by ical_slug value. Calendar View resource contains full url in .ical_feed_url field.
     * @param {DatabaseTableViewsApiCalendarIcalFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    calendarIcalFeed(requestParameters: DatabaseTableViewsApiCalendarIcalFeedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<File, any>>;
    /**
     * Creates a new view for the table related to the provided `table_id` parameter. Depending on the type, different properties can optionally be set.
     * @param {DatabaseTableViewsApiCreateDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    createDatabaseTableView(requestParameters: DatabaseTableViewsApiCreateDatabaseTableViewRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewView, any>>;
    /**
     * If the view is publicly shared or if an authenticated user has access to the related workspace, then this endpoint can be used to do a value lookup of the link row fields that are included in the view. Normally it is not possible for a not authenticated visitor to fetch the rows of a table. This endpoint makes it possible to fetch the id and primary field value of the related table of a link row included in the view.
     * @param {DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    databaseTablePublicViewLinkRowFieldLookup(requestParameters: DatabaseTableViewsApiDatabaseTablePublicViewLinkRowFieldLookupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerLinkRowValue, any>>;
    /**
     * Deletes the existing view. Note that all the related settings of the view are going to be deleted also. The data stays intact after deleting the view because this is related to the table and not the view.
     * @param {DatabaseTableViewsApiDeleteDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    deleteDatabaseTableView(requestParameters: DatabaseTableViewsApiDeleteDatabaseTableViewRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Duplicates an existing view if the user has access to it. When a view is duplicated everything is copied except: - The name is appended with the copy number. Ex: `ViewName`->`ViewName(2)` and `View(2)`->`View(3)` - If the original view is publicly shared, the new view will not be shared anymore
     * @param {DatabaseTableViewsApiDuplicateDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    duplicateDatabaseTableView(requestParameters: DatabaseTableViewsApiDuplicateDatabaseTableViewRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewView, any>>;
    /**
     * Returns the existing view. Depending on the type different properties could be returned.
     * @param {DatabaseTableViewsApiGetDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    getDatabaseTableView(requestParameters: DatabaseTableViewsApiGetDatabaseTableViewRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewView, any>>;
    /**
     * Responds with the fields options of the provided view if the authenticated user has access to the related workspace.
     * @param {DatabaseTableViewsApiGetDatabaseTableViewFieldOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    getDatabaseTableViewFieldOptions(requestParameters: DatabaseTableViewsApiGetDatabaseTableViewFieldOptionsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewFieldOptions, any>>;
    /**
     * Returns the required public information to display a single shared view.
     * @param {DatabaseTableViewsApiGetPublicViewInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    getPublicViewInfo(requestParameters: DatabaseTableViewsApiGetPublicViewInfoRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicViewInfo, any>>;
    /**
     * Lists all views of the table related to the provided `table_id`. If the workspace is related to a template, then this endpoint will be publicly accessible. A table can have multiple views. Each view can display the data in a different way. For example the `grid` view shows the in a spreadsheet like way. That type has custom endpoints for data retrieval and manipulation. In the future other views types like a calendar or Kanban are going to be added. Each type can have different properties.
     * @param {DatabaseTableViewsApiListDatabaseTableViewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    listDatabaseTableViews(requestParameters: DatabaseTableViewsApiListDatabaseTableViewsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewView[], any>>;
    /**
     * Changes the order of the provided view ids to the matching position that the id has in the list. The order of the not provided views will be set to `0`.
     * @param {DatabaseTableViewsApiOrderDatabaseTableViewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    orderDatabaseTableViews(requestParameters: DatabaseTableViewsApiOrderDatabaseTableViewsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Sets view attributes only available for premium users.
     * @param {DatabaseTableViewsApiPremiumViewAttributesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    premiumViewAttributesUpdate(requestParameters: DatabaseTableViewsApiPremiumViewAttributesUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<View, any>>;
    /**
     * Returns a valid never-expiring JWT token for this public shared view if the password provided matches with the one saved by the view\'s owner.
     * @param {DatabaseTableViewsApiPublicViewTokenAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    publicViewTokenAuth(requestParameters: DatabaseTableViewsApiPublicViewTokenAuthRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicViewAuthResponse, any>>;
    /**
     * Rotates the unique slug of the calendar view\'s ical feed by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won\'t be able to access the view anymore.
     * @param {DatabaseTableViewsApiRotateCalendarViewIcalFeedSlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    rotateCalendarViewIcalFeedSlug(requestParameters: DatabaseTableViewsApiRotateCalendarViewIcalFeedSlugRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewView, any>>;
    /**
     * Rotates the unique slug of the view by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won\'t be able to access the viewanymore. Only view types which are sharable can have their slugs rotated.
     * @param {DatabaseTableViewsApiRotateDatabaseViewSlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    rotateDatabaseViewSlug(requestParameters: DatabaseTableViewsApiRotateDatabaseViewSlugRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewView, any>>;
    /**
     * Updates the existing view. The type cannot be changed. It depends on the existing type which properties can be changed.
     * @param {DatabaseTableViewsApiUpdateDatabaseTableViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    updateDatabaseTableView(requestParameters: DatabaseTableViewsApiUpdateDatabaseTableViewRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewView, any>>;
    /**
     * Updates the field options of a view. The field options differ per field type  This could for example be used to update the field width of a `grid` view if the user changes it.
     * @param {DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableViewsApi
     */
    updateDatabaseTableViewFieldOptions(requestParameters: DatabaseTableViewsApiUpdateDatabaseTableViewFieldOptionsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewFieldOptions, any>>;
}
/**
 * DatabaseTableWebhooksApi - axios parameter creator
 * @export
 */
export declare const DatabaseTableWebhooksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new webhook for the table related to the provided `table_id` parameter if the authorized user has access to the related database workspace.
     * @param {number} tableId Creates a webhook for the table related to the provided value.
     * @param {TableWebhookCreateRequest} tableWebhookCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableWebhook: (tableId: number, tableWebhookCreateRequest: TableWebhookCreateRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing webhook if the authorized user has access to the related database\'s workspace.
     * @param {number} webhookId Deletes the webhook related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableWebhook: (webhookId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the existing webhook if the authorized user has access to the related database workspace.
     * @param {number} webhookId Returns the webhook related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableWebhook: (webhookId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all webhooks of the table related to the provided `table_id` if the user has access to the related database workspace.
     * @param {number} tableId Returns only webhooks of the table related to this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableWebhooks: (tableId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint triggers a test call based on the provided data if the user has access to the workspace related to the table. The test call will be made immediately and a copy of the request, response and status will be included in the response.
     * @param {number} tableId The id of the table that must be tested.
     * @param {TableWebhookTestCallRequest} tableWebhookTestCallRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testCallDatabaseTableWebhook: (tableId: number, tableWebhookTestCallRequest: TableWebhookTestCallRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing view if the authorized user has access to the related database workspace.
     * @param {number} webhookId Updates the webhook related to the provided value.
     * @param {PatchedTableWebhookUpdateRequest} [patchedTableWebhookUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableWebhook: (webhookId: number, patchedTableWebhookUpdateRequest?: PatchedTableWebhookUpdateRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTableWebhooksApi - functional programming interface
 * @export
 */
export declare const DatabaseTableWebhooksApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new webhook for the table related to the provided `table_id` parameter if the authorized user has access to the related database workspace.
     * @param {number} tableId Creates a webhook for the table related to the provided value.
     * @param {TableWebhookCreateRequest} tableWebhookCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableWebhook(tableId: number, tableWebhookCreateRequest: TableWebhookCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableWebhook>>;
    /**
     * Deletes the existing webhook if the authorized user has access to the related database\'s workspace.
     * @param {number} webhookId Deletes the webhook related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableWebhook(webhookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the existing webhook if the authorized user has access to the related database workspace.
     * @param {number} webhookId Returns the webhook related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableWebhook(webhookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableWebhook>>;
    /**
     * Lists all webhooks of the table related to the provided `table_id` if the user has access to the related database workspace.
     * @param {number} tableId Returns only webhooks of the table related to this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableWebhooks(tableId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TableWebhook>>>;
    /**
     * This endpoint triggers a test call based on the provided data if the user has access to the workspace related to the table. The test call will be made immediately and a copy of the request, response and status will be included in the response.
     * @param {number} tableId The id of the table that must be tested.
     * @param {TableWebhookTestCallRequest} tableWebhookTestCallRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testCallDatabaseTableWebhook(tableId: number, tableWebhookTestCallRequest: TableWebhookTestCallRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableWebhookTestCallResponse>>;
    /**
     * Updates the existing view if the authorized user has access to the related database workspace.
     * @param {number} webhookId Updates the webhook related to the provided value.
     * @param {PatchedTableWebhookUpdateRequest} [patchedTableWebhookUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableWebhook(webhookId: number, patchedTableWebhookUpdateRequest?: PatchedTableWebhookUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableWebhook>>;
};
/**
 * DatabaseTableWebhooksApi - factory interface
 * @export
 */
export declare const DatabaseTableWebhooksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new webhook for the table related to the provided `table_id` parameter if the authorized user has access to the related database workspace.
     * @param {DatabaseTableWebhooksApiCreateDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiCreateDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableWebhook>;
    /**
     * Deletes the existing webhook if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableWebhooksApiDeleteDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiDeleteDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns the existing webhook if the authorized user has access to the related database workspace.
     * @param {DatabaseTableWebhooksApiGetDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiGetDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableWebhook>;
    /**
     * Lists all webhooks of the table related to the provided `table_id` if the user has access to the related database workspace.
     * @param {DatabaseTableWebhooksApiListDatabaseTableWebhooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTableWebhooks(requestParameters: DatabaseTableWebhooksApiListDatabaseTableWebhooksRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<TableWebhook>>;
    /**
     * This endpoint triggers a test call based on the provided data if the user has access to the workspace related to the table. The test call will be made immediately and a copy of the request, response and status will be included in the response.
     * @param {DatabaseTableWebhooksApiTestCallDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testCallDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiTestCallDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableWebhookTestCallResponse>;
    /**
     * Updates the existing view if the authorized user has access to the related database workspace.
     * @param {DatabaseTableWebhooksApiUpdateDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiUpdateDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableWebhook>;
};
/**
 * Request parameters for createDatabaseTableWebhook operation in DatabaseTableWebhooksApi.
 * @export
 * @interface DatabaseTableWebhooksApiCreateDatabaseTableWebhookRequest
 */
export interface DatabaseTableWebhooksApiCreateDatabaseTableWebhookRequest {
    /**
     * Creates a webhook for the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTableWebhooksApiCreateDatabaseTableWebhook
     */
    readonly tableId: number;
    /**
     *
     * @type {TableWebhookCreateRequest}
     * @memberof DatabaseTableWebhooksApiCreateDatabaseTableWebhook
     */
    readonly tableWebhookCreateRequest: TableWebhookCreateRequest;
}
/**
 * Request parameters for deleteDatabaseTableWebhook operation in DatabaseTableWebhooksApi.
 * @export
 * @interface DatabaseTableWebhooksApiDeleteDatabaseTableWebhookRequest
 */
export interface DatabaseTableWebhooksApiDeleteDatabaseTableWebhookRequest {
    /**
     * Deletes the webhook related to the provided value.
     * @type {number}
     * @memberof DatabaseTableWebhooksApiDeleteDatabaseTableWebhook
     */
    readonly webhookId: number;
}
/**
 * Request parameters for getDatabaseTableWebhook operation in DatabaseTableWebhooksApi.
 * @export
 * @interface DatabaseTableWebhooksApiGetDatabaseTableWebhookRequest
 */
export interface DatabaseTableWebhooksApiGetDatabaseTableWebhookRequest {
    /**
     * Returns the webhook related to the provided value.
     * @type {number}
     * @memberof DatabaseTableWebhooksApiGetDatabaseTableWebhook
     */
    readonly webhookId: number;
}
/**
 * Request parameters for listDatabaseTableWebhooks operation in DatabaseTableWebhooksApi.
 * @export
 * @interface DatabaseTableWebhooksApiListDatabaseTableWebhooksRequest
 */
export interface DatabaseTableWebhooksApiListDatabaseTableWebhooksRequest {
    /**
     * Returns only webhooks of the table related to this value.
     * @type {number}
     * @memberof DatabaseTableWebhooksApiListDatabaseTableWebhooks
     */
    readonly tableId: number;
}
/**
 * Request parameters for testCallDatabaseTableWebhook operation in DatabaseTableWebhooksApi.
 * @export
 * @interface DatabaseTableWebhooksApiTestCallDatabaseTableWebhookRequest
 */
export interface DatabaseTableWebhooksApiTestCallDatabaseTableWebhookRequest {
    /**
     * The id of the table that must be tested.
     * @type {number}
     * @memberof DatabaseTableWebhooksApiTestCallDatabaseTableWebhook
     */
    readonly tableId: number;
    /**
     *
     * @type {TableWebhookTestCallRequest}
     * @memberof DatabaseTableWebhooksApiTestCallDatabaseTableWebhook
     */
    readonly tableWebhookTestCallRequest: TableWebhookTestCallRequest;
}
/**
 * Request parameters for updateDatabaseTableWebhook operation in DatabaseTableWebhooksApi.
 * @export
 * @interface DatabaseTableWebhooksApiUpdateDatabaseTableWebhookRequest
 */
export interface DatabaseTableWebhooksApiUpdateDatabaseTableWebhookRequest {
    /**
     * Updates the webhook related to the provided value.
     * @type {number}
     * @memberof DatabaseTableWebhooksApiUpdateDatabaseTableWebhook
     */
    readonly webhookId: number;
    /**
     *
     * @type {PatchedTableWebhookUpdateRequest}
     * @memberof DatabaseTableWebhooksApiUpdateDatabaseTableWebhook
     */
    readonly patchedTableWebhookUpdateRequest?: PatchedTableWebhookUpdateRequest;
}
/**
 * DatabaseTableWebhooksApi - object-oriented interface
 * @export
 * @class DatabaseTableWebhooksApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTableWebhooksApi extends BaseAPI {
    /**
     * Creates a new webhook for the table related to the provided `table_id` parameter if the authorized user has access to the related database workspace.
     * @param {DatabaseTableWebhooksApiCreateDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableWebhooksApi
     */
    createDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiCreateDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TableWebhook, any>>;
    /**
     * Deletes the existing webhook if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTableWebhooksApiDeleteDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableWebhooksApi
     */
    deleteDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiDeleteDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the existing webhook if the authorized user has access to the related database workspace.
     * @param {DatabaseTableWebhooksApiGetDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableWebhooksApi
     */
    getDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiGetDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TableWebhook, any>>;
    /**
     * Lists all webhooks of the table related to the provided `table_id` if the user has access to the related database workspace.
     * @param {DatabaseTableWebhooksApiListDatabaseTableWebhooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableWebhooksApi
     */
    listDatabaseTableWebhooks(requestParameters: DatabaseTableWebhooksApiListDatabaseTableWebhooksRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TableWebhook[], any>>;
    /**
     * This endpoint triggers a test call based on the provided data if the user has access to the workspace related to the table. The test call will be made immediately and a copy of the request, response and status will be included in the response.
     * @param {DatabaseTableWebhooksApiTestCallDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableWebhooksApi
     */
    testCallDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiTestCallDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TableWebhookTestCallResponse, any>>;
    /**
     * Updates the existing view if the authorized user has access to the related database workspace.
     * @param {DatabaseTableWebhooksApiUpdateDatabaseTableWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTableWebhooksApi
     */
    updateDatabaseTableWebhook(requestParameters: DatabaseTableWebhooksApiUpdateDatabaseTableWebhookRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TableWebhook, any>>;
}
/**
 * DatabaseTablesApi - axios parameter creator
 * @export
 */
export declare const DatabaseTablesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates synchronously a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database\'s workspace.  As an alternative you can use the `create_async_database_table` for better performances and importing bigger files.
     * @param {number} databaseId Creates a table for the database related to the provided value.
     * @param {TableCreate} tableCreate
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTable: (databaseId: number, tableCreate: TableCreate, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a job that creates a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database\'s workspace. This endpoint is asynchronous and return the created job to track the progress of the task.
     * @param {number} databaseId Creates a table for the database related to the provided value.
     * @param {TableCreate} tableCreate
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableAsync: (databaseId: number, tableCreate: TableCreate, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing table if the authorized user has access to the related database\'s workspace.
     * @param {number} tableId Deletes the table related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTable: (tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Start a job to duplicate the table with the provided `table_id` parameter if the authorized user has access to the database\'s workspace.
     * @param {number} tableId The table to duplicate.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateDatabaseTableAsync: (tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the requested table if the authorized user has access to the related database\'s workspace.
     * @param {number} tableId Returns the table related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTable: (tableId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Import data in the specified table if the authorized user has access to the related database\'s workspace. This endpoint is asynchronous and return the created job to track the progress of the task.
     * @param {number} tableId Import data into the table related to the provided value.
     * @param {TableImport} tableImport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importDataDatabaseTableAsync: (tableId: number, tableImport: TableImport, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the tables that are in the database related to the `database_id` parameter if the user has access to the database\'s workspace. A table is exactly as the name suggests. It can hold multiple fields, each having their own type and multiple rows. They can be added via the **create_database_table_field** and **create_database_table_row** endpoints.
     * @param {number} databaseId Returns only tables that are related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTables: (databaseId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Changes the order of the provided table ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {number} databaseId Updates the order of the tables in the database related to the provided value.
     * @param {OrderTables} orderTables
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderDatabaseTables: (databaseId: number, orderTables: OrderTables, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing table if the authorized user has access to the related database\'s workspace.
     * @param {number} tableId Updates the table related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedTableUpdate} [patchedTableUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTable: (tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedTableUpdate?: PatchedTableUpdate, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTablesApi - functional programming interface
 * @export
 */
export declare const DatabaseTablesApiFp: (configuration?: Configuration) => {
    /**
     * Creates synchronously a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database\'s workspace.  As an alternative you can use the `create_async_database_table` for better performances and importing bigger files.
     * @param {number} databaseId Creates a table for the database related to the provided value.
     * @param {TableCreate} tableCreate
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTable(databaseId: number, tableCreate: TableCreate, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Table>>;
    /**
     * Creates a job that creates a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database\'s workspace. This endpoint is asynchronous and return the created job to track the progress of the task.
     * @param {number} databaseId Creates a table for the database related to the provided value.
     * @param {TableCreate} tableCreate
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableAsync(databaseId: number, tableCreate: TableCreate, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleFileImportJobSerializerClass>>;
    /**
     * Deletes the existing table if the authorized user has access to the related database\'s workspace.
     * @param {number} tableId Deletes the table related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTable(tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Start a job to duplicate the table with the provided `table_id` parameter if the authorized user has access to the database\'s workspace.
     * @param {number} tableId The table to duplicate.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateDatabaseTableAsync(tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleDuplicateTableJobType>>;
    /**
     * Returns the requested table if the authorized user has access to the related database\'s workspace.
     * @param {number} tableId Returns the table related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTable(tableId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Table>>;
    /**
     * Import data in the specified table if the authorized user has access to the related database\'s workspace. This endpoint is asynchronous and return the created job to track the progress of the task.
     * @param {number} tableId Import data into the table related to the provided value.
     * @param {TableImport} tableImport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importDataDatabaseTableAsync(tableId: number, tableImport: TableImport, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleFileImportJobSerializerClass>>;
    /**
     * Lists all the tables that are in the database related to the `database_id` parameter if the user has access to the database\'s workspace. A table is exactly as the name suggests. It can hold multiple fields, each having their own type and multiple rows. They can be added via the **create_database_table_field** and **create_database_table_row** endpoints.
     * @param {number} databaseId Returns only tables that are related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTables(databaseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Table>>>;
    /**
     * Changes the order of the provided table ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {number} databaseId Updates the order of the tables in the database related to the provided value.
     * @param {OrderTables} orderTables
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderDatabaseTables(databaseId: number, orderTables: OrderTables, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates the existing table if the authorized user has access to the related database\'s workspace.
     * @param {number} tableId Updates the table related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedTableUpdate} [patchedTableUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTable(tableId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedTableUpdate?: PatchedTableUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Table>>;
};
/**
 * DatabaseTablesApi - factory interface
 * @export
 */
export declare const DatabaseTablesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates synchronously a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database\'s workspace.  As an alternative you can use the `create_async_database_table` for better performances and importing bigger files.
     * @param {DatabaseTablesApiCreateDatabaseTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTable(requestParameters: DatabaseTablesApiCreateDatabaseTableRequest, options?: RawAxiosRequestConfig): AxiosPromise<Table>;
    /**
     * Creates a job that creates a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database\'s workspace. This endpoint is asynchronous and return the created job to track the progress of the task.
     * @param {DatabaseTablesApiCreateDatabaseTableAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseTableAsync(requestParameters: DatabaseTablesApiCreateDatabaseTableAsyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<SingleFileImportJobSerializerClass>;
    /**
     * Deletes the existing table if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTablesApiDeleteDatabaseTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseTable(requestParameters: DatabaseTablesApiDeleteDatabaseTableRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Start a job to duplicate the table with the provided `table_id` parameter if the authorized user has access to the database\'s workspace.
     * @param {DatabaseTablesApiDuplicateDatabaseTableAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    duplicateDatabaseTableAsync(requestParameters: DatabaseTablesApiDuplicateDatabaseTableAsyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<SingleDuplicateTableJobType>;
    /**
     * Returns the requested table if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTablesApiGetDatabaseTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseTable(requestParameters: DatabaseTablesApiGetDatabaseTableRequest, options?: RawAxiosRequestConfig): AxiosPromise<Table>;
    /**
     * Import data in the specified table if the authorized user has access to the related database\'s workspace. This endpoint is asynchronous and return the created job to track the progress of the task.
     * @param {DatabaseTablesApiImportDataDatabaseTableAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importDataDatabaseTableAsync(requestParameters: DatabaseTablesApiImportDataDatabaseTableAsyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<SingleFileImportJobSerializerClass>;
    /**
     * Lists all the tables that are in the database related to the `database_id` parameter if the user has access to the database\'s workspace. A table is exactly as the name suggests. It can hold multiple fields, each having their own type and multiple rows. They can be added via the **create_database_table_field** and **create_database_table_row** endpoints.
     * @param {DatabaseTablesApiListDatabaseTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTables(requestParameters: DatabaseTablesApiListDatabaseTablesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Table>>;
    /**
     * Changes the order of the provided table ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {DatabaseTablesApiOrderDatabaseTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderDatabaseTables(requestParameters: DatabaseTablesApiOrderDatabaseTablesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates the existing table if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTablesApiUpdateDatabaseTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseTable(requestParameters: DatabaseTablesApiUpdateDatabaseTableRequest, options?: RawAxiosRequestConfig): AxiosPromise<Table>;
};
/**
 * Request parameters for createDatabaseTable operation in DatabaseTablesApi.
 * @export
 * @interface DatabaseTablesApiCreateDatabaseTableRequest
 */
export interface DatabaseTablesApiCreateDatabaseTableRequest {
    /**
     * Creates a table for the database related to the provided value.
     * @type {number}
     * @memberof DatabaseTablesApiCreateDatabaseTable
     */
    readonly databaseId: number;
    /**
     *
     * @type {TableCreate}
     * @memberof DatabaseTablesApiCreateDatabaseTable
     */
    readonly tableCreate: TableCreate;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTablesApiCreateDatabaseTable
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTablesApiCreateDatabaseTable
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for createDatabaseTableAsync operation in DatabaseTablesApi.
 * @export
 * @interface DatabaseTablesApiCreateDatabaseTableAsyncRequest
 */
export interface DatabaseTablesApiCreateDatabaseTableAsyncRequest {
    /**
     * Creates a table for the database related to the provided value.
     * @type {number}
     * @memberof DatabaseTablesApiCreateDatabaseTableAsync
     */
    readonly databaseId: number;
    /**
     *
     * @type {TableCreate}
     * @memberof DatabaseTablesApiCreateDatabaseTableAsync
     */
    readonly tableCreate: TableCreate;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTablesApiCreateDatabaseTableAsync
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for deleteDatabaseTable operation in DatabaseTablesApi.
 * @export
 * @interface DatabaseTablesApiDeleteDatabaseTableRequest
 */
export interface DatabaseTablesApiDeleteDatabaseTableRequest {
    /**
     * Deletes the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTablesApiDeleteDatabaseTable
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTablesApiDeleteDatabaseTable
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTablesApiDeleteDatabaseTable
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for duplicateDatabaseTableAsync operation in DatabaseTablesApi.
 * @export
 * @interface DatabaseTablesApiDuplicateDatabaseTableAsyncRequest
 */
export interface DatabaseTablesApiDuplicateDatabaseTableAsyncRequest {
    /**
     * The table to duplicate.
     * @type {number}
     * @memberof DatabaseTablesApiDuplicateDatabaseTableAsync
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTablesApiDuplicateDatabaseTableAsync
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTablesApiDuplicateDatabaseTableAsync
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for getDatabaseTable operation in DatabaseTablesApi.
 * @export
 * @interface DatabaseTablesApiGetDatabaseTableRequest
 */
export interface DatabaseTablesApiGetDatabaseTableRequest {
    /**
     * Returns the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTablesApiGetDatabaseTable
     */
    readonly tableId: number;
}
/**
 * Request parameters for importDataDatabaseTableAsync operation in DatabaseTablesApi.
 * @export
 * @interface DatabaseTablesApiImportDataDatabaseTableAsyncRequest
 */
export interface DatabaseTablesApiImportDataDatabaseTableAsyncRequest {
    /**
     * Import data into the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTablesApiImportDataDatabaseTableAsync
     */
    readonly tableId: number;
    /**
     *
     * @type {TableImport}
     * @memberof DatabaseTablesApiImportDataDatabaseTableAsync
     */
    readonly tableImport: TableImport;
}
/**
 * Request parameters for listDatabaseTables operation in DatabaseTablesApi.
 * @export
 * @interface DatabaseTablesApiListDatabaseTablesRequest
 */
export interface DatabaseTablesApiListDatabaseTablesRequest {
    /**
     * Returns only tables that are related to the provided value.
     * @type {number}
     * @memberof DatabaseTablesApiListDatabaseTables
     */
    readonly databaseId: number;
}
/**
 * Request parameters for orderDatabaseTables operation in DatabaseTablesApi.
 * @export
 * @interface DatabaseTablesApiOrderDatabaseTablesRequest
 */
export interface DatabaseTablesApiOrderDatabaseTablesRequest {
    /**
     * Updates the order of the tables in the database related to the provided value.
     * @type {number}
     * @memberof DatabaseTablesApiOrderDatabaseTables
     */
    readonly databaseId: number;
    /**
     *
     * @type {OrderTables}
     * @memberof DatabaseTablesApiOrderDatabaseTables
     */
    readonly orderTables: OrderTables;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTablesApiOrderDatabaseTables
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTablesApiOrderDatabaseTables
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for updateDatabaseTable operation in DatabaseTablesApi.
 * @export
 * @interface DatabaseTablesApiUpdateDatabaseTableRequest
 */
export interface DatabaseTablesApiUpdateDatabaseTableRequest {
    /**
     * Updates the table related to the provided value.
     * @type {number}
     * @memberof DatabaseTablesApiUpdateDatabaseTable
     */
    readonly tableId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof DatabaseTablesApiUpdateDatabaseTable
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof DatabaseTablesApiUpdateDatabaseTable
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedTableUpdate}
     * @memberof DatabaseTablesApiUpdateDatabaseTable
     */
    readonly patchedTableUpdate?: PatchedTableUpdate;
}
/**
 * DatabaseTablesApi - object-oriented interface
 * @export
 * @class DatabaseTablesApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTablesApi extends BaseAPI {
    /**
     * Creates synchronously a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database\'s workspace.  As an alternative you can use the `create_async_database_table` for better performances and importing bigger files.
     * @param {DatabaseTablesApiCreateDatabaseTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTablesApi
     */
    createDatabaseTable(requestParameters: DatabaseTablesApiCreateDatabaseTableRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Table, any>>;
    /**
     * Creates a job that creates a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database\'s workspace. This endpoint is asynchronous and return the created job to track the progress of the task.
     * @param {DatabaseTablesApiCreateDatabaseTableAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTablesApi
     */
    createDatabaseTableAsync(requestParameters: DatabaseTablesApiCreateDatabaseTableAsyncRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleFileImportJobSerializerClass, any>>;
    /**
     * Deletes the existing table if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTablesApiDeleteDatabaseTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTablesApi
     */
    deleteDatabaseTable(requestParameters: DatabaseTablesApiDeleteDatabaseTableRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Start a job to duplicate the table with the provided `table_id` parameter if the authorized user has access to the database\'s workspace.
     * @param {DatabaseTablesApiDuplicateDatabaseTableAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTablesApi
     */
    duplicateDatabaseTableAsync(requestParameters: DatabaseTablesApiDuplicateDatabaseTableAsyncRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleDuplicateTableJobType, any>>;
    /**
     * Returns the requested table if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTablesApiGetDatabaseTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTablesApi
     */
    getDatabaseTable(requestParameters: DatabaseTablesApiGetDatabaseTableRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Table, any>>;
    /**
     * Import data in the specified table if the authorized user has access to the related database\'s workspace. This endpoint is asynchronous and return the created job to track the progress of the task.
     * @param {DatabaseTablesApiImportDataDatabaseTableAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTablesApi
     */
    importDataDatabaseTableAsync(requestParameters: DatabaseTablesApiImportDataDatabaseTableAsyncRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleFileImportJobSerializerClass, any>>;
    /**
     * Lists all the tables that are in the database related to the `database_id` parameter if the user has access to the database\'s workspace. A table is exactly as the name suggests. It can hold multiple fields, each having their own type and multiple rows. They can be added via the **create_database_table_field** and **create_database_table_row** endpoints.
     * @param {DatabaseTablesApiListDatabaseTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTablesApi
     */
    listDatabaseTables(requestParameters: DatabaseTablesApiListDatabaseTablesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Table[], any>>;
    /**
     * Changes the order of the provided table ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order of the not provided tables will be set to `0`.
     * @param {DatabaseTablesApiOrderDatabaseTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTablesApi
     */
    orderDatabaseTables(requestParameters: DatabaseTablesApiOrderDatabaseTablesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates the existing table if the authorized user has access to the related database\'s workspace.
     * @param {DatabaseTablesApiUpdateDatabaseTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTablesApi
     */
    updateDatabaseTable(requestParameters: DatabaseTablesApiUpdateDatabaseTableRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Table, any>>;
}
/**
 * DatabaseTokensApi - axios parameter creator
 * @export
 */
export declare const DatabaseTokensApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint check be used to check if the provided personal API token is valid. If returns a `200` response if so and a `403` is not. This can be used by integrations like Zapier or n8n to test if a token is valid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkDatabaseToken: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new database token for a given workspace and for the authorized user.
     * @param {TokenCreate} tokenCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseToken: (tokenCreate: TokenCreate, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the existing database token if it is owned by the authorized user and ifthe user has access to the related workspace.
     * @param {number} tokenId Deletes the database token related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseToken: (tokenId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the requested database token if it is owned by the authorized user andif the user has access to the related workspace.
     * @param {number} tokenId Returns the database token related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseToken: (tokenId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the database tokens that belong to the authorized user. A token can be used to create, read, update and delete rows in the tables of the token\'s workspace. It only works on the tables if the token has the correct permissions. The **Database table rows** endpoints can be used for these operations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTokens: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing database token if it is owned by the authorized user and ifthe user has access to the related workspace.
     * @param {number} tokenId Updates the database token related to the provided value.
     * @param {PatchedTokenUpdate} [patchedTokenUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseToken: (tokenId: number, patchedTokenUpdate?: PatchedTokenUpdate, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseTokensApi - functional programming interface
 * @export
 */
export declare const DatabaseTokensApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint check be used to check if the provided personal API token is valid. If returns a `200` response if so and a `403` is not. This can be used by integrations like Zapier or n8n to test if a token is valid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkDatabaseToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Creates a new database token for a given workspace and for the authorized user.
     * @param {TokenCreate} tokenCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseToken(tokenCreate: TokenCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
    /**
     * Deletes the existing database token if it is owned by the authorized user and ifthe user has access to the related workspace.
     * @param {number} tokenId Deletes the database token related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseToken(tokenId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the requested database token if it is owned by the authorized user andif the user has access to the related workspace.
     * @param {number} tokenId Returns the database token related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseToken(tokenId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
    /**
     * Lists all the database tokens that belong to the authorized user. A token can be used to create, read, update and delete rows in the tables of the token\'s workspace. It only works on the tables if the token has the correct permissions. The **Database table rows** endpoints can be used for these operations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTokens(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     * Updates the existing database token if it is owned by the authorized user and ifthe user has access to the related workspace.
     * @param {number} tokenId Updates the database token related to the provided value.
     * @param {PatchedTokenUpdate} [patchedTokenUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseToken(tokenId: number, patchedTokenUpdate?: PatchedTokenUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
};
/**
 * DatabaseTokensApi - factory interface
 * @export
 */
export declare const DatabaseTokensApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint check be used to check if the provided personal API token is valid. If returns a `200` response if so and a `403` is not. This can be used by integrations like Zapier or n8n to test if a token is valid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkDatabaseToken(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Creates a new database token for a given workspace and for the authorized user.
     * @param {DatabaseTokensApiCreateDatabaseTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseToken(requestParameters: DatabaseTokensApiCreateDatabaseTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<Token>;
    /**
     * Deletes the existing database token if it is owned by the authorized user and ifthe user has access to the related workspace.
     * @param {DatabaseTokensApiDeleteDatabaseTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabaseToken(requestParameters: DatabaseTokensApiDeleteDatabaseTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns the requested database token if it is owned by the authorized user andif the user has access to the related workspace.
     * @param {DatabaseTokensApiGetDatabaseTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseToken(requestParameters: DatabaseTokensApiGetDatabaseTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<Token>;
    /**
     * Lists all the database tokens that belong to the authorized user. A token can be used to create, read, update and delete rows in the tables of the token\'s workspace. It only works on the tables if the token has the correct permissions. The **Database table rows** endpoints can be used for these operations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabaseTokens(options?: RawAxiosRequestConfig): AxiosPromise<Array<Token>>;
    /**
     * Updates the existing database token if it is owned by the authorized user and ifthe user has access to the related workspace.
     * @param {DatabaseTokensApiUpdateDatabaseTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDatabaseToken(requestParameters: DatabaseTokensApiUpdateDatabaseTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<Token>;
};
/**
 * Request parameters for createDatabaseToken operation in DatabaseTokensApi.
 * @export
 * @interface DatabaseTokensApiCreateDatabaseTokenRequest
 */
export interface DatabaseTokensApiCreateDatabaseTokenRequest {
    /**
     *
     * @type {TokenCreate}
     * @memberof DatabaseTokensApiCreateDatabaseToken
     */
    readonly tokenCreate: TokenCreate;
}
/**
 * Request parameters for deleteDatabaseToken operation in DatabaseTokensApi.
 * @export
 * @interface DatabaseTokensApiDeleteDatabaseTokenRequest
 */
export interface DatabaseTokensApiDeleteDatabaseTokenRequest {
    /**
     * Deletes the database token related to the provided value.
     * @type {number}
     * @memberof DatabaseTokensApiDeleteDatabaseToken
     */
    readonly tokenId: number;
}
/**
 * Request parameters for getDatabaseToken operation in DatabaseTokensApi.
 * @export
 * @interface DatabaseTokensApiGetDatabaseTokenRequest
 */
export interface DatabaseTokensApiGetDatabaseTokenRequest {
    /**
     * Returns the database token related to the provided value.
     * @type {number}
     * @memberof DatabaseTokensApiGetDatabaseToken
     */
    readonly tokenId: number;
}
/**
 * Request parameters for updateDatabaseToken operation in DatabaseTokensApi.
 * @export
 * @interface DatabaseTokensApiUpdateDatabaseTokenRequest
 */
export interface DatabaseTokensApiUpdateDatabaseTokenRequest {
    /**
     * Updates the database token related to the provided value.
     * @type {number}
     * @memberof DatabaseTokensApiUpdateDatabaseToken
     */
    readonly tokenId: number;
    /**
     *
     * @type {PatchedTokenUpdate}
     * @memberof DatabaseTokensApiUpdateDatabaseToken
     */
    readonly patchedTokenUpdate?: PatchedTokenUpdate;
}
/**
 * DatabaseTokensApi - object-oriented interface
 * @export
 * @class DatabaseTokensApi
 * @extends {BaseAPI}
 */
export declare class DatabaseTokensApi extends BaseAPI {
    /**
     * This endpoint check be used to check if the provided personal API token is valid. If returns a `200` response if so and a `403` is not. This can be used by integrations like Zapier or n8n to test if a token is valid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTokensApi
     */
    checkDatabaseToken(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Creates a new database token for a given workspace and for the authorized user.
     * @param {DatabaseTokensApiCreateDatabaseTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTokensApi
     */
    createDatabaseToken(requestParameters: DatabaseTokensApiCreateDatabaseTokenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Token, any>>;
    /**
     * Deletes the existing database token if it is owned by the authorized user and ifthe user has access to the related workspace.
     * @param {DatabaseTokensApiDeleteDatabaseTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTokensApi
     */
    deleteDatabaseToken(requestParameters: DatabaseTokensApiDeleteDatabaseTokenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the requested database token if it is owned by the authorized user andif the user has access to the related workspace.
     * @param {DatabaseTokensApiGetDatabaseTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTokensApi
     */
    getDatabaseToken(requestParameters: DatabaseTokensApiGetDatabaseTokenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Token, any>>;
    /**
     * Lists all the database tokens that belong to the authorized user. A token can be used to create, read, update and delete rows in the tables of the token\'s workspace. It only works on the tables if the token has the correct permissions. The **Database table rows** endpoints can be used for these operations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTokensApi
     */
    listDatabaseTokens(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Token[], any>>;
    /**
     * Updates the existing database token if it is owned by the authorized user and ifthe user has access to the related workspace.
     * @param {DatabaseTokensApiUpdateDatabaseTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseTokensApi
     */
    updateDatabaseToken(requestParameters: DatabaseTokensApiUpdateDatabaseTokenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Token, any>>;
}
/**
 * GroupInvitationsApi - axios parameter creator
 * @export
 */
export declare const GroupInvitationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [accept_workspace_invitation](#tag/Workspace-invitations/operation/accept_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Accepts a group invitation with the given id if the email address of the user matches that of the invitation.
     * @param {number} groupInvitationId Accepts the group invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    acceptGroupInvitation: (groupInvitationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [create_workspace_invitation](#tag/Workspace-invitations/operation/create_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Creates a new group invitations for an email address if the authorized user has admin rights to the related group. An email containing a sign up link will be send to the user.
     * @param {number} groupId Creates a group invitation to the group related to the provided value.
     * @param {CreateWorkspaceInvitation} createWorkspaceInvitation
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createGroupInvitation: (groupId: number, createWorkspaceInvitation: CreateWorkspaceInvitation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace_invitation](#tag/Workspace-invitations/operation/delete_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Deletes a group invitation if the authorized user has admin rights to the related group.
     * @param {number} groupInvitationId Deletes the group invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteGroupInvitation: (groupInvitationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [get_workspace_invitation](#tag/Workspace-invitations/operation/get_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Returns the requested group invitation if the authorized user has admin right to the related group
     * @param {number} groupInvitationId Returns the group invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getGroupInvitation: (groupInvitationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [get_workspace_invitation_by_token](#tag/Workspace-invitations/operation/get_workspace_invitation_by_token).**  **Support for this endpoint will end in 2024.**   Responds with the serialized group invitation if an invitation with the provided token is found.
     * @param {string} token Returns the group invitation related to the provided token.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getGroupInvitationByToken: (token: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspace_invitations](#tag/Workspace-invitations/operation/list_workspace_invitations).**  **Support for this endpoint will end in 2024.**   Lists all the group invitations of the group related to the provided `group_id` parameter if the authorized user has admin rights to that group.
     * @param {number} groupId Returns only invitations that are in the group related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listGroupInvitations: (groupId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [reject_workspace_invitation](#tag/Workspace-invitations/operation/reject_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Rejects a group invitation with the given id if the email address of the user matches that of the invitation.
     * @param {number} groupInvitationId Rejects the group invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    rejectGroupInvitation: (groupInvitationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace_invitation](#tag/Workspace-invitations/operation/update_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Updates the existing group invitation related to the provided `group_invitation_id` param if the authorized user has admin rights to the related group.
     * @param {number} groupInvitationId Updates the group invitation related to the provided value.
     * @param {PatchedUpdateWorkspaceInvitation} [patchedUpdateWorkspaceInvitation]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateGroupInvitation: (groupInvitationId: number, patchedUpdateWorkspaceInvitation?: PatchedUpdateWorkspaceInvitation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GroupInvitationsApi - functional programming interface
 * @export
 */
export declare const GroupInvitationsApiFp: (configuration?: Configuration) => {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [accept_workspace_invitation](#tag/Workspace-invitations/operation/accept_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Accepts a group invitation with the given id if the email address of the user matches that of the invitation.
     * @param {number} groupInvitationId Accepts the group invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    acceptGroupInvitation(groupInvitationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUserWorkspace>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [create_workspace_invitation](#tag/Workspace-invitations/operation/create_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Creates a new group invitations for an email address if the authorized user has admin rights to the related group. An email containing a sign up link will be send to the user.
     * @param {number} groupId Creates a group invitation to the group related to the provided value.
     * @param {CreateWorkspaceInvitation} createWorkspaceInvitation
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createGroupInvitation(groupId: number, createWorkspaceInvitation: CreateWorkspaceInvitation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceInvitation>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace_invitation](#tag/Workspace-invitations/operation/delete_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Deletes a group invitation if the authorized user has admin rights to the related group.
     * @param {number} groupInvitationId Deletes the group invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteGroupInvitation(groupInvitationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [get_workspace_invitation](#tag/Workspace-invitations/operation/get_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Returns the requested group invitation if the authorized user has admin right to the related group
     * @param {number} groupInvitationId Returns the group invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getGroupInvitation(groupInvitationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceInvitation>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [get_workspace_invitation_by_token](#tag/Workspace-invitations/operation/get_workspace_invitation_by_token).**  **Support for this endpoint will end in 2024.**   Responds with the serialized group invitation if an invitation with the provided token is found.
     * @param {string} token Returns the group invitation related to the provided token.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getGroupInvitationByToken(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWorkspaceInvitation>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspace_invitations](#tag/Workspace-invitations/operation/list_workspace_invitations).**  **Support for this endpoint will end in 2024.**   Lists all the group invitations of the group related to the provided `group_id` parameter if the authorized user has admin rights to that group.
     * @param {number} groupId Returns only invitations that are in the group related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listGroupInvitations(groupId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkspaceInvitation>>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [reject_workspace_invitation](#tag/Workspace-invitations/operation/reject_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Rejects a group invitation with the given id if the email address of the user matches that of the invitation.
     * @param {number} groupInvitationId Rejects the group invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    rejectGroupInvitation(groupInvitationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace_invitation](#tag/Workspace-invitations/operation/update_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Updates the existing group invitation related to the provided `group_invitation_id` param if the authorized user has admin rights to the related group.
     * @param {number} groupInvitationId Updates the group invitation related to the provided value.
     * @param {PatchedUpdateWorkspaceInvitation} [patchedUpdateWorkspaceInvitation]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateGroupInvitation(groupInvitationId: number, patchedUpdateWorkspaceInvitation?: PatchedUpdateWorkspaceInvitation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceInvitation>>;
};
/**
 * GroupInvitationsApi - factory interface
 * @export
 */
export declare const GroupInvitationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [accept_workspace_invitation](#tag/Workspace-invitations/operation/accept_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Accepts a group invitation with the given id if the email address of the user matches that of the invitation.
     * @param {GroupInvitationsApiAcceptGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    acceptGroupInvitation(requestParameters: GroupInvitationsApiAcceptGroupInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceUserWorkspace>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [create_workspace_invitation](#tag/Workspace-invitations/operation/create_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Creates a new group invitations for an email address if the authorized user has admin rights to the related group. An email containing a sign up link will be send to the user.
     * @param {GroupInvitationsApiCreateGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createGroupInvitation(requestParameters: GroupInvitationsApiCreateGroupInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceInvitation>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace_invitation](#tag/Workspace-invitations/operation/delete_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Deletes a group invitation if the authorized user has admin rights to the related group.
     * @param {GroupInvitationsApiDeleteGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteGroupInvitation(requestParameters: GroupInvitationsApiDeleteGroupInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [get_workspace_invitation](#tag/Workspace-invitations/operation/get_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Returns the requested group invitation if the authorized user has admin right to the related group
     * @param {GroupInvitationsApiGetGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getGroupInvitation(requestParameters: GroupInvitationsApiGetGroupInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceInvitation>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [get_workspace_invitation_by_token](#tag/Workspace-invitations/operation/get_workspace_invitation_by_token).**  **Support for this endpoint will end in 2024.**   Responds with the serialized group invitation if an invitation with the provided token is found.
     * @param {GroupInvitationsApiGetGroupInvitationByTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getGroupInvitationByToken(requestParameters: GroupInvitationsApiGetGroupInvitationByTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserWorkspaceInvitation>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspace_invitations](#tag/Workspace-invitations/operation/list_workspace_invitations).**  **Support for this endpoint will end in 2024.**   Lists all the group invitations of the group related to the provided `group_id` parameter if the authorized user has admin rights to that group.
     * @param {GroupInvitationsApiListGroupInvitationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listGroupInvitations(requestParameters: GroupInvitationsApiListGroupInvitationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkspaceInvitation>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [reject_workspace_invitation](#tag/Workspace-invitations/operation/reject_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Rejects a group invitation with the given id if the email address of the user matches that of the invitation.
     * @param {GroupInvitationsApiRejectGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    rejectGroupInvitation(requestParameters: GroupInvitationsApiRejectGroupInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace_invitation](#tag/Workspace-invitations/operation/update_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Updates the existing group invitation related to the provided `group_invitation_id` param if the authorized user has admin rights to the related group.
     * @param {GroupInvitationsApiUpdateGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateGroupInvitation(requestParameters: GroupInvitationsApiUpdateGroupInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceInvitation>;
};
/**
 * Request parameters for acceptGroupInvitation operation in GroupInvitationsApi.
 * @export
 * @interface GroupInvitationsApiAcceptGroupInvitationRequest
 */
export interface GroupInvitationsApiAcceptGroupInvitationRequest {
    /**
     * Accepts the group invitation related to the provided value.
     * @type {number}
     * @memberof GroupInvitationsApiAcceptGroupInvitation
     */
    readonly groupInvitationId: number;
}
/**
 * Request parameters for createGroupInvitation operation in GroupInvitationsApi.
 * @export
 * @interface GroupInvitationsApiCreateGroupInvitationRequest
 */
export interface GroupInvitationsApiCreateGroupInvitationRequest {
    /**
     * Creates a group invitation to the group related to the provided value.
     * @type {number}
     * @memberof GroupInvitationsApiCreateGroupInvitation
     */
    readonly groupId: number;
    /**
     *
     * @type {CreateWorkspaceInvitation}
     * @memberof GroupInvitationsApiCreateGroupInvitation
     */
    readonly createWorkspaceInvitation: CreateWorkspaceInvitation;
}
/**
 * Request parameters for deleteGroupInvitation operation in GroupInvitationsApi.
 * @export
 * @interface GroupInvitationsApiDeleteGroupInvitationRequest
 */
export interface GroupInvitationsApiDeleteGroupInvitationRequest {
    /**
     * Deletes the group invitation related to the provided value.
     * @type {number}
     * @memberof GroupInvitationsApiDeleteGroupInvitation
     */
    readonly groupInvitationId: number;
}
/**
 * Request parameters for getGroupInvitation operation in GroupInvitationsApi.
 * @export
 * @interface GroupInvitationsApiGetGroupInvitationRequest
 */
export interface GroupInvitationsApiGetGroupInvitationRequest {
    /**
     * Returns the group invitation related to the provided value.
     * @type {number}
     * @memberof GroupInvitationsApiGetGroupInvitation
     */
    readonly groupInvitationId: number;
}
/**
 * Request parameters for getGroupInvitationByToken operation in GroupInvitationsApi.
 * @export
 * @interface GroupInvitationsApiGetGroupInvitationByTokenRequest
 */
export interface GroupInvitationsApiGetGroupInvitationByTokenRequest {
    /**
     * Returns the group invitation related to the provided token.
     * @type {string}
     * @memberof GroupInvitationsApiGetGroupInvitationByToken
     */
    readonly token: string;
}
/**
 * Request parameters for listGroupInvitations operation in GroupInvitationsApi.
 * @export
 * @interface GroupInvitationsApiListGroupInvitationsRequest
 */
export interface GroupInvitationsApiListGroupInvitationsRequest {
    /**
     * Returns only invitations that are in the group related to the provided value.
     * @type {number}
     * @memberof GroupInvitationsApiListGroupInvitations
     */
    readonly groupId: number;
}
/**
 * Request parameters for rejectGroupInvitation operation in GroupInvitationsApi.
 * @export
 * @interface GroupInvitationsApiRejectGroupInvitationRequest
 */
export interface GroupInvitationsApiRejectGroupInvitationRequest {
    /**
     * Rejects the group invitation related to the provided value.
     * @type {number}
     * @memberof GroupInvitationsApiRejectGroupInvitation
     */
    readonly groupInvitationId: number;
}
/**
 * Request parameters for updateGroupInvitation operation in GroupInvitationsApi.
 * @export
 * @interface GroupInvitationsApiUpdateGroupInvitationRequest
 */
export interface GroupInvitationsApiUpdateGroupInvitationRequest {
    /**
     * Updates the group invitation related to the provided value.
     * @type {number}
     * @memberof GroupInvitationsApiUpdateGroupInvitation
     */
    readonly groupInvitationId: number;
    /**
     *
     * @type {PatchedUpdateWorkspaceInvitation}
     * @memberof GroupInvitationsApiUpdateGroupInvitation
     */
    readonly patchedUpdateWorkspaceInvitation?: PatchedUpdateWorkspaceInvitation;
}
/**
 * GroupInvitationsApi - object-oriented interface
 * @export
 * @class GroupInvitationsApi
 * @extends {BaseAPI}
 */
export declare class GroupInvitationsApi extends BaseAPI {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [accept_workspace_invitation](#tag/Workspace-invitations/operation/accept_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Accepts a group invitation with the given id if the email address of the user matches that of the invitation.
     * @param {GroupInvitationsApiAcceptGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupInvitationsApi
     */
    acceptGroupInvitation(requestParameters: GroupInvitationsApiAcceptGroupInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceUserWorkspace, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [create_workspace_invitation](#tag/Workspace-invitations/operation/create_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Creates a new group invitations for an email address if the authorized user has admin rights to the related group. An email containing a sign up link will be send to the user.
     * @param {GroupInvitationsApiCreateGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupInvitationsApi
     */
    createGroupInvitation(requestParameters: GroupInvitationsApiCreateGroupInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceInvitation, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace_invitation](#tag/Workspace-invitations/operation/delete_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Deletes a group invitation if the authorized user has admin rights to the related group.
     * @param {GroupInvitationsApiDeleteGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupInvitationsApi
     */
    deleteGroupInvitation(requestParameters: GroupInvitationsApiDeleteGroupInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [get_workspace_invitation](#tag/Workspace-invitations/operation/get_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Returns the requested group invitation if the authorized user has admin right to the related group
     * @param {GroupInvitationsApiGetGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupInvitationsApi
     */
    getGroupInvitation(requestParameters: GroupInvitationsApiGetGroupInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceInvitation, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [get_workspace_invitation_by_token](#tag/Workspace-invitations/operation/get_workspace_invitation_by_token).**  **Support for this endpoint will end in 2024.**   Responds with the serialized group invitation if an invitation with the provided token is found.
     * @param {GroupInvitationsApiGetGroupInvitationByTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupInvitationsApi
     */
    getGroupInvitationByToken(requestParameters: GroupInvitationsApiGetGroupInvitationByTokenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserWorkspaceInvitation, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspace_invitations](#tag/Workspace-invitations/operation/list_workspace_invitations).**  **Support for this endpoint will end in 2024.**   Lists all the group invitations of the group related to the provided `group_id` parameter if the authorized user has admin rights to that group.
     * @param {GroupInvitationsApiListGroupInvitationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupInvitationsApi
     */
    listGroupInvitations(requestParameters: GroupInvitationsApiListGroupInvitationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceInvitation[], any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [reject_workspace_invitation](#tag/Workspace-invitations/operation/reject_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Rejects a group invitation with the given id if the email address of the user matches that of the invitation.
     * @param {GroupInvitationsApiRejectGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupInvitationsApi
     */
    rejectGroupInvitation(requestParameters: GroupInvitationsApiRejectGroupInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace_invitation](#tag/Workspace-invitations/operation/update_workspace_invitation).**  **Support for this endpoint will end in 2024.**   Updates the existing group invitation related to the provided `group_invitation_id` param if the authorized user has admin rights to the related group.
     * @param {GroupInvitationsApiUpdateGroupInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupInvitationsApi
     */
    updateGroupInvitation(requestParameters: GroupInvitationsApiUpdateGroupInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceInvitation, any>>;
}
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export declare const GroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [create_workspace](#tag/Workspaces/operation/create_workspace).**  **Support for this endpoint will end in 2024.**   Creates a new group where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.
     * @param {Workspace} workspace
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createGroup: (workspace: Workspace, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace](#tag/Workspaces/operation/delete_workspace).**  **Support for this endpoint will end in 2024.**   Deletes an existing group if the authorized user belongs to the group. All the applications, databases, tables etc that were in the group are going to be deleted also.
     * @param {number} groupId Deletes the group related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteGroup: (groupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace_user](#tag/Workspaces/operation/delete_workspace_user).**   Deletes a group user if the authorized user has admin rights to the related group.
     * @param {number} groupUserId Deletes the group user related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteGroupUser: (groupUserId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_permissions](#tag/Workspaces/operation/workspace_permissions).**  **Support for this endpoint will end in 2024.**   Returns a the permission data necessary to determine the permissions of a specific user over a specific group.  See `core.handler.CoreHandler.get_permissions()` for more details.
     * @param {number} groupId The group id we want the permission object for.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupPermissions: (groupId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [leave_workspace](#tag/Workspaces/operation/leave_workspace).**  **Support for this endpoint will end in 2024.**   Makes the authenticated user leave the group related to the provided `group_id` if the user is in that group. If the user is the last admin in the group, they will not be able to leave it. There must always be one admin in the group, otherwise it will be left without control. If that is the case, they must either delete the group or give another member admin permissions first.
     * @param {number} groupId Leaves the group related to the value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    leaveGroup: (groupId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspace_users](#tag/Workspaces/operation/list_workspace_users).**   Lists all the users that are in a group if the authorized user has admin permissions to the related group. To add a user to a group an invitation must be sent first.
     * @param {number} groupId Lists group users related to the provided group value.
     * @param {string} [search] Search for group users by username, or email.
     * @param {string} [sorts] Sort group users by name, email or role.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listGroupUsers: (groupId: number, search?: string, sorts?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspaces](#tag/Workspaces/operation/list_workspaces).**  **Support for this endpoint will end in 2024.**   Lists all the groups of the authorized user. A group can contain multiple applications like a database. Multiple users can have access to a group. For example each company could have their own group containing databases related to that company. The order of the groups are custom for each user. The order is configurable via the **order_groups** endpoint.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listGroups: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [order_workspaces](#tag/Workspaces/operation/order_workspaces).**  **Support for this endpoint will end in 2024.**   Changes the order of the provided group ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order will be custom for each user.
     * @param {OrderWorkspaces} orderWorkspaces
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    orderGroups: (orderWorkspaces: OrderWorkspaces, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace](#tag/Workspaces/operation/update_workspace).**  **Support for this endpoint will end in 2024.**   Updates the existing group related to the provided `group_id` parameter if the authorized user belongs to the group. It is not yet possible to add additional users to a group.
     * @param {number} groupId Updates the group related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedWorkspace} [patchedWorkspace]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateGroup: (groupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedWorkspace?: PatchedWorkspace, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace_user](#tag/Workspaces/operation/update_workspace_user).**   Updates the existing group user related to the provided `group_user_id` param if the authorized user has admin rights to the related group.
     * @param {number} groupUserId Updates the group user related to the provided value.
     * @param {PatchedUpdateWorkspaceUser} [patchedUpdateWorkspaceUser]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateGroupUser: (groupUserId: number, patchedUpdateWorkspaceUser?: PatchedUpdateWorkspaceUser, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GroupsApi - functional programming interface
 * @export
 */
export declare const GroupsApiFp: (configuration?: Configuration) => {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [create_workspace](#tag/Workspaces/operation/create_workspace).**  **Support for this endpoint will end in 2024.**   Creates a new group where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.
     * @param {Workspace} workspace
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createGroup(workspace: Workspace, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUserWorkspace>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace](#tag/Workspaces/operation/delete_workspace).**  **Support for this endpoint will end in 2024.**   Deletes an existing group if the authorized user belongs to the group. All the applications, databases, tables etc that were in the group are going to be deleted also.
     * @param {number} groupId Deletes the group related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteGroup(groupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace_user](#tag/Workspaces/operation/delete_workspace_user).**   Deletes a group user if the authorized user has admin rights to the related group.
     * @param {number} groupUserId Deletes the group user related to the provided value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteGroupUser(groupUserId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_permissions](#tag/Workspaces/operation/workspace_permissions).**  **Support for this endpoint will end in 2024.**   Returns a the permission data necessary to determine the permissions of a specific user over a specific group.  See `core.handler.CoreHandler.get_permissions()` for more details.
     * @param {number} groupId The group id we want the permission object for.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupPermissions(groupId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionObject>>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [leave_workspace](#tag/Workspaces/operation/leave_workspace).**  **Support for this endpoint will end in 2024.**   Makes the authenticated user leave the group related to the provided `group_id` if the user is in that group. If the user is the last admin in the group, they will not be able to leave it. There must always be one admin in the group, otherwise it will be left without control. If that is the case, they must either delete the group or give another member admin permissions first.
     * @param {number} groupId Leaves the group related to the value.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    leaveGroup(groupId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspace_users](#tag/Workspaces/operation/list_workspace_users).**   Lists all the users that are in a group if the authorized user has admin permissions to the related group. To add a user to a group an invitation must be sent first.
     * @param {number} groupId Lists group users related to the provided group value.
     * @param {string} [search] Search for group users by username, or email.
     * @param {string} [sorts] Sort group users by name, email or role.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listGroupUsers(groupId: number, search?: string, sorts?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListWorkspaceUsersWithMemberData>>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspaces](#tag/Workspaces/operation/list_workspaces).**  **Support for this endpoint will end in 2024.**   Lists all the groups of the authorized user. A group can contain multiple applications like a database. Multiple users can have access to a group. For example each company could have their own group containing databases related to that company. The order of the groups are custom for each user. The order is configurable via the **order_groups** endpoint.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listGroups(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkspaceUserWorkspace>>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [order_workspaces](#tag/Workspaces/operation/order_workspaces).**  **Support for this endpoint will end in 2024.**   Changes the order of the provided group ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order will be custom for each user.
     * @param {OrderWorkspaces} orderWorkspaces
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    orderGroups(orderWorkspaces: OrderWorkspaces, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace](#tag/Workspaces/operation/update_workspace).**  **Support for this endpoint will end in 2024.**   Updates the existing group related to the provided `group_id` parameter if the authorized user belongs to the group. It is not yet possible to add additional users to a group.
     * @param {number} groupId Updates the group related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedWorkspace} [patchedWorkspace]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateGroup(groupId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedWorkspace?: PatchedWorkspace, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace_user](#tag/Workspaces/operation/update_workspace_user).**   Updates the existing group user related to the provided `group_user_id` param if the authorized user has admin rights to the related group.
     * @param {number} groupUserId Updates the group user related to the provided value.
     * @param {PatchedUpdateWorkspaceUser} [patchedUpdateWorkspaceUser]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateGroupUser(groupUserId: number, patchedUpdateWorkspaceUser?: PatchedUpdateWorkspaceUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUser>>;
};
/**
 * GroupsApi - factory interface
 * @export
 */
export declare const GroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [create_workspace](#tag/Workspaces/operation/create_workspace).**  **Support for this endpoint will end in 2024.**   Creates a new group where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.
     * @param {GroupsApiCreateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createGroup(requestParameters: GroupsApiCreateGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceUserWorkspace>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace](#tag/Workspaces/operation/delete_workspace).**  **Support for this endpoint will end in 2024.**   Deletes an existing group if the authorized user belongs to the group. All the applications, databases, tables etc that were in the group are going to be deleted also.
     * @param {GroupsApiDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteGroup(requestParameters: GroupsApiDeleteGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace_user](#tag/Workspaces/operation/delete_workspace_user).**   Deletes a group user if the authorized user has admin rights to the related group.
     * @param {GroupsApiDeleteGroupUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteGroupUser(requestParameters: GroupsApiDeleteGroupUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_permissions](#tag/Workspaces/operation/workspace_permissions).**  **Support for this endpoint will end in 2024.**   Returns a the permission data necessary to determine the permissions of a specific user over a specific group.  See `core.handler.CoreHandler.get_permissions()` for more details.
     * @param {GroupsApiGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupPermissions(requestParameters: GroupsApiGroupPermissionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PermissionObject>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [leave_workspace](#tag/Workspaces/operation/leave_workspace).**  **Support for this endpoint will end in 2024.**   Makes the authenticated user leave the group related to the provided `group_id` if the user is in that group. If the user is the last admin in the group, they will not be able to leave it. There must always be one admin in the group, otherwise it will be left without control. If that is the case, they must either delete the group or give another member admin permissions first.
     * @param {GroupsApiLeaveGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    leaveGroup(requestParameters: GroupsApiLeaveGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspace_users](#tag/Workspaces/operation/list_workspace_users).**   Lists all the users that are in a group if the authorized user has admin permissions to the related group. To add a user to a group an invitation must be sent first.
     * @param {GroupsApiListGroupUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listGroupUsers(requestParameters: GroupsApiListGroupUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ListWorkspaceUsersWithMemberData>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspaces](#tag/Workspaces/operation/list_workspaces).**  **Support for this endpoint will end in 2024.**   Lists all the groups of the authorized user. A group can contain multiple applications like a database. Multiple users can have access to a group. For example each company could have their own group containing databases related to that company. The order of the groups are custom for each user. The order is configurable via the **order_groups** endpoint.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listGroups(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkspaceUserWorkspace>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [order_workspaces](#tag/Workspaces/operation/order_workspaces).**  **Support for this endpoint will end in 2024.**   Changes the order of the provided group ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order will be custom for each user.
     * @param {GroupsApiOrderGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    orderGroups(requestParameters: GroupsApiOrderGroupsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace](#tag/Workspaces/operation/update_workspace).**  **Support for this endpoint will end in 2024.**   Updates the existing group related to the provided `group_id` parameter if the authorized user belongs to the group. It is not yet possible to add additional users to a group.
     * @param {GroupsApiUpdateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateGroup(requestParameters: GroupsApiUpdateGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<Workspace>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace_user](#tag/Workspaces/operation/update_workspace_user).**   Updates the existing group user related to the provided `group_user_id` param if the authorized user has admin rights to the related group.
     * @param {GroupsApiUpdateGroupUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateGroupUser(requestParameters: GroupsApiUpdateGroupUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceUser>;
};
/**
 * Request parameters for createGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiCreateGroupRequest
 */
export interface GroupsApiCreateGroupRequest {
    /**
     *
     * @type {Workspace}
     * @memberof GroupsApiCreateGroup
     */
    readonly workspace: Workspace;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof GroupsApiCreateGroup
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for deleteGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiDeleteGroupRequest
 */
export interface GroupsApiDeleteGroupRequest {
    /**
     * Deletes the group related to the provided value.
     * @type {number}
     * @memberof GroupsApiDeleteGroup
     */
    readonly groupId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof GroupsApiDeleteGroup
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof GroupsApiDeleteGroup
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for deleteGroupUser operation in GroupsApi.
 * @export
 * @interface GroupsApiDeleteGroupUserRequest
 */
export interface GroupsApiDeleteGroupUserRequest {
    /**
     * Deletes the group user related to the provided value.
     * @type {number}
     * @memberof GroupsApiDeleteGroupUser
     */
    readonly groupUserId: number;
}
/**
 * Request parameters for groupPermissions operation in GroupsApi.
 * @export
 * @interface GroupsApiGroupPermissionsRequest
 */
export interface GroupsApiGroupPermissionsRequest {
    /**
     * The group id we want the permission object for.
     * @type {number}
     * @memberof GroupsApiGroupPermissions
     */
    readonly groupId: number;
}
/**
 * Request parameters for leaveGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiLeaveGroupRequest
 */
export interface GroupsApiLeaveGroupRequest {
    /**
     * Leaves the group related to the value.
     * @type {number}
     * @memberof GroupsApiLeaveGroup
     */
    readonly groupId: number;
}
/**
 * Request parameters for listGroupUsers operation in GroupsApi.
 * @export
 * @interface GroupsApiListGroupUsersRequest
 */
export interface GroupsApiListGroupUsersRequest {
    /**
     * Lists group users related to the provided group value.
     * @type {number}
     * @memberof GroupsApiListGroupUsers
     */
    readonly groupId: number;
    /**
     * Search for group users by username, or email.
     * @type {string}
     * @memberof GroupsApiListGroupUsers
     */
    readonly search?: string;
    /**
     * Sort group users by name, email or role.
     * @type {string}
     * @memberof GroupsApiListGroupUsers
     */
    readonly sorts?: string;
}
/**
 * Request parameters for orderGroups operation in GroupsApi.
 * @export
 * @interface GroupsApiOrderGroupsRequest
 */
export interface GroupsApiOrderGroupsRequest {
    /**
     *
     * @type {OrderWorkspaces}
     * @memberof GroupsApiOrderGroups
     */
    readonly orderWorkspaces: OrderWorkspaces;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof GroupsApiOrderGroups
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof GroupsApiOrderGroups
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for updateGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiUpdateGroupRequest
 */
export interface GroupsApiUpdateGroupRequest {
    /**
     * Updates the group related to the provided value.
     * @type {number}
     * @memberof GroupsApiUpdateGroup
     */
    readonly groupId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof GroupsApiUpdateGroup
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof GroupsApiUpdateGroup
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedWorkspace}
     * @memberof GroupsApiUpdateGroup
     */
    readonly patchedWorkspace?: PatchedWorkspace;
}
/**
 * Request parameters for updateGroupUser operation in GroupsApi.
 * @export
 * @interface GroupsApiUpdateGroupUserRequest
 */
export interface GroupsApiUpdateGroupUserRequest {
    /**
     * Updates the group user related to the provided value.
     * @type {number}
     * @memberof GroupsApiUpdateGroupUser
     */
    readonly groupUserId: number;
    /**
     *
     * @type {PatchedUpdateWorkspaceUser}
     * @memberof GroupsApiUpdateGroupUser
     */
    readonly patchedUpdateWorkspaceUser?: PatchedUpdateWorkspaceUser;
}
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export declare class GroupsApi extends BaseAPI {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [create_workspace](#tag/Workspaces/operation/create_workspace).**  **Support for this endpoint will end in 2024.**   Creates a new group where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.
     * @param {GroupsApiCreateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    createGroup(requestParameters: GroupsApiCreateGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceUserWorkspace, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace](#tag/Workspaces/operation/delete_workspace).**  **Support for this endpoint will end in 2024.**   Deletes an existing group if the authorized user belongs to the group. All the applications, databases, tables etc that were in the group are going to be deleted also.
     * @param {GroupsApiDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    deleteGroup(requestParameters: GroupsApiDeleteGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [delete_workspace_user](#tag/Workspaces/operation/delete_workspace_user).**   Deletes a group user if the authorized user has admin rights to the related group.
     * @param {GroupsApiDeleteGroupUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    deleteGroupUser(requestParameters: GroupsApiDeleteGroupUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_permissions](#tag/Workspaces/operation/workspace_permissions).**  **Support for this endpoint will end in 2024.**   Returns a the permission data necessary to determine the permissions of a specific user over a specific group.  See `core.handler.CoreHandler.get_permissions()` for more details.
     * @param {GroupsApiGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupPermissions(requestParameters: GroupsApiGroupPermissionsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PermissionObject[], any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [leave_workspace](#tag/Workspaces/operation/leave_workspace).**  **Support for this endpoint will end in 2024.**   Makes the authenticated user leave the group related to the provided `group_id` if the user is in that group. If the user is the last admin in the group, they will not be able to leave it. There must always be one admin in the group, otherwise it will be left without control. If that is the case, they must either delete the group or give another member admin permissions first.
     * @param {GroupsApiLeaveGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    leaveGroup(requestParameters: GroupsApiLeaveGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspace_users](#tag/Workspaces/operation/list_workspace_users).**   Lists all the users that are in a group if the authorized user has admin permissions to the related group. To add a user to a group an invitation must be sent first.
     * @param {GroupsApiListGroupUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    listGroupUsers(requestParameters: GroupsApiListGroupUsersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceUsersWithMemberData[], any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [list_workspaces](#tag/Workspaces/operation/list_workspaces).**  **Support for this endpoint will end in 2024.**   Lists all the groups of the authorized user. A group can contain multiple applications like a database. Multiple users can have access to a group. For example each company could have their own group containing databases related to that company. The order of the groups are custom for each user. The order is configurable via the **order_groups** endpoint.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    listGroups(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceUserWorkspace[], any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [order_workspaces](#tag/Workspaces/operation/order_workspaces).**  **Support for this endpoint will end in 2024.**   Changes the order of the provided group ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order will be custom for each user.
     * @param {GroupsApiOrderGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    orderGroups(requestParameters: GroupsApiOrderGroupsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace](#tag/Workspaces/operation/update_workspace).**  **Support for this endpoint will end in 2024.**   Updates the existing group related to the provided `group_id` parameter if the authorized user belongs to the group. It is not yet possible to add additional users to a group.
     * @param {GroupsApiUpdateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    updateGroup(requestParameters: GroupsApiUpdateGroupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Workspace, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [update_workspace_user](#tag/Workspaces/operation/update_workspace_user).**   Updates the existing group user related to the provided `group_user_id` param if the authorized user has admin rights to the related group.
     * @param {GroupsApiUpdateGroupUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    updateGroupUser(requestParameters: GroupsApiUpdateGroupUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceUser, any>>;
}
/**
 * HealthApi - axios parameter creator
 * @export
 */
export declare const HealthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Sends a test email to the provided email address. Useful for testing Baserow\'s email configuration as errors are clearly returned.
     * @param {EmailTesterRequest} emailTesterRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailTester: (emailTesterRequest: EmailTesterRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Runs a full health check testing as many services and systems as possible. These health checks can be expensive operations such as writing files to storage etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fullHealthCheck: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * HealthApi - functional programming interface
 * @export
 */
export declare const HealthApiFp: (configuration?: Configuration) => {
    /**
     * Sends a test email to the provided email address. Useful for testing Baserow\'s email configuration as errors are clearly returned.
     * @param {EmailTesterRequest} emailTesterRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailTester(emailTesterRequest: EmailTesterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTesterResponse>>;
    /**
     * Runs a full health check testing as many services and systems as possible. These health checks can be expensive operations such as writing files to storage etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fullHealthCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullHealthCheck>>;
};
/**
 * HealthApi - factory interface
 * @export
 */
export declare const HealthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Sends a test email to the provided email address. Useful for testing Baserow\'s email configuration as errors are clearly returned.
     * @param {HealthApiEmailTesterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailTester(requestParameters: HealthApiEmailTesterRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailTesterResponse>;
    /**
     * Runs a full health check testing as many services and systems as possible. These health checks can be expensive operations such as writing files to storage etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fullHealthCheck(options?: RawAxiosRequestConfig): AxiosPromise<FullHealthCheck>;
};
/**
 * Request parameters for emailTester operation in HealthApi.
 * @export
 * @interface HealthApiEmailTesterRequest
 */
export interface HealthApiEmailTesterRequest {
    /**
     *
     * @type {EmailTesterRequest}
     * @memberof HealthApiEmailTester
     */
    readonly emailTesterRequest: EmailTesterRequest;
}
/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export declare class HealthApi extends BaseAPI {
    /**
     * Sends a test email to the provided email address. Useful for testing Baserow\'s email configuration as errors are clearly returned.
     * @param {HealthApiEmailTesterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    emailTester(requestParameters: HealthApiEmailTesterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailTesterResponse, any>>;
    /**
     * Runs a full health check testing as many services and systems as possible. These health checks can be expensive operations such as writing files to storage etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    fullHealthCheck(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FullHealthCheck, any>>;
}
/**
 * IntegrationsApi - axios parameter creator
 * @export
 */
export declare const IntegrationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new integration
     * @param {number} applicationId Creates an integration for the application related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {IntegrationCreateIntegration} [integrationCreateIntegration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApplicationIntegration: (applicationId: number, clientSessionId?: string, integrationCreateIntegration?: IntegrationCreateIntegration, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the integration related by the given id.
     * @param {number} integrationId The id of the integration
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApplicationIntegration: (integrationId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the integrations of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} applicationId Returns only the integrations of the application related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationIntegrations: (applicationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Moves the integration in the application before another integration or at the end of the application if no before integration is given. The integrations must belong to the same application.
     * @param {number} integrationId The id of the integration to move
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedMoveIntegration} [patchedMoveIntegration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveApplicationIntegration: (integrationId: number, clientSessionId?: string, patchedMoveIntegration?: PatchedMoveIntegration, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing integration.
     * @param {number} integrationId The id of the integration
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {LocalBaserowIntegrationUpdateIntegration} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplicationIntegration: (integrationId: number, clientSessionId?: string, body?: LocalBaserowIntegrationUpdateIntegration, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IntegrationsApi - functional programming interface
 * @export
 */
export declare const IntegrationsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new integration
     * @param {number} applicationId Creates an integration for the application related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {IntegrationCreateIntegration} [integrationCreateIntegration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApplicationIntegration(applicationId: number, clientSessionId?: string, integrationCreateIntegration?: IntegrationCreateIntegration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationIntegration>>;
    /**
     * Deletes the integration related by the given id.
     * @param {number} integrationId The id of the integration
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApplicationIntegration(integrationId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Lists all the integrations of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} applicationId Returns only the integrations of the application related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationIntegrations(applicationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IntegrationIntegration>>>;
    /**
     * Moves the integration in the application before another integration or at the end of the application if no before integration is given. The integrations must belong to the same application.
     * @param {number} integrationId The id of the integration to move
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedMoveIntegration} [patchedMoveIntegration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveApplicationIntegration(integrationId: number, clientSessionId?: string, patchedMoveIntegration?: PatchedMoveIntegration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationIntegration>>;
    /**
     * Updates an existing integration.
     * @param {number} integrationId The id of the integration
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {LocalBaserowIntegrationUpdateIntegration} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplicationIntegration(integrationId: number, clientSessionId?: string, body?: LocalBaserowIntegrationUpdateIntegration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationIntegration>>;
};
/**
 * IntegrationsApi - factory interface
 * @export
 */
export declare const IntegrationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new integration
     * @param {IntegrationsApiCreateApplicationIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApplicationIntegration(requestParameters: IntegrationsApiCreateApplicationIntegrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegrationIntegration>;
    /**
     * Deletes the integration related by the given id.
     * @param {IntegrationsApiDeleteApplicationIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApplicationIntegration(requestParameters: IntegrationsApiDeleteApplicationIntegrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Lists all the integrations of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {IntegrationsApiListApplicationIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationIntegrations(requestParameters: IntegrationsApiListApplicationIntegrationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<IntegrationIntegration>>;
    /**
     * Moves the integration in the application before another integration or at the end of the application if no before integration is given. The integrations must belong to the same application.
     * @param {IntegrationsApiMoveApplicationIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveApplicationIntegration(requestParameters: IntegrationsApiMoveApplicationIntegrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegrationIntegration>;
    /**
     * Updates an existing integration.
     * @param {IntegrationsApiUpdateApplicationIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplicationIntegration(requestParameters: IntegrationsApiUpdateApplicationIntegrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<IntegrationIntegration>;
};
/**
 * Request parameters for createApplicationIntegration operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiCreateApplicationIntegrationRequest
 */
export interface IntegrationsApiCreateApplicationIntegrationRequest {
    /**
     * Creates an integration for the application related to the provided value.
     * @type {number}
     * @memberof IntegrationsApiCreateApplicationIntegration
     */
    readonly applicationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof IntegrationsApiCreateApplicationIntegration
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {IntegrationCreateIntegration}
     * @memberof IntegrationsApiCreateApplicationIntegration
     */
    readonly integrationCreateIntegration?: IntegrationCreateIntegration;
}
/**
 * Request parameters for deleteApplicationIntegration operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiDeleteApplicationIntegrationRequest
 */
export interface IntegrationsApiDeleteApplicationIntegrationRequest {
    /**
     * The id of the integration
     * @type {number}
     * @memberof IntegrationsApiDeleteApplicationIntegration
     */
    readonly integrationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof IntegrationsApiDeleteApplicationIntegration
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for listApplicationIntegrations operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiListApplicationIntegrationsRequest
 */
export interface IntegrationsApiListApplicationIntegrationsRequest {
    /**
     * Returns only the integrations of the application related to the provided Id.
     * @type {number}
     * @memberof IntegrationsApiListApplicationIntegrations
     */
    readonly applicationId: number;
}
/**
 * Request parameters for moveApplicationIntegration operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiMoveApplicationIntegrationRequest
 */
export interface IntegrationsApiMoveApplicationIntegrationRequest {
    /**
     * The id of the integration to move
     * @type {number}
     * @memberof IntegrationsApiMoveApplicationIntegration
     */
    readonly integrationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof IntegrationsApiMoveApplicationIntegration
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedMoveIntegration}
     * @memberof IntegrationsApiMoveApplicationIntegration
     */
    readonly patchedMoveIntegration?: PatchedMoveIntegration;
}
/**
 * Request parameters for updateApplicationIntegration operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiUpdateApplicationIntegrationRequest
 */
export interface IntegrationsApiUpdateApplicationIntegrationRequest {
    /**
     * The id of the integration
     * @type {number}
     * @memberof IntegrationsApiUpdateApplicationIntegration
     */
    readonly integrationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof IntegrationsApiUpdateApplicationIntegration
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {LocalBaserowIntegrationUpdateIntegration}
     * @memberof IntegrationsApiUpdateApplicationIntegration
     */
    readonly body?: LocalBaserowIntegrationUpdateIntegration;
}
/**
 * IntegrationsApi - object-oriented interface
 * @export
 * @class IntegrationsApi
 * @extends {BaseAPI}
 */
export declare class IntegrationsApi extends BaseAPI {
    /**
     * Creates a new integration
     * @param {IntegrationsApiCreateApplicationIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    createApplicationIntegration(requestParameters: IntegrationsApiCreateApplicationIntegrationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IntegrationIntegration, any>>;
    /**
     * Deletes the integration related by the given id.
     * @param {IntegrationsApiDeleteApplicationIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    deleteApplicationIntegration(requestParameters: IntegrationsApiDeleteApplicationIntegrationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Lists all the integrations of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {IntegrationsApiListApplicationIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    listApplicationIntegrations(requestParameters: IntegrationsApiListApplicationIntegrationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IntegrationIntegration[], any>>;
    /**
     * Moves the integration in the application before another integration or at the end of the application if no before integration is given. The integrations must belong to the same application.
     * @param {IntegrationsApiMoveApplicationIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    moveApplicationIntegration(requestParameters: IntegrationsApiMoveApplicationIntegrationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IntegrationIntegration, any>>;
    /**
     * Updates an existing integration.
     * @param {IntegrationsApiUpdateApplicationIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    updateApplicationIntegration(requestParameters: IntegrationsApiUpdateApplicationIntegrationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IntegrationIntegration, any>>;
}
/**
 * JobsApi - axios parameter creator
 * @export
 */
export declare const JobsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new job. This job runs asynchronously in the background and execute the task specific to the provided typeparameters. The `get_job` can be used to get the current state of the job.
     * @param {JobTypeCreateJob} [jobTypeCreateJob]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJob: (jobTypeCreateJob?: JobTypeCreateJob, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the information related to the provided job id. This endpoint can for example be polled to get the state and progress of the job in real time.
     * @param {number} jobId The job id to lookup information about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJob: (jobId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all existing jobs. Jobs are task executed asynchronously in the background. You can use the `get_job` endpoint to read the currentprogress of a the job.
     * @param {string} [jobIds] A comma separated list of job ids in the desired order.The jobs will be returned in the same order as the ids.If a job id is not found it will be ignored.
     * @param {string} [states] A comma separated list of jobs state to look for. The only possible values are: &#x60;pending&#x60;, &#x60;finished&#x60; and &#x60;failed&#x60;. It\&#39;s possible to exclude a state by prefixing it with a &#x60;!&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listJob: (jobIds?: string, states?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * JobsApi - functional programming interface
 * @export
 */
export declare const JobsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new job. This job runs asynchronously in the background and execute the task specific to the provided typeparameters. The `get_job` can be used to get the current state of the job.
     * @param {JobTypeCreateJob} [jobTypeCreateJob]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJob(jobTypeCreateJob?: JobTypeCreateJob, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTypeJob>>;
    /**
     * Returns the information related to the provided job id. This endpoint can for example be polled to get the state and progress of the job in real time.
     * @param {number} jobId The job id to lookup information about.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJob(jobId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTypeJob>>;
    /**
     * List all existing jobs. Jobs are task executed asynchronously in the background. You can use the `get_job` endpoint to read the currentprogress of a the job.
     * @param {string} [jobIds] A comma separated list of job ids in the desired order.The jobs will be returned in the same order as the ids.If a job id is not found it will be ignored.
     * @param {string} [states] A comma separated list of jobs state to look for. The only possible values are: &#x60;pending&#x60;, &#x60;finished&#x60; and &#x60;failed&#x60;. It\&#39;s possible to exclude a state by prefixing it with a &#x60;!&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listJob(jobIds?: string, states?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobTypeJob>>>;
};
/**
 * JobsApi - factory interface
 * @export
 */
export declare const JobsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new job. This job runs asynchronously in the background and execute the task specific to the provided typeparameters. The `get_job` can be used to get the current state of the job.
     * @param {JobsApiCreateJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJob(requestParameters?: JobsApiCreateJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobTypeJob>;
    /**
     * Returns the information related to the provided job id. This endpoint can for example be polled to get the state and progress of the job in real time.
     * @param {JobsApiGetJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJob(requestParameters: JobsApiGetJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobTypeJob>;
    /**
     * List all existing jobs. Jobs are task executed asynchronously in the background. You can use the `get_job` endpoint to read the currentprogress of a the job.
     * @param {JobsApiListJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listJob(requestParameters?: JobsApiListJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<JobTypeJob>>;
};
/**
 * Request parameters for createJob operation in JobsApi.
 * @export
 * @interface JobsApiCreateJobRequest
 */
export interface JobsApiCreateJobRequest {
    /**
     *
     * @type {JobTypeCreateJob}
     * @memberof JobsApiCreateJob
     */
    readonly jobTypeCreateJob?: JobTypeCreateJob;
}
/**
 * Request parameters for getJob operation in JobsApi.
 * @export
 * @interface JobsApiGetJobRequest
 */
export interface JobsApiGetJobRequest {
    /**
     * The job id to lookup information about.
     * @type {number}
     * @memberof JobsApiGetJob
     */
    readonly jobId: number;
}
/**
 * Request parameters for listJob operation in JobsApi.
 * @export
 * @interface JobsApiListJobRequest
 */
export interface JobsApiListJobRequest {
    /**
     * A comma separated list of job ids in the desired order.The jobs will be returned in the same order as the ids.If a job id is not found it will be ignored.
     * @type {string}
     * @memberof JobsApiListJob
     */
    readonly jobIds?: string;
    /**
     * A comma separated list of jobs state to look for. The only possible values are: &#x60;pending&#x60;, &#x60;finished&#x60; and &#x60;failed&#x60;. It\&#39;s possible to exclude a state by prefixing it with a &#x60;!&#x60;.
     * @type {string}
     * @memberof JobsApiListJob
     */
    readonly states?: string;
}
/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export declare class JobsApi extends BaseAPI {
    /**
     * Creates a new job. This job runs asynchronously in the background and execute the task specific to the provided typeparameters. The `get_job` can be used to get the current state of the job.
     * @param {JobsApiCreateJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    createJob(requestParameters?: JobsApiCreateJobRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobTypeJob, any>>;
    /**
     * Returns the information related to the provided job id. This endpoint can for example be polled to get the state and progress of the job in real time.
     * @param {JobsApiGetJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    getJob(requestParameters: JobsApiGetJobRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobTypeJob, any>>;
    /**
     * List all existing jobs. Jobs are task executed asynchronously in the background. You can use the `get_job` endpoint to read the currentprogress of a the job.
     * @param {JobsApiListJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    listJob(requestParameters?: JobsApiListJobRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobTypeJob[], any>>;
}
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export declare const NotificationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Clear all the notifications for the given workspace and user.
     * @param {number} workspaceId The workspace the notifications are in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clearWorkspaceNotifications: (workspaceId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists the notifications for the given workspace and the current user. The response is paginated and the limit and offset parameters can be controlled using the query parameters.
     * @param {number} workspaceId The workspace id that the notifications belong to.
     * @param {number} [limit] Defines how many notifications should be returned.
     * @param {number} [offset] Defines the offset of the notifications that should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceNotifications: (workspaceId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Mark as read all the notifications for the given workspace and user.
     * @param {number} workspaceId The workspace the notifications are in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markAllWorkspaceNotificationsAsRead: (workspaceId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Marks a notification as read.
     * @param {number} notificationId The notification id to update.
     * @param {number} workspaceId The workspace the notification is in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markNotificationAsRead: (notificationId: number, workspaceId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
export declare const NotificationsApiFp: (configuration?: Configuration) => {
    /**
     * Clear all the notifications for the given workspace and user.
     * @param {number} workspaceId The workspace the notifications are in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clearWorkspaceNotifications(workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Lists the notifications for the given workspace and the current user. The response is paginated and the limit and offset parameters can be controlled using the query parameters.
     * @param {number} workspaceId The workspace id that the notifications belong to.
     * @param {number} [limit] Defines how many notifications should be returned.
     * @param {number} [offset] Defines the offset of the notifications that should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceNotifications(workspaceId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerNotificationRecipient>>;
    /**
     * Mark as read all the notifications for the given workspace and user.
     * @param {number} workspaceId The workspace the notifications are in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markAllWorkspaceNotificationsAsRead(workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Marks a notification as read.
     * @param {number} notificationId The notification id to update.
     * @param {number} workspaceId The workspace the notification is in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markNotificationAsRead(notificationId: number, workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationRecipient>>;
};
/**
 * NotificationsApi - factory interface
 * @export
 */
export declare const NotificationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Clear all the notifications for the given workspace and user.
     * @param {NotificationsApiClearWorkspaceNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clearWorkspaceNotifications(requestParameters: NotificationsApiClearWorkspaceNotificationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Lists the notifications for the given workspace and the current user. The response is paginated and the limit and offset parameters can be controlled using the query parameters.
     * @param {NotificationsApiListWorkspaceNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceNotifications(requestParameters: NotificationsApiListWorkspaceNotificationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerNotificationRecipient>;
    /**
     * Mark as read all the notifications for the given workspace and user.
     * @param {NotificationsApiMarkAllWorkspaceNotificationsAsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markAllWorkspaceNotificationsAsRead(requestParameters: NotificationsApiMarkAllWorkspaceNotificationsAsReadRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Marks a notification as read.
     * @param {NotificationsApiMarkNotificationAsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markNotificationAsRead(requestParameters: NotificationsApiMarkNotificationAsReadRequest, options?: RawAxiosRequestConfig): AxiosPromise<NotificationRecipient>;
};
/**
 * Request parameters for clearWorkspaceNotifications operation in NotificationsApi.
 * @export
 * @interface NotificationsApiClearWorkspaceNotificationsRequest
 */
export interface NotificationsApiClearWorkspaceNotificationsRequest {
    /**
     * The workspace the notifications are in.
     * @type {number}
     * @memberof NotificationsApiClearWorkspaceNotifications
     */
    readonly workspaceId: number;
}
/**
 * Request parameters for listWorkspaceNotifications operation in NotificationsApi.
 * @export
 * @interface NotificationsApiListWorkspaceNotificationsRequest
 */
export interface NotificationsApiListWorkspaceNotificationsRequest {
    /**
     * The workspace id that the notifications belong to.
     * @type {number}
     * @memberof NotificationsApiListWorkspaceNotifications
     */
    readonly workspaceId: number;
    /**
     * Defines how many notifications should be returned.
     * @type {number}
     * @memberof NotificationsApiListWorkspaceNotifications
     */
    readonly limit?: number;
    /**
     * Defines the offset of the notifications that should be returned.
     * @type {number}
     * @memberof NotificationsApiListWorkspaceNotifications
     */
    readonly offset?: number;
}
/**
 * Request parameters for markAllWorkspaceNotificationsAsRead operation in NotificationsApi.
 * @export
 * @interface NotificationsApiMarkAllWorkspaceNotificationsAsReadRequest
 */
export interface NotificationsApiMarkAllWorkspaceNotificationsAsReadRequest {
    /**
     * The workspace the notifications are in.
     * @type {number}
     * @memberof NotificationsApiMarkAllWorkspaceNotificationsAsRead
     */
    readonly workspaceId: number;
}
/**
 * Request parameters for markNotificationAsRead operation in NotificationsApi.
 * @export
 * @interface NotificationsApiMarkNotificationAsReadRequest
 */
export interface NotificationsApiMarkNotificationAsReadRequest {
    /**
     * The notification id to update.
     * @type {number}
     * @memberof NotificationsApiMarkNotificationAsRead
     */
    readonly notificationId: number;
    /**
     * The workspace the notification is in.
     * @type {number}
     * @memberof NotificationsApiMarkNotificationAsRead
     */
    readonly workspaceId: number;
}
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export declare class NotificationsApi extends BaseAPI {
    /**
     * Clear all the notifications for the given workspace and user.
     * @param {NotificationsApiClearWorkspaceNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    clearWorkspaceNotifications(requestParameters: NotificationsApiClearWorkspaceNotificationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Lists the notifications for the given workspace and the current user. The response is paginated and the limit and offset parameters can be controlled using the query parameters.
     * @param {NotificationsApiListWorkspaceNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    listWorkspaceNotifications(requestParameters: NotificationsApiListWorkspaceNotificationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerNotificationRecipient, any>>;
    /**
     * Mark as read all the notifications for the given workspace and user.
     * @param {NotificationsApiMarkAllWorkspaceNotificationsAsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    markAllWorkspaceNotificationsAsRead(requestParameters: NotificationsApiMarkAllWorkspaceNotificationsAsReadRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Marks a notification as read.
     * @param {NotificationsApiMarkNotificationAsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    markNotificationAsRead(requestParameters: NotificationsApiMarkNotificationAsReadRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NotificationRecipient, any>>;
}
/**
 * RoleAssignmentsApi - axios parameter creator
 * @export
 */
export declare const RoleAssignmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * You can assign a role to a subject into the given workspace for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {number} workspaceId The workspace in which the role assignment takes place.
     * @param {CreateRoleAssignment} createRoleAssignment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignRole: (workspaceId: number, createRoleAssignment: CreateRoleAssignment, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * You can assign a role to a multiple subjects into the given workspace for the given scopes with this endpoint. If you want to remove the role you can omit the role property.
     * @param {number} workspaceId The workspace in which the role assignment takes place.
     * @param {BatchCreateRoleAssignment} batchCreateRoleAssignment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchAssignRole: (workspaceId: number, batchCreateRoleAssignment: BatchCreateRoleAssignment, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_assign_role](#tag/Role-assignments/operation/workspace_assign_role).**  **Support for this endpoint will end in 2024.**   You can assign a role to a subject into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {number} groupId The group in which the role assignment takes place.
     * @param {CreateRoleAssignment} createRoleAssignment
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupAssignRole: (groupId: number, createRoleAssignment: CreateRoleAssignment, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_batch_assign_role](#tag/Role-assignments/operation/workspace_batch_assign_role).**  **Support for this endpoint will end in 2024.**   You can assign a role to a multiple subjects into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {number} groupId The group in which the role assignment takes place.
     * @param {BatchCreateRoleAssignment} batchCreateRoleAssignment
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupBatchAssignRole: (groupId: number, batchCreateRoleAssignment: BatchCreateRoleAssignment, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_assign_role](#tag/Role-assignments/operation/workspace_assign_role).**  **Support for this endpoint will end in 2024.**   You can list the role assignments within a group, optionally filtered down to a specific scope inside of that group. If the scope isn\'t specified,the group will be considered the scope.
     * @param {number} groupId The group in which the role assignments are related to.
     * @param {number} [scopeId] The id of the scope you are trying to get all roleassignments for.
     * @param {string} [scopeType] The type of scope you are trying to get all roleassignments for.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupListRoleAssignments: (groupId: number, scopeId?: number, scopeType?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * You can list the role assignments within a workspace, optionally filtered downto a specific scope inside of that workspace. If the scope isn\'t specified,the workspace will be considered the scope.
     * @param {number} workspaceId The workspace in which the role assignments are related to.
     * @param {number} [scopeId] The id of the scope you are trying to get all roleassignments for.
     * @param {string} [scopeType] The type of scope you are trying to get all roleassignments for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleAssignments: (workspaceId: number, scopeId?: number, scopeType?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoleAssignmentsApi - functional programming interface
 * @export
 */
export declare const RoleAssignmentsApiFp: (configuration?: Configuration) => {
    /**
     * You can assign a role to a subject into the given workspace for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {number} workspaceId The workspace in which the role assignment takes place.
     * @param {CreateRoleAssignment} createRoleAssignment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignRole(workspaceId: number, createRoleAssignment: CreateRoleAssignment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpenApiRoleAssignment>>;
    /**
     * You can assign a role to a multiple subjects into the given workspace for the given scopes with this endpoint. If you want to remove the role you can omit the role property.
     * @param {number} workspaceId The workspace in which the role assignment takes place.
     * @param {BatchCreateRoleAssignment} batchCreateRoleAssignment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchAssignRole(workspaceId: number, batchCreateRoleAssignment: BatchCreateRoleAssignment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpenApiRoleAssignment>>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_assign_role](#tag/Role-assignments/operation/workspace_assign_role).**  **Support for this endpoint will end in 2024.**   You can assign a role to a subject into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {number} groupId The group in which the role assignment takes place.
     * @param {CreateRoleAssignment} createRoleAssignment
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupAssignRole(groupId: number, createRoleAssignment: CreateRoleAssignment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpenApiRoleAssignment>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_batch_assign_role](#tag/Role-assignments/operation/workspace_batch_assign_role).**  **Support for this endpoint will end in 2024.**   You can assign a role to a multiple subjects into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {number} groupId The group in which the role assignment takes place.
     * @param {BatchCreateRoleAssignment} batchCreateRoleAssignment
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupBatchAssignRole(groupId: number, batchCreateRoleAssignment: BatchCreateRoleAssignment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpenApiRoleAssignment>>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_assign_role](#tag/Role-assignments/operation/workspace_assign_role).**  **Support for this endpoint will end in 2024.**   You can list the role assignments within a group, optionally filtered down to a specific scope inside of that group. If the scope isn\'t specified,the group will be considered the scope.
     * @param {number} groupId The group in which the role assignments are related to.
     * @param {number} [scopeId] The id of the scope you are trying to get all roleassignments for.
     * @param {string} [scopeType] The type of scope you are trying to get all roleassignments for.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupListRoleAssignments(groupId: number, scopeId?: number, scopeType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpenApiRoleAssignment>>>;
    /**
     * You can list the role assignments within a workspace, optionally filtered downto a specific scope inside of that workspace. If the scope isn\'t specified,the workspace will be considered the scope.
     * @param {number} workspaceId The workspace in which the role assignments are related to.
     * @param {number} [scopeId] The id of the scope you are trying to get all roleassignments for.
     * @param {string} [scopeType] The type of scope you are trying to get all roleassignments for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleAssignments(workspaceId: number, scopeId?: number, scopeType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpenApiRoleAssignment>>>;
};
/**
 * RoleAssignmentsApi - factory interface
 * @export
 */
export declare const RoleAssignmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * You can assign a role to a subject into the given workspace for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {RoleAssignmentsApiAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignRole(requestParameters: RoleAssignmentsApiAssignRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<OpenApiRoleAssignment>;
    /**
     * You can assign a role to a multiple subjects into the given workspace for the given scopes with this endpoint. If you want to remove the role you can omit the role property.
     * @param {RoleAssignmentsApiBatchAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchAssignRole(requestParameters: RoleAssignmentsApiBatchAssignRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<OpenApiRoleAssignment>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_assign_role](#tag/Role-assignments/operation/workspace_assign_role).**  **Support for this endpoint will end in 2024.**   You can assign a role to a subject into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {RoleAssignmentsApiGroupAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupAssignRole(requestParameters: RoleAssignmentsApiGroupAssignRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<OpenApiRoleAssignment>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_batch_assign_role](#tag/Role-assignments/operation/workspace_batch_assign_role).**  **Support for this endpoint will end in 2024.**   You can assign a role to a multiple subjects into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {RoleAssignmentsApiGroupBatchAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupBatchAssignRole(requestParameters: RoleAssignmentsApiGroupBatchAssignRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<OpenApiRoleAssignment>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_assign_role](#tag/Role-assignments/operation/workspace_assign_role).**  **Support for this endpoint will end in 2024.**   You can list the role assignments within a group, optionally filtered down to a specific scope inside of that group. If the scope isn\'t specified,the group will be considered the scope.
     * @param {RoleAssignmentsApiGroupListRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupListRoleAssignments(requestParameters: RoleAssignmentsApiGroupListRoleAssignmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<OpenApiRoleAssignment>>;
    /**
     * You can list the role assignments within a workspace, optionally filtered downto a specific scope inside of that workspace. If the scope isn\'t specified,the workspace will be considered the scope.
     * @param {RoleAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleAssignments(requestParameters: RoleAssignmentsApiListRoleAssignmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<OpenApiRoleAssignment>>;
};
/**
 * Request parameters for assignRole operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiAssignRoleRequest
 */
export interface RoleAssignmentsApiAssignRoleRequest {
    /**
     * The workspace in which the role assignment takes place.
     * @type {number}
     * @memberof RoleAssignmentsApiAssignRole
     */
    readonly workspaceId: number;
    /**
     *
     * @type {CreateRoleAssignment}
     * @memberof RoleAssignmentsApiAssignRole
     */
    readonly createRoleAssignment: CreateRoleAssignment;
}
/**
 * Request parameters for batchAssignRole operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiBatchAssignRoleRequest
 */
export interface RoleAssignmentsApiBatchAssignRoleRequest {
    /**
     * The workspace in which the role assignment takes place.
     * @type {number}
     * @memberof RoleAssignmentsApiBatchAssignRole
     */
    readonly workspaceId: number;
    /**
     *
     * @type {BatchCreateRoleAssignment}
     * @memberof RoleAssignmentsApiBatchAssignRole
     */
    readonly batchCreateRoleAssignment: BatchCreateRoleAssignment;
}
/**
 * Request parameters for groupAssignRole operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiGroupAssignRoleRequest
 */
export interface RoleAssignmentsApiGroupAssignRoleRequest {
    /**
     * The group in which the role assignment takes place.
     * @type {number}
     * @memberof RoleAssignmentsApiGroupAssignRole
     */
    readonly groupId: number;
    /**
     *
     * @type {CreateRoleAssignment}
     * @memberof RoleAssignmentsApiGroupAssignRole
     */
    readonly createRoleAssignment: CreateRoleAssignment;
}
/**
 * Request parameters for groupBatchAssignRole operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiGroupBatchAssignRoleRequest
 */
export interface RoleAssignmentsApiGroupBatchAssignRoleRequest {
    /**
     * The group in which the role assignment takes place.
     * @type {number}
     * @memberof RoleAssignmentsApiGroupBatchAssignRole
     */
    readonly groupId: number;
    /**
     *
     * @type {BatchCreateRoleAssignment}
     * @memberof RoleAssignmentsApiGroupBatchAssignRole
     */
    readonly batchCreateRoleAssignment: BatchCreateRoleAssignment;
}
/**
 * Request parameters for groupListRoleAssignments operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiGroupListRoleAssignmentsRequest
 */
export interface RoleAssignmentsApiGroupListRoleAssignmentsRequest {
    /**
     * The group in which the role assignments are related to.
     * @type {number}
     * @memberof RoleAssignmentsApiGroupListRoleAssignments
     */
    readonly groupId: number;
    /**
     * The id of the scope you are trying to get all roleassignments for.
     * @type {number}
     * @memberof RoleAssignmentsApiGroupListRoleAssignments
     */
    readonly scopeId?: number;
    /**
     * The type of scope you are trying to get all roleassignments for.
     * @type {string}
     * @memberof RoleAssignmentsApiGroupListRoleAssignments
     */
    readonly scopeType?: string;
}
/**
 * Request parameters for listRoleAssignments operation in RoleAssignmentsApi.
 * @export
 * @interface RoleAssignmentsApiListRoleAssignmentsRequest
 */
export interface RoleAssignmentsApiListRoleAssignmentsRequest {
    /**
     * The workspace in which the role assignments are related to.
     * @type {number}
     * @memberof RoleAssignmentsApiListRoleAssignments
     */
    readonly workspaceId: number;
    /**
     * The id of the scope you are trying to get all roleassignments for.
     * @type {number}
     * @memberof RoleAssignmentsApiListRoleAssignments
     */
    readonly scopeId?: number;
    /**
     * The type of scope you are trying to get all roleassignments for.
     * @type {string}
     * @memberof RoleAssignmentsApiListRoleAssignments
     */
    readonly scopeType?: string;
}
/**
 * RoleAssignmentsApi - object-oriented interface
 * @export
 * @class RoleAssignmentsApi
 * @extends {BaseAPI}
 */
export declare class RoleAssignmentsApi extends BaseAPI {
    /**
     * You can assign a role to a subject into the given workspace for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {RoleAssignmentsApiAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    assignRole(requestParameters: RoleAssignmentsApiAssignRoleRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OpenApiRoleAssignment, any>>;
    /**
     * You can assign a role to a multiple subjects into the given workspace for the given scopes with this endpoint. If you want to remove the role you can omit the role property.
     * @param {RoleAssignmentsApiBatchAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    batchAssignRole(requestParameters: RoleAssignmentsApiBatchAssignRoleRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OpenApiRoleAssignment[], any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_assign_role](#tag/Role-assignments/operation/workspace_assign_role).**  **Support for this endpoint will end in 2024.**   You can assign a role to a subject into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {RoleAssignmentsApiGroupAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    groupAssignRole(requestParameters: RoleAssignmentsApiGroupAssignRoleRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OpenApiRoleAssignment, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_batch_assign_role](#tag/Role-assignments/operation/workspace_batch_assign_role).**  **Support for this endpoint will end in 2024.**   You can assign a role to a multiple subjects into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property.
     * @param {RoleAssignmentsApiGroupBatchAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    groupBatchAssignRole(requestParameters: RoleAssignmentsApiGroupBatchAssignRoleRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OpenApiRoleAssignment[], any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_assign_role](#tag/Role-assignments/operation/workspace_assign_role).**  **Support for this endpoint will end in 2024.**   You can list the role assignments within a group, optionally filtered down to a specific scope inside of that group. If the scope isn\'t specified,the group will be considered the scope.
     * @param {RoleAssignmentsApiGroupListRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    groupListRoleAssignments(requestParameters: RoleAssignmentsApiGroupListRoleAssignmentsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OpenApiRoleAssignment[], any>>;
    /**
     * You can list the role assignments within a workspace, optionally filtered downto a specific scope inside of that workspace. If the scope isn\'t specified,the workspace will be considered the scope.
     * @param {RoleAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    listRoleAssignments(requestParameters: RoleAssignmentsApiListRoleAssignmentsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OpenApiRoleAssignment[], any>>;
}
/**
 * SecureFileServeApi - axios parameter creator
 * @export
 */
export declare const SecureFileServeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Downloads a file using the backend and the secure file serve feature. The signed data is extracted from the URL and used to verify if the user has access to the file. If the permissions check passes and the file exists, the file is served to the user.  This is a **enterprise** feature.
     * @param {string} signedData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    secureFileServeDownload: (signedData: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SecureFileServeApi - functional programming interface
 * @export
 */
export declare const SecureFileServeApiFp: (configuration?: Configuration) => {
    /**
     * Downloads a file using the backend and the secure file serve feature. The signed data is extracted from the URL and used to verify if the user has access to the file. If the permissions check passes and the file exists, the file is served to the user.  This is a **enterprise** feature.
     * @param {string} signedData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    secureFileServeDownload(signedData: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * SecureFileServeApi - factory interface
 * @export
 */
export declare const SecureFileServeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Downloads a file using the backend and the secure file serve feature. The signed data is extracted from the URL and used to verify if the user has access to the file. If the permissions check passes and the file exists, the file is served to the user.  This is a **enterprise** feature.
     * @param {SecureFileServeApiSecureFileServeDownloadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    secureFileServeDownload(requestParameters: SecureFileServeApiSecureFileServeDownloadRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
};
/**
 * Request parameters for secureFileServeDownload operation in SecureFileServeApi.
 * @export
 * @interface SecureFileServeApiSecureFileServeDownloadRequest
 */
export interface SecureFileServeApiSecureFileServeDownloadRequest {
    /**
     *
     * @type {string}
     * @memberof SecureFileServeApiSecureFileServeDownload
     */
    readonly signedData: string;
}
/**
 * SecureFileServeApi - object-oriented interface
 * @export
 * @class SecureFileServeApi
 * @extends {BaseAPI}
 */
export declare class SecureFileServeApi extends BaseAPI {
    /**
     * Downloads a file using the backend and the secure file serve feature. The signed data is extracted from the URL and used to verify if the user has access to the file. If the permissions check passes and the file exists, the file is served to the user.  This is a **enterprise** feature.
     * @param {SecureFileServeApiSecureFileServeDownloadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureFileServeApi
     */
    secureFileServeDownload(requestParameters: SecureFileServeApiSecureFileServeDownloadRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * SettingsApi - axios parameter creator
 * @export
 */
export declare const SettingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Responds with the self hosted instance id. Only a user with staff permissions can request it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstanceId: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with all the admin configured settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the admin configured settings if the user has admin permissions.
     * @param {PatchedSettings} [patchedSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSettings: (patchedSettings?: PatchedSettings, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SettingsApi - functional programming interface
 * @export
 */
export declare const SettingsApiFp: (configuration?: Configuration) => {
    /**
     * Responds with the self hosted instance id. Only a user with staff permissions can request it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstanceId(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceId>>;
    /**
     * Responds with all the admin configured settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Settings>>;
    /**
     * Updates the admin configured settings if the user has admin permissions.
     * @param {PatchedSettings} [patchedSettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSettings(patchedSettings?: PatchedSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Settings>>;
};
/**
 * SettingsApi - factory interface
 * @export
 */
export declare const SettingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Responds with the self hosted instance id. Only a user with staff permissions can request it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstanceId(options?: RawAxiosRequestConfig): AxiosPromise<InstanceId>;
    /**
     * Responds with all the admin configured settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings(options?: RawAxiosRequestConfig): AxiosPromise<Settings>;
    /**
     * Updates the admin configured settings if the user has admin permissions.
     * @param {SettingsApiUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSettings(requestParameters?: SettingsApiUpdateSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Settings>;
};
/**
 * Request parameters for updateSettings operation in SettingsApi.
 * @export
 * @interface SettingsApiUpdateSettingsRequest
 */
export interface SettingsApiUpdateSettingsRequest {
    /**
     *
     * @type {PatchedSettings}
     * @memberof SettingsApiUpdateSettings
     */
    readonly patchedSettings?: PatchedSettings;
}
/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export declare class SettingsApi extends BaseAPI {
    /**
     * Responds with the self hosted instance id. Only a user with staff permissions can request it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    getInstanceId(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceId, any>>;
    /**
     * Responds with all the admin configured settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    getSettings(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Settings, any>>;
    /**
     * Updates the admin configured settings if the user has admin permissions.
     * @param {SettingsApiUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    updateSettings(requestParameters?: SettingsApiUpdateSettingsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Settings, any>>;
}
/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
export declare const SnapshotsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new application snapshot. Snapshots represent a state of an application at a specific point in time and can be restored later, making it easy to create backups of entire applications.
     * @param {number} applicationId Application ID for which to list snapshots.
     * @param {Snapshot} snapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSnapshot: (applicationId: number, snapshot: Snapshot, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a snapshot. Deleting a snapshot doesn\'t affect the application that the snapshot is made from and doesn\'t affect any applications that were created by restoring it. Snapshot deletion is permanent and can\'t be undone.
     * @param {number} snapshotId Id of the snapshot to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSnapshot: (snapshotId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists snapshots that were created for a given application.
     * @param {number} applicationId Application ID for which to list snapshots.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSnapshots: (applicationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Restores a snapshot. When an application snapshot is restored, a new application will be created in the same workspace that the original application was placed in with the name of the snapshot and data that were in the original application at the time the snapshot was taken. The original application that the snapshot was taken from is unaffected. Snapshots can be restored multiple times and a number suffix is added to the new application name in the case of a collision.
     * @param {number} snapshotId Id of the snapshot to restore.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreSnapshot: (snapshotId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SnapshotsApi - functional programming interface
 * @export
 */
export declare const SnapshotsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new application snapshot. Snapshots represent a state of an application at a specific point in time and can be restored later, making it easy to create backups of entire applications.
     * @param {number} applicationId Application ID for which to list snapshots.
     * @param {Snapshot} snapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSnapshot(applicationId: number, snapshot: Snapshot, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>>;
    /**
     * Deletes a snapshot. Deleting a snapshot doesn\'t affect the application that the snapshot is made from and doesn\'t affect any applications that were created by restoring it. Snapshot deletion is permanent and can\'t be undone.
     * @param {number} snapshotId Id of the snapshot to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSnapshot(snapshotId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Lists snapshots that were created for a given application.
     * @param {number} applicationId Application ID for which to list snapshots.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSnapshots(applicationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Snapshot>>>;
    /**
     * Restores a snapshot. When an application snapshot is restored, a new application will be created in the same workspace that the original application was placed in with the name of the snapshot and data that were in the original application at the time the snapshot was taken. The original application that the snapshot was taken from is unaffected. Snapshots can be restored multiple times and a number suffix is added to the new application name in the case of a collision.
     * @param {number} snapshotId Id of the snapshot to restore.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreSnapshot(snapshotId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>>;
};
/**
 * SnapshotsApi - factory interface
 * @export
 */
export declare const SnapshotsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new application snapshot. Snapshots represent a state of an application at a specific point in time and can be restored later, making it easy to create backups of entire applications.
     * @param {SnapshotsApiCreateSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSnapshot(requestParameters: SnapshotsApiCreateSnapshotRequest, options?: RawAxiosRequestConfig): AxiosPromise<Job>;
    /**
     * Deletes a snapshot. Deleting a snapshot doesn\'t affect the application that the snapshot is made from and doesn\'t affect any applications that were created by restoring it. Snapshot deletion is permanent and can\'t be undone.
     * @param {SnapshotsApiDeleteSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSnapshot(requestParameters: SnapshotsApiDeleteSnapshotRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Lists snapshots that were created for a given application.
     * @param {SnapshotsApiListSnapshotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSnapshots(requestParameters: SnapshotsApiListSnapshotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Snapshot>>;
    /**
     * Restores a snapshot. When an application snapshot is restored, a new application will be created in the same workspace that the original application was placed in with the name of the snapshot and data that were in the original application at the time the snapshot was taken. The original application that the snapshot was taken from is unaffected. Snapshots can be restored multiple times and a number suffix is added to the new application name in the case of a collision.
     * @param {SnapshotsApiRestoreSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreSnapshot(requestParameters: SnapshotsApiRestoreSnapshotRequest, options?: RawAxiosRequestConfig): AxiosPromise<Job>;
};
/**
 * Request parameters for createSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiCreateSnapshotRequest
 */
export interface SnapshotsApiCreateSnapshotRequest {
    /**
     * Application ID for which to list snapshots.
     * @type {number}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly applicationId: number;
    /**
     *
     * @type {Snapshot}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly snapshot: Snapshot;
}
/**
 * Request parameters for deleteSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiDeleteSnapshotRequest
 */
export interface SnapshotsApiDeleteSnapshotRequest {
    /**
     * Id of the snapshot to delete.
     * @type {number}
     * @memberof SnapshotsApiDeleteSnapshot
     */
    readonly snapshotId: number;
}
/**
 * Request parameters for listSnapshots operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiListSnapshotsRequest
 */
export interface SnapshotsApiListSnapshotsRequest {
    /**
     * Application ID for which to list snapshots.
     * @type {number}
     * @memberof SnapshotsApiListSnapshots
     */
    readonly applicationId: number;
}
/**
 * Request parameters for restoreSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiRestoreSnapshotRequest
 */
export interface SnapshotsApiRestoreSnapshotRequest {
    /**
     * Id of the snapshot to restore.
     * @type {number}
     * @memberof SnapshotsApiRestoreSnapshot
     */
    readonly snapshotId: number;
}
/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
export declare class SnapshotsApi extends BaseAPI {
    /**
     * Creates a new application snapshot. Snapshots represent a state of an application at a specific point in time and can be restored later, making it easy to create backups of entire applications.
     * @param {SnapshotsApiCreateSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    createSnapshot(requestParameters: SnapshotsApiCreateSnapshotRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Job, any>>;
    /**
     * Deletes a snapshot. Deleting a snapshot doesn\'t affect the application that the snapshot is made from and doesn\'t affect any applications that were created by restoring it. Snapshot deletion is permanent and can\'t be undone.
     * @param {SnapshotsApiDeleteSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    deleteSnapshot(requestParameters: SnapshotsApiDeleteSnapshotRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Lists snapshots that were created for a given application.
     * @param {SnapshotsApiListSnapshotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    listSnapshots(requestParameters: SnapshotsApiListSnapshotsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Snapshot[], any>>;
    /**
     * Restores a snapshot. When an application snapshot is restored, a new application will be created in the same workspace that the original application was placed in with the name of the snapshot and data that were in the original application at the time the snapshot was taken. The original application that the snapshot was taken from is unaffected. Snapshots can be restored multiple times and a number suffix is added to the new application name in the case of a collision.
     * @param {SnapshotsApiRestoreSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    restoreSnapshot(requestParameters: SnapshotsApiRestoreSnapshotRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Job, any>>;
}
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export declare const TeamsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new team subject.
     * @param {string} teamId
     * @param {TeamSubject} teamSubject
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubject: (teamId: string, teamSubject: TeamSubject, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a subject if the authorized user is in the team\'s workspace.
     * @param {number} subjectId The subject id to remove from the team.
     * @param {number} teamId The team id which the subject will be removed from.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubject: (subjectId: number, teamId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a team if the authorized user is in the team\'s workspace. All the related children (e.g. subjects) are also going to be deleted.
     * @param {number} teamId Deletes the team related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeam: (teamId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the information related to the provided subject id
     * @param {number} subjectId Returns the subject related to the provided value.
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubject: (subjectId: number, teamId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the information related to the provided team id.
     * @param {number} teamId Returns the team related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeam: (teamId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_create_team](#tag/Teams/operation/create_workspace).**  **Support for this endpoint will end in 2024.**   Creates a new team in a given group.
     * @param {string} groupId
     * @param {Team} team
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupCreateTeam: (groupId: string, team: Team, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_list_teams](#tag/Teams/operation/workspace_list_teams).**  **Support for this endpoint will end in 2024.**   Lists all teams in a given group.
     * @param {number} groupId Lists all teams in a given group.
     * @param {string} [search] Search for teams by their name.
     * @param {string} [sorts] Sort teams by name or subjects.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupListTeams: (groupId: number, search?: string, sorts?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all team subjects in a given team.
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamSubjects: (teamId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing team with a new name.
     * @param {string} teamId
     * @param {Team} team
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeam: (teamId: string, team: Team, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new team.
     * @param {string} workspaceId
     * @param {Team} team
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceCreateTeam: (workspaceId: string, team: Team, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all teams in a given workspace.
     * @param {number} workspaceId Lists all teams in a given workspace.
     * @param {string} [search] Search for teams by their name.
     * @param {string} [sorts] Sort teams by name or subjects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceListTeams: (workspaceId: number, search?: string, sorts?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TeamsApi - functional programming interface
 * @export
 */
export declare const TeamsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new team subject.
     * @param {string} teamId
     * @param {TeamSubject} teamSubject
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubject(teamId: string, teamSubject: TeamSubject, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamSubjectResponse>>;
    /**
     * Deletes a subject if the authorized user is in the team\'s workspace.
     * @param {number} subjectId The subject id to remove from the team.
     * @param {number} teamId The team id which the subject will be removed from.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubject(subjectId: number, teamId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes a team if the authorized user is in the team\'s workspace. All the related children (e.g. subjects) are also going to be deleted.
     * @param {number} teamId Deletes the team related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeam(teamId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the information related to the provided subject id
     * @param {number} subjectId Returns the subject related to the provided value.
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubject(subjectId: number, teamId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamSubjectResponse>>;
    /**
     * Returns the information related to the provided team id.
     * @param {number} teamId Returns the team related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeam(teamId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_create_team](#tag/Teams/operation/create_workspace).**  **Support for this endpoint will end in 2024.**   Creates a new team in a given group.
     * @param {string} groupId
     * @param {Team} team
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupCreateTeam(groupId: string, team: Team, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_list_teams](#tag/Teams/operation/workspace_list_teams).**  **Support for this endpoint will end in 2024.**   Lists all teams in a given group.
     * @param {number} groupId Lists all teams in a given group.
     * @param {string} [search] Search for teams by their name.
     * @param {string} [sorts] Sort teams by name or subjects.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupListTeams(groupId: number, search?: string, sorts?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamResponse>>>;
    /**
     * Lists all team subjects in a given team.
     * @param {string} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamSubjects(teamId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamSubjectResponse>>>;
    /**
     * Updates an existing team with a new name.
     * @param {string} teamId
     * @param {Team} team
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeam(teamId: string, team: Team, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>>;
    /**
     * Creates a new team.
     * @param {string} workspaceId
     * @param {Team} team
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceCreateTeam(workspaceId: string, team: Team, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>>;
    /**
     * Lists all teams in a given workspace.
     * @param {number} workspaceId Lists all teams in a given workspace.
     * @param {string} [search] Search for teams by their name.
     * @param {string} [sorts] Sort teams by name or subjects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceListTeams(workspaceId: number, search?: string, sorts?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamResponse>>>;
};
/**
 * TeamsApi - factory interface
 * @export
 */
export declare const TeamsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new team subject.
     * @param {TeamsApiCreateSubjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubject(requestParameters: TeamsApiCreateSubjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<TeamSubjectResponse>;
    /**
     * Deletes a subject if the authorized user is in the team\'s workspace.
     * @param {TeamsApiDeleteSubjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubject(requestParameters: TeamsApiDeleteSubjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes a team if the authorized user is in the team\'s workspace. All the related children (e.g. subjects) are also going to be deleted.
     * @param {TeamsApiDeleteTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeam(requestParameters: TeamsApiDeleteTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns the information related to the provided subject id
     * @param {TeamsApiGetSubjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubject(requestParameters: TeamsApiGetSubjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<TeamSubjectResponse>;
    /**
     * Returns the information related to the provided team id.
     * @param {TeamsApiGetTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeam(requestParameters: TeamsApiGetTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<TeamResponse>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_create_team](#tag/Teams/operation/create_workspace).**  **Support for this endpoint will end in 2024.**   Creates a new team in a given group.
     * @param {TeamsApiGroupCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupCreateTeam(requestParameters: TeamsApiGroupCreateTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<TeamResponse>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_list_teams](#tag/Teams/operation/workspace_list_teams).**  **Support for this endpoint will end in 2024.**   Lists all teams in a given group.
     * @param {TeamsApiGroupListTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupListTeams(requestParameters: TeamsApiGroupListTeamsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<TeamResponse>>;
    /**
     * Lists all team subjects in a given team.
     * @param {TeamsApiListTeamSubjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamSubjects(requestParameters: TeamsApiListTeamSubjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<TeamSubjectResponse>>;
    /**
     * Updates an existing team with a new name.
     * @param {TeamsApiUpdateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeam(requestParameters: TeamsApiUpdateTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<TeamResponse>;
    /**
     * Creates a new team.
     * @param {TeamsApiWorkspaceCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceCreateTeam(requestParameters: TeamsApiWorkspaceCreateTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<TeamResponse>;
    /**
     * Lists all teams in a given workspace.
     * @param {TeamsApiWorkspaceListTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceListTeams(requestParameters: TeamsApiWorkspaceListTeamsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<TeamResponse>>;
};
/**
 * Request parameters for createSubject operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateSubjectRequest
 */
export interface TeamsApiCreateSubjectRequest {
    /**
     *
     * @type {string}
     * @memberof TeamsApiCreateSubject
     */
    readonly teamId: string;
    /**
     *
     * @type {TeamSubject}
     * @memberof TeamsApiCreateSubject
     */
    readonly teamSubject: TeamSubject;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TeamsApiCreateSubject
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for deleteSubject operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteSubjectRequest
 */
export interface TeamsApiDeleteSubjectRequest {
    /**
     * The subject id to remove from the team.
     * @type {number}
     * @memberof TeamsApiDeleteSubject
     */
    readonly subjectId: number;
    /**
     * The team id which the subject will be removed from.
     * @type {number}
     * @memberof TeamsApiDeleteSubject
     */
    readonly teamId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TeamsApiDeleteSubject
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for deleteTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteTeamRequest
 */
export interface TeamsApiDeleteTeamRequest {
    /**
     * Deletes the team related to the provided value.
     * @type {number}
     * @memberof TeamsApiDeleteTeam
     */
    readonly teamId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TeamsApiDeleteTeam
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for getSubject operation in TeamsApi.
 * @export
 * @interface TeamsApiGetSubjectRequest
 */
export interface TeamsApiGetSubjectRequest {
    /**
     * Returns the subject related to the provided value.
     * @type {number}
     * @memberof TeamsApiGetSubject
     */
    readonly subjectId: number;
    /**
     *
     * @type {string}
     * @memberof TeamsApiGetSubject
     */
    readonly teamId: string;
}
/**
 * Request parameters for getTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiGetTeamRequest
 */
export interface TeamsApiGetTeamRequest {
    /**
     * Returns the team related to the provided value.
     * @type {number}
     * @memberof TeamsApiGetTeam
     */
    readonly teamId: number;
}
/**
 * Request parameters for groupCreateTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiGroupCreateTeamRequest
 */
export interface TeamsApiGroupCreateTeamRequest {
    /**
     *
     * @type {string}
     * @memberof TeamsApiGroupCreateTeam
     */
    readonly groupId: string;
    /**
     *
     * @type {Team}
     * @memberof TeamsApiGroupCreateTeam
     */
    readonly team: Team;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TeamsApiGroupCreateTeam
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for groupListTeams operation in TeamsApi.
 * @export
 * @interface TeamsApiGroupListTeamsRequest
 */
export interface TeamsApiGroupListTeamsRequest {
    /**
     * Lists all teams in a given group.
     * @type {number}
     * @memberof TeamsApiGroupListTeams
     */
    readonly groupId: number;
    /**
     * Search for teams by their name.
     * @type {string}
     * @memberof TeamsApiGroupListTeams
     */
    readonly search?: string;
    /**
     * Sort teams by name or subjects.
     * @type {string}
     * @memberof TeamsApiGroupListTeams
     */
    readonly sorts?: string;
}
/**
 * Request parameters for listTeamSubjects operation in TeamsApi.
 * @export
 * @interface TeamsApiListTeamSubjectsRequest
 */
export interface TeamsApiListTeamSubjectsRequest {
    /**
     *
     * @type {string}
     * @memberof TeamsApiListTeamSubjects
     */
    readonly teamId: string;
}
/**
 * Request parameters for updateTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateTeamRequest
 */
export interface TeamsApiUpdateTeamRequest {
    /**
     *
     * @type {string}
     * @memberof TeamsApiUpdateTeam
     */
    readonly teamId: string;
    /**
     *
     * @type {Team}
     * @memberof TeamsApiUpdateTeam
     */
    readonly team: Team;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TeamsApiUpdateTeam
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for workspaceCreateTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiWorkspaceCreateTeamRequest
 */
export interface TeamsApiWorkspaceCreateTeamRequest {
    /**
     *
     * @type {string}
     * @memberof TeamsApiWorkspaceCreateTeam
     */
    readonly workspaceId: string;
    /**
     *
     * @type {Team}
     * @memberof TeamsApiWorkspaceCreateTeam
     */
    readonly team: Team;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TeamsApiWorkspaceCreateTeam
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for workspaceListTeams operation in TeamsApi.
 * @export
 * @interface TeamsApiWorkspaceListTeamsRequest
 */
export interface TeamsApiWorkspaceListTeamsRequest {
    /**
     * Lists all teams in a given workspace.
     * @type {number}
     * @memberof TeamsApiWorkspaceListTeams
     */
    readonly workspaceId: number;
    /**
     * Search for teams by their name.
     * @type {string}
     * @memberof TeamsApiWorkspaceListTeams
     */
    readonly search?: string;
    /**
     * Sort teams by name or subjects.
     * @type {string}
     * @memberof TeamsApiWorkspaceListTeams
     */
    readonly sorts?: string;
}
/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export declare class TeamsApi extends BaseAPI {
    /**
     * Creates a new team subject.
     * @param {TeamsApiCreateSubjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createSubject(requestParameters: TeamsApiCreateSubjectRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamSubjectResponse, any>>;
    /**
     * Deletes a subject if the authorized user is in the team\'s workspace.
     * @param {TeamsApiDeleteSubjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteSubject(requestParameters: TeamsApiDeleteSubjectRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes a team if the authorized user is in the team\'s workspace. All the related children (e.g. subjects) are also going to be deleted.
     * @param {TeamsApiDeleteTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteTeam(requestParameters: TeamsApiDeleteTeamRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the information related to the provided subject id
     * @param {TeamsApiGetSubjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getSubject(requestParameters: TeamsApiGetSubjectRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamSubjectResponse, any>>;
    /**
     * Returns the information related to the provided team id.
     * @param {TeamsApiGetTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getTeam(requestParameters: TeamsApiGetTeamRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamResponse, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_create_team](#tag/Teams/operation/create_workspace).**  **Support for this endpoint will end in 2024.**   Creates a new team in a given group.
     * @param {TeamsApiGroupCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    groupCreateTeam(requestParameters: TeamsApiGroupCreateTeamRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamResponse, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_list_teams](#tag/Teams/operation/workspace_list_teams).**  **Support for this endpoint will end in 2024.**   Lists all teams in a given group.
     * @param {TeamsApiGroupListTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    groupListTeams(requestParameters: TeamsApiGroupListTeamsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamResponse[], any>>;
    /**
     * Lists all team subjects in a given team.
     * @param {TeamsApiListTeamSubjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listTeamSubjects(requestParameters: TeamsApiListTeamSubjectsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamSubjectResponse[], any>>;
    /**
     * Updates an existing team with a new name.
     * @param {TeamsApiUpdateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    updateTeam(requestParameters: TeamsApiUpdateTeamRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamResponse, any>>;
    /**
     * Creates a new team.
     * @param {TeamsApiWorkspaceCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    workspaceCreateTeam(requestParameters: TeamsApiWorkspaceCreateTeamRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamResponse, any>>;
    /**
     * Lists all teams in a given workspace.
     * @param {TeamsApiWorkspaceListTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    workspaceListTeams(requestParameters: TeamsApiWorkspaceListTeamsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamResponse[], any>>;
}
/**
 * TemplatesApi - axios parameter creator
 * @export
 */
export declare const TemplatesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_install_template](#tag/Templates/operation/workspace_install_template).**  **Support for this endpoint will end in 2024.**   Installs the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.
     * @param {number} groupId The id related to the group where the template applications must be installed into.
     * @param {number} templateId The id related to the template that must be installed.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupInstallTemplate: (groupId: number, templateId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_install_template_async](#tag/Templates/operation/workspace_install_template_async).**  **Support for this endpoint will end in 2024.**   Start an async job to install the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.
     * @param {number} groupId The id related to the group where the template applications must be installed into.
     * @param {number} templateId The id related to the template that must be installed.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupInstallTemplateAsync: (groupId: number, templateId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * (Deprecated) Installs the applications of the given template into the given workspace if the user has access to that workspace. The response contains those newly created applications.
     * @param {number} templateId The id related to the template that must be installed.
     * @param {number} workspaceId The id related to the workspace where the template applications must be installed into.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    installTemplate: (templateId: number, workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Start an async job to install the applications of the given template into the given workspace if the user has access to that workspace. The response contains those newly created applications.
     * @param {number} templateId The id related to the template that must be installed.
     * @param {number} workspaceId The id related to the workspace where the template applications must be installed into.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    installTemplateAsync: (templateId: number, workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the template categories and the related templates that are in that category. The template\'s `workspace_id` can be used for previewing purposes because that workspace contains the applications that are in the template. All the `get` and `list` endpoints related to that workspace are publicly accessible.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTemplates: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TemplatesApi - functional programming interface
 * @export
 */
export declare const TemplatesApiFp: (configuration?: Configuration) => {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_install_template](#tag/Templates/operation/workspace_install_template).**  **Support for this endpoint will end in 2024.**   Installs the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.
     * @param {number} groupId The id related to the group where the template applications must be installed into.
     * @param {number} templateId The id related to the template that must be installed.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupInstallTemplate(groupId: number, templateId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationApplication>>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_install_template_async](#tag/Templates/operation/workspace_install_template_async).**  **Support for this endpoint will end in 2024.**   Start an async job to install the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.
     * @param {number} groupId The id related to the group where the template applications must be installed into.
     * @param {number} templateId The id related to the template that must be installed.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupInstallTemplateAsync(groupId: number, templateId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleInstallTemplateJobType>>;
    /**
     * (Deprecated) Installs the applications of the given template into the given workspace if the user has access to that workspace. The response contains those newly created applications.
     * @param {number} templateId The id related to the template that must be installed.
     * @param {number} workspaceId The id related to the workspace where the template applications must be installed into.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    installTemplate(templateId: number, workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationApplication>>>;
    /**
     * Start an async job to install the applications of the given template into the given workspace if the user has access to that workspace. The response contains those newly created applications.
     * @param {number} templateId The id related to the template that must be installed.
     * @param {number} workspaceId The id related to the workspace where the template applications must be installed into.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    installTemplateAsync(templateId: number, workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleInstallTemplateJobType>>;
    /**
     * Lists all the template categories and the related templates that are in that category. The template\'s `workspace_id` can be used for previewing purposes because that workspace contains the applications that are in the template. All the `get` and `list` endpoints related to that workspace are publicly accessible.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTemplates(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateCategories>>>;
};
/**
 * TemplatesApi - factory interface
 * @export
 */
export declare const TemplatesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_install_template](#tag/Templates/operation/workspace_install_template).**  **Support for this endpoint will end in 2024.**   Installs the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.
     * @param {TemplatesApiGroupInstallTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupInstallTemplate(requestParameters: TemplatesApiGroupInstallTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApplicationApplication>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_install_template_async](#tag/Templates/operation/workspace_install_template_async).**  **Support for this endpoint will end in 2024.**   Start an async job to install the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.
     * @param {TemplatesApiGroupInstallTemplateAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupInstallTemplateAsync(requestParameters: TemplatesApiGroupInstallTemplateAsyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<SingleInstallTemplateJobType>;
    /**
     * (Deprecated) Installs the applications of the given template into the given workspace if the user has access to that workspace. The response contains those newly created applications.
     * @param {TemplatesApiInstallTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    installTemplate(requestParameters: TemplatesApiInstallTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApplicationApplication>>;
    /**
     * Start an async job to install the applications of the given template into the given workspace if the user has access to that workspace. The response contains those newly created applications.
     * @param {TemplatesApiInstallTemplateAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    installTemplateAsync(requestParameters: TemplatesApiInstallTemplateAsyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<SingleInstallTemplateJobType>;
    /**
     * Lists all the template categories and the related templates that are in that category. The template\'s `workspace_id` can be used for previewing purposes because that workspace contains the applications that are in the template. All the `get` and `list` endpoints related to that workspace are publicly accessible.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTemplates(options?: RawAxiosRequestConfig): AxiosPromise<Array<TemplateCategories>>;
};
/**
 * Request parameters for groupInstallTemplate operation in TemplatesApi.
 * @export
 * @interface TemplatesApiGroupInstallTemplateRequest
 */
export interface TemplatesApiGroupInstallTemplateRequest {
    /**
     * The id related to the group where the template applications must be installed into.
     * @type {number}
     * @memberof TemplatesApiGroupInstallTemplate
     */
    readonly groupId: number;
    /**
     * The id related to the template that must be installed.
     * @type {number}
     * @memberof TemplatesApiGroupInstallTemplate
     */
    readonly templateId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TemplatesApiGroupInstallTemplate
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof TemplatesApiGroupInstallTemplate
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for groupInstallTemplateAsync operation in TemplatesApi.
 * @export
 * @interface TemplatesApiGroupInstallTemplateAsyncRequest
 */
export interface TemplatesApiGroupInstallTemplateAsyncRequest {
    /**
     * The id related to the group where the template applications must be installed into.
     * @type {number}
     * @memberof TemplatesApiGroupInstallTemplateAsync
     */
    readonly groupId: number;
    /**
     * The id related to the template that must be installed.
     * @type {number}
     * @memberof TemplatesApiGroupInstallTemplateAsync
     */
    readonly templateId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TemplatesApiGroupInstallTemplateAsync
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof TemplatesApiGroupInstallTemplateAsync
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for installTemplate operation in TemplatesApi.
 * @export
 * @interface TemplatesApiInstallTemplateRequest
 */
export interface TemplatesApiInstallTemplateRequest {
    /**
     * The id related to the template that must be installed.
     * @type {number}
     * @memberof TemplatesApiInstallTemplate
     */
    readonly templateId: number;
    /**
     * The id related to the workspace where the template applications must be installed into.
     * @type {number}
     * @memberof TemplatesApiInstallTemplate
     */
    readonly workspaceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TemplatesApiInstallTemplate
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof TemplatesApiInstallTemplate
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for installTemplateAsync operation in TemplatesApi.
 * @export
 * @interface TemplatesApiInstallTemplateAsyncRequest
 */
export interface TemplatesApiInstallTemplateAsyncRequest {
    /**
     * The id related to the template that must be installed.
     * @type {number}
     * @memberof TemplatesApiInstallTemplateAsync
     */
    readonly templateId: number;
    /**
     * The id related to the workspace where the template applications must be installed into.
     * @type {number}
     * @memberof TemplatesApiInstallTemplateAsync
     */
    readonly workspaceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof TemplatesApiInstallTemplateAsync
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof TemplatesApiInstallTemplateAsync
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
export declare class TemplatesApi extends BaseAPI {
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_install_template](#tag/Templates/operation/workspace_install_template).**  **Support for this endpoint will end in 2024.**   Installs the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.
     * @param {TemplatesApiGroupInstallTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    groupInstallTemplate(requestParameters: TemplatesApiGroupInstallTemplateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApplicationApplication[], any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_install_template_async](#tag/Templates/operation/workspace_install_template_async).**  **Support for this endpoint will end in 2024.**   Start an async job to install the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.
     * @param {TemplatesApiGroupInstallTemplateAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    groupInstallTemplateAsync(requestParameters: TemplatesApiGroupInstallTemplateAsyncRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleInstallTemplateJobType, any>>;
    /**
     * (Deprecated) Installs the applications of the given template into the given workspace if the user has access to that workspace. The response contains those newly created applications.
     * @param {TemplatesApiInstallTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    installTemplate(requestParameters: TemplatesApiInstallTemplateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApplicationApplication[], any>>;
    /**
     * Start an async job to install the applications of the given template into the given workspace if the user has access to that workspace. The response contains those newly created applications.
     * @param {TemplatesApiInstallTemplateAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    installTemplateAsync(requestParameters: TemplatesApiInstallTemplateAsyncRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleInstallTemplateJobType, any>>;
    /**
     * Lists all the template categories and the related templates that are in that category. The template\'s `workspace_id` can be used for previewing purposes because that workspace contains the applications that are in the template. All the `get` and `list` endpoints related to that workspace are publicly accessible.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    listTemplates(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TemplateCategories[], any>>;
}
/**
 * TrashApi - axios parameter creator
 * @export
 */
export declare const TrashApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Responds with the workspaces and applications available for the requesting user to inspect the trash contents of.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrashStructure: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_empty_contents](#tag/Trash/operation/workspace_empty_contents).**  **Support for this endpoint will end in 2024.**   Empties the specified group and/or application of trash, including the group and application themselves if they are trashed also.
     * @param {number} groupId The group whose trash contents to empty, including the group itself if it is also trashed.
     * @param {number} [applicationId] Optionally filters down the trash to delete to only items for this application in the group.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupEmptyContents: (groupId: number, applicationId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_get_contents](#tag/Trash/operation/workspace_get_contents).**  **Support for this endpoint will end in 2024.**   Responds with trash contents for a group optionally filtered to a specific application.
     * @param {number} groupId Returns the trash for the group with this id.
     * @param {number} [applicationId] Optionally filters down the trash to only items for this application in the group.
     * @param {number} [page] Selects which page of trash contents should be returned.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupGetContents: (groupId: number, applicationId?: number, page?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Restores the specified trashed item back into baserow.
     * @param {PatchedTrashEntryRequest} [patchedTrashEntryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restore: (patchedTrashEntryRequest?: PatchedTrashEntryRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Empties the specified workspace and/or application of trash, including the workspace and application themselves if they are trashed also.
     * @param {number} workspaceId The workspace whose trash contents to empty, including the workspace itself if it is also trashed.
     * @param {number} [applicationId] Optionally filters down the trash to delete to only items for this application in the workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceEmptyContents: (workspaceId: number, applicationId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with trash contents for a workspace optionally filtered to a specific application.
     * @param {number} workspaceId Returns the trash for the workspace with this id.
     * @param {number} [applicationId] Optionally filters down the trash to only items for this application in the workspace.
     * @param {number} [page] Selects which page of trash contents should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceGetContents: (workspaceId: number, applicationId?: number, page?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TrashApi - functional programming interface
 * @export
 */
export declare const TrashApiFp: (configuration?: Configuration) => {
    /**
     * Responds with the workspaces and applications available for the requesting user to inspect the trash contents of.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrashStructure(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrashStructure>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_empty_contents](#tag/Trash/operation/workspace_empty_contents).**  **Support for this endpoint will end in 2024.**   Empties the specified group and/or application of trash, including the group and application themselves if they are trashed also.
     * @param {number} groupId The group whose trash contents to empty, including the group itself if it is also trashed.
     * @param {number} [applicationId] Optionally filters down the trash to delete to only items for this application in the group.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupEmptyContents(groupId: number, applicationId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_get_contents](#tag/Trash/operation/workspace_get_contents).**  **Support for this endpoint will end in 2024.**   Responds with trash contents for a group optionally filtered to a specific application.
     * @param {number} groupId Returns the trash for the group with this id.
     * @param {number} [applicationId] Optionally filters down the trash to only items for this application in the group.
     * @param {number} [page] Selects which page of trash contents should be returned.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupGetContents(groupId: number, applicationId?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerTrashContents>>;
    /**
     * Restores the specified trashed item back into baserow.
     * @param {PatchedTrashEntryRequest} [patchedTrashEntryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restore(patchedTrashEntryRequest?: PatchedTrashEntryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Empties the specified workspace and/or application of trash, including the workspace and application themselves if they are trashed also.
     * @param {number} workspaceId The workspace whose trash contents to empty, including the workspace itself if it is also trashed.
     * @param {number} [applicationId] Optionally filters down the trash to delete to only items for this application in the workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceEmptyContents(workspaceId: number, applicationId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Responds with trash contents for a workspace optionally filtered to a specific application.
     * @param {number} workspaceId Returns the trash for the workspace with this id.
     * @param {number} [applicationId] Optionally filters down the trash to only items for this application in the workspace.
     * @param {number} [page] Selects which page of trash contents should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceGetContents(workspaceId: number, applicationId?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationSerializerTrashContents>>;
};
/**
 * TrashApi - factory interface
 * @export
 */
export declare const TrashApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Responds with the workspaces and applications available for the requesting user to inspect the trash contents of.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrashStructure(options?: RawAxiosRequestConfig): AxiosPromise<TrashStructure>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_empty_contents](#tag/Trash/operation/workspace_empty_contents).**  **Support for this endpoint will end in 2024.**   Empties the specified group and/or application of trash, including the group and application themselves if they are trashed also.
     * @param {TrashApiGroupEmptyContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupEmptyContents(requestParameters: TrashApiGroupEmptyContentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_get_contents](#tag/Trash/operation/workspace_get_contents).**  **Support for this endpoint will end in 2024.**   Responds with trash contents for a group optionally filtered to a specific application.
     * @param {TrashApiGroupGetContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    groupGetContents(requestParameters: TrashApiGroupGetContentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerTrashContents>;
    /**
     * Restores the specified trashed item back into baserow.
     * @param {TrashApiRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restore(requestParameters?: TrashApiRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Empties the specified workspace and/or application of trash, including the workspace and application themselves if they are trashed also.
     * @param {TrashApiWorkspaceEmptyContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceEmptyContents(requestParameters: TrashApiWorkspaceEmptyContentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Responds with trash contents for a workspace optionally filtered to a specific application.
     * @param {TrashApiWorkspaceGetContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceGetContents(requestParameters: TrashApiWorkspaceGetContentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginationSerializerTrashContents>;
};
/**
 * Request parameters for groupEmptyContents operation in TrashApi.
 * @export
 * @interface TrashApiGroupEmptyContentsRequest
 */
export interface TrashApiGroupEmptyContentsRequest {
    /**
     * The group whose trash contents to empty, including the group itself if it is also trashed.
     * @type {number}
     * @memberof TrashApiGroupEmptyContents
     */
    readonly groupId: number;
    /**
     * Optionally filters down the trash to delete to only items for this application in the group.
     * @type {number}
     * @memberof TrashApiGroupEmptyContents
     */
    readonly applicationId?: number;
}
/**
 * Request parameters for groupGetContents operation in TrashApi.
 * @export
 * @interface TrashApiGroupGetContentsRequest
 */
export interface TrashApiGroupGetContentsRequest {
    /**
     * Returns the trash for the group with this id.
     * @type {number}
     * @memberof TrashApiGroupGetContents
     */
    readonly groupId: number;
    /**
     * Optionally filters down the trash to only items for this application in the group.
     * @type {number}
     * @memberof TrashApiGroupGetContents
     */
    readonly applicationId?: number;
    /**
     * Selects which page of trash contents should be returned.
     * @type {number}
     * @memberof TrashApiGroupGetContents
     */
    readonly page?: number;
}
/**
 * Request parameters for restore operation in TrashApi.
 * @export
 * @interface TrashApiRestoreRequest
 */
export interface TrashApiRestoreRequest {
    /**
     *
     * @type {PatchedTrashEntryRequest}
     * @memberof TrashApiRestore
     */
    readonly patchedTrashEntryRequest?: PatchedTrashEntryRequest;
}
/**
 * Request parameters for workspaceEmptyContents operation in TrashApi.
 * @export
 * @interface TrashApiWorkspaceEmptyContentsRequest
 */
export interface TrashApiWorkspaceEmptyContentsRequest {
    /**
     * The workspace whose trash contents to empty, including the workspace itself if it is also trashed.
     * @type {number}
     * @memberof TrashApiWorkspaceEmptyContents
     */
    readonly workspaceId: number;
    /**
     * Optionally filters down the trash to delete to only items for this application in the workspace.
     * @type {number}
     * @memberof TrashApiWorkspaceEmptyContents
     */
    readonly applicationId?: number;
}
/**
 * Request parameters for workspaceGetContents operation in TrashApi.
 * @export
 * @interface TrashApiWorkspaceGetContentsRequest
 */
export interface TrashApiWorkspaceGetContentsRequest {
    /**
     * Returns the trash for the workspace with this id.
     * @type {number}
     * @memberof TrashApiWorkspaceGetContents
     */
    readonly workspaceId: number;
    /**
     * Optionally filters down the trash to only items for this application in the workspace.
     * @type {number}
     * @memberof TrashApiWorkspaceGetContents
     */
    readonly applicationId?: number;
    /**
     * Selects which page of trash contents should be returned.
     * @type {number}
     * @memberof TrashApiWorkspaceGetContents
     */
    readonly page?: number;
}
/**
 * TrashApi - object-oriented interface
 * @export
 * @class TrashApi
 * @extends {BaseAPI}
 */
export declare class TrashApi extends BaseAPI {
    /**
     * Responds with the workspaces and applications available for the requesting user to inspect the trash contents of.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrashApi
     */
    getTrashStructure(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TrashStructure, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_empty_contents](#tag/Trash/operation/workspace_empty_contents).**  **Support for this endpoint will end in 2024.**   Empties the specified group and/or application of trash, including the group and application themselves if they are trashed also.
     * @param {TrashApiGroupEmptyContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TrashApi
     */
    groupEmptyContents(requestParameters: TrashApiGroupEmptyContentsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * **This endpoint has been deprecated and replaced with a new endpoint, [workspace_get_contents](#tag/Trash/operation/workspace_get_contents).**  **Support for this endpoint will end in 2024.**   Responds with trash contents for a group optionally filtered to a specific application.
     * @param {TrashApiGroupGetContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TrashApi
     */
    groupGetContents(requestParameters: TrashApiGroupGetContentsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerTrashContents, any>>;
    /**
     * Restores the specified trashed item back into baserow.
     * @param {TrashApiRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrashApi
     */
    restore(requestParameters?: TrashApiRestoreRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Empties the specified workspace and/or application of trash, including the workspace and application themselves if they are trashed also.
     * @param {TrashApiWorkspaceEmptyContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrashApi
     */
    workspaceEmptyContents(requestParameters: TrashApiWorkspaceEmptyContentsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Responds with trash contents for a workspace optionally filtered to a specific application.
     * @param {TrashApiWorkspaceGetContentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrashApi
     */
    workspaceGetContents(requestParameters: TrashApiWorkspaceGetContentsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginationSerializerTrashContents, any>>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Changes the password of an authenticated user, but only if the old password matches.
     * @param {ChangePasswordBodyValidation} changePasswordBodyValidation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword: (changePasswordBodyValidation: ChangePasswordBodyValidation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new user based on the provided values. If desired an authentication JWT can be generated right away. After creating an account the initial workspace containing a database is created.
     * @param {Register} register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (register: Register, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the relevant user information that for example could be shown on a dashboard. It will contain all the pending workspace invitations for that user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboard: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Redoes the latest redoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be redone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.
     * @param {string} clientSessionId The particular client session to redo actions for. The actions must have been performed with this same header set with the same value for them to be redoable by this endpoint.
     * @param {PatchedUndoRedoRequest} [patchedUndoRedoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redo: (clientSessionId: string, patchedUndoRedoRequest?: PatchedUndoRedoRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Changes the password of a user if the reset token is valid. The **send_password_reset_email** endpoint sends an email to the user containing the token. That token can be used to change the password here without providing the old password.
     * @param {ResetPasswordBodyValidation} resetPasswordBodyValidation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword: (resetPasswordBodyValidation: ResetPasswordBodyValidation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Schedules the account deletion of the authenticated user. The user will be permanently deleted after the grace delay defined by the instance administrator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleAccountDeletion: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sends an email containing the password reset link to the email address of the user. This will only be done if a user is found with the given email address. The endpoint will not fail if the email address is not found. The link is going to the valid for 48 hours.
     * @param {SendResetPasswordEmailBodyValidation} sendResetPasswordEmailBodyValidation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendPasswordResetEmail: (sendResetPasswordEmailBodyValidation: SendResetPasswordEmailBodyValidation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sends an email to the user with an email verification link if the user\'s email is not verified yet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendVerifyEmail: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Authenticates an existing user based on their email and their password. If successful, an access token and a refresh token will be returned.
     * @param {TokenObtainPairWithUser} tokenObtainPairWithUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenAuth: (tokenObtainPairWithUser: TokenObtainPairWithUser, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Blacklists the provided token. This can be used the sign the user off.
     * @param {TokenBlacklist} tokenBlacklist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenBlacklist: (tokenBlacklist: TokenBlacklist, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generate a new access_token that can be used to continue operating on Baserow starting from a valid refresh token.
     * @param {TokenRefreshWithUser} [tokenRefreshWithUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenRefresh: (tokenRefreshWithUser?: TokenRefreshWithUser, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Verifies if the refresh token is valid and can be used to generate a new access_token.
     * @param {TokenVerifyWithUser} tokenVerifyWithUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenVerify: (tokenVerifyWithUser: TokenVerifyWithUser, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * undoes the latest undoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be undone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.
     * @param {string} clientSessionId The particular client session to undo actions for. The actions must have been performed with this same header set with the same value for them to be undoable by this endpoint.
     * @param {PatchedUndoRedoRequest} [patchedUndoRedoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    undo: (clientSessionId: string, patchedUndoRedoRequest?: PatchedUndoRedoRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the account information of the authenticated user.
     * @param {PatchedAccount} [patchedAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount: (patchedAccount?: PatchedAccount, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Passing the correct verification token will confirm that the user\'s email address belongs to the user. This endpoint also optionally returns user information, access token and the refresh token for automatically signing user in the system if the request is performed by unauthenticated user.
     * @param {VerifyEmailAddress} verifyEmailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail: (verifyEmailAddress: VerifyEmailAddress, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * Changes the password of an authenticated user, but only if the old password matches.
     * @param {ChangePasswordBodyValidation} changePasswordBodyValidation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(changePasswordBodyValidation: ChangePasswordBodyValidation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Creates a new user based on the provided values. If desired an authentication JWT can be generated right away. After creating an account the initial workspace containing a database is created.
     * @param {Register} register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(register: Register, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUser200Response>>;
    /**
     * Lists all the relevant user information that for example could be shown on a dashboard. It will contain all the pending workspace invitations for that user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>>;
    /**
     * Redoes the latest redoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be redone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.
     * @param {string} clientSessionId The particular client session to redo actions for. The actions must have been performed with this same header set with the same value for them to be redoable by this endpoint.
     * @param {PatchedUndoRedoRequest} [patchedUndoRedoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redo(clientSessionId: string, patchedUndoRedoRequest?: PatchedUndoRedoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UndoRedoResponse>>;
    /**
     * Changes the password of a user if the reset token is valid. The **send_password_reset_email** endpoint sends an email to the user containing the token. That token can be used to change the password here without providing the old password.
     * @param {ResetPasswordBodyValidation} resetPasswordBodyValidation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(resetPasswordBodyValidation: ResetPasswordBodyValidation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Schedules the account deletion of the authenticated user. The user will be permanently deleted after the grace delay defined by the instance administrator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleAccountDeletion(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sends an email containing the password reset link to the email address of the user. This will only be done if a user is found with the given email address. The endpoint will not fail if the email address is not found. The link is going to the valid for 48 hours.
     * @param {SendResetPasswordEmailBodyValidation} sendResetPasswordEmailBodyValidation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendPasswordResetEmail(sendResetPasswordEmailBodyValidation: SendResetPasswordEmailBodyValidation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sends an email to the user with an email verification link if the user\'s email is not verified yet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendVerifyEmail(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Authenticates an existing user based on their email and their password. If successful, an access token and a refresh token will be returned.
     * @param {TokenObtainPairWithUser} tokenObtainPairWithUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenAuth(tokenObtainPairWithUser: TokenObtainPairWithUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUser200Response>>;
    /**
     * Blacklists the provided token. This can be used the sign the user off.
     * @param {TokenBlacklist} tokenBlacklist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenBlacklist(tokenBlacklist: TokenBlacklist, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Generate a new access_token that can be used to continue operating on Baserow starting from a valid refresh token.
     * @param {TokenRefreshWithUser} [tokenRefreshWithUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenRefresh(tokenRefreshWithUser?: TokenRefreshWithUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminImpersonateUser200Response>>;
    /**
     * Verifies if the refresh token is valid and can be used to generate a new access_token.
     * @param {TokenVerifyWithUser} tokenVerifyWithUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenVerify(tokenVerifyWithUser: TokenVerifyWithUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenVerify200Response>>;
    /**
     * undoes the latest undoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be undone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.
     * @param {string} clientSessionId The particular client session to undo actions for. The actions must have been performed with this same header set with the same value for them to be undoable by this endpoint.
     * @param {PatchedUndoRedoRequest} [patchedUndoRedoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    undo(clientSessionId: string, patchedUndoRedoRequest?: PatchedUndoRedoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UndoRedoResponse>>;
    /**
     * Updates the account information of the authenticated user.
     * @param {PatchedAccount} [patchedAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(patchedAccount?: PatchedAccount, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>>;
    /**
     * Passing the correct verification token will confirm that the user\'s email address belongs to the user. This endpoint also optionally returns user information, access token and the refresh token for automatically signing user in the system if the request is performed by unauthenticated user.
     * @param {VerifyEmailAddress} verifyEmailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(verifyEmailAddress: VerifyEmailAddress, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUser200Response>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Changes the password of an authenticated user, but only if the old password matches.
     * @param {UserApiChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(requestParameters: UserApiChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Creates a new user based on the provided values. If desired an authentication JWT can be generated right away. After creating an account the initial workspace containing a database is created.
     * @param {UserApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(requestParameters: UserApiCreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateUser200Response>;
    /**
     * Lists all the relevant user information that for example could be shown on a dashboard. It will contain all the pending workspace invitations for that user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboard(options?: RawAxiosRequestConfig): AxiosPromise<Dashboard>;
    /**
     * Redoes the latest redoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be redone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.
     * @param {UserApiRedoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redo(requestParameters: UserApiRedoRequest, options?: RawAxiosRequestConfig): AxiosPromise<UndoRedoResponse>;
    /**
     * Changes the password of a user if the reset token is valid. The **send_password_reset_email** endpoint sends an email to the user containing the token. That token can be used to change the password here without providing the old password.
     * @param {UserApiResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(requestParameters: UserApiResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Schedules the account deletion of the authenticated user. The user will be permanently deleted after the grace delay defined by the instance administrator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleAccountDeletion(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sends an email containing the password reset link to the email address of the user. This will only be done if a user is found with the given email address. The endpoint will not fail if the email address is not found. The link is going to the valid for 48 hours.
     * @param {UserApiSendPasswordResetEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendPasswordResetEmail(requestParameters: UserApiSendPasswordResetEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sends an email to the user with an email verification link if the user\'s email is not verified yet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendVerifyEmail(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Authenticates an existing user based on their email and their password. If successful, an access token and a refresh token will be returned.
     * @param {UserApiTokenAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenAuth(requestParameters: UserApiTokenAuthRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateUser200Response>;
    /**
     * Blacklists the provided token. This can be used the sign the user off.
     * @param {UserApiTokenBlacklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenBlacklist(requestParameters: UserApiTokenBlacklistRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Generate a new access_token that can be used to continue operating on Baserow starting from a valid refresh token.
     * @param {UserApiTokenRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenRefresh(requestParameters?: UserApiTokenRefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdminImpersonateUser200Response>;
    /**
     * Verifies if the refresh token is valid and can be used to generate a new access_token.
     * @param {UserApiTokenVerifyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenVerify(requestParameters: UserApiTokenVerifyRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenVerify200Response>;
    /**
     * undoes the latest undoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be undone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.
     * @param {UserApiUndoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    undo(requestParameters: UserApiUndoRequest, options?: RawAxiosRequestConfig): AxiosPromise<UndoRedoResponse>;
    /**
     * Updates the account information of the authenticated user.
     * @param {UserApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(requestParameters?: UserApiUpdateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account>;
    /**
     * Passing the correct verification token will confirm that the user\'s email address belongs to the user. This endpoint also optionally returns user information, access token and the refresh token for automatically signing user in the system if the request is performed by unauthenticated user.
     * @param {UserApiVerifyEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(requestParameters: UserApiVerifyEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateUser200Response>;
};
/**
 * Request parameters for changePassword operation in UserApi.
 * @export
 * @interface UserApiChangePasswordRequest
 */
export interface UserApiChangePasswordRequest {
    /**
     *
     * @type {ChangePasswordBodyValidation}
     * @memberof UserApiChangePassword
     */
    readonly changePasswordBodyValidation: ChangePasswordBodyValidation;
}
/**
 * Request parameters for createUser operation in UserApi.
 * @export
 * @interface UserApiCreateUserRequest
 */
export interface UserApiCreateUserRequest {
    /**
     *
     * @type {Register}
     * @memberof UserApiCreateUser
     */
    readonly register: Register;
}
/**
 * Request parameters for redo operation in UserApi.
 * @export
 * @interface UserApiRedoRequest
 */
export interface UserApiRedoRequest {
    /**
     * The particular client session to redo actions for. The actions must have been performed with this same header set with the same value for them to be redoable by this endpoint.
     * @type {string}
     * @memberof UserApiRedo
     */
    readonly clientSessionId: string;
    /**
     *
     * @type {PatchedUndoRedoRequest}
     * @memberof UserApiRedo
     */
    readonly patchedUndoRedoRequest?: PatchedUndoRedoRequest;
}
/**
 * Request parameters for resetPassword operation in UserApi.
 * @export
 * @interface UserApiResetPasswordRequest
 */
export interface UserApiResetPasswordRequest {
    /**
     *
     * @type {ResetPasswordBodyValidation}
     * @memberof UserApiResetPassword
     */
    readonly resetPasswordBodyValidation: ResetPasswordBodyValidation;
}
/**
 * Request parameters for sendPasswordResetEmail operation in UserApi.
 * @export
 * @interface UserApiSendPasswordResetEmailRequest
 */
export interface UserApiSendPasswordResetEmailRequest {
    /**
     *
     * @type {SendResetPasswordEmailBodyValidation}
     * @memberof UserApiSendPasswordResetEmail
     */
    readonly sendResetPasswordEmailBodyValidation: SendResetPasswordEmailBodyValidation;
}
/**
 * Request parameters for tokenAuth operation in UserApi.
 * @export
 * @interface UserApiTokenAuthRequest
 */
export interface UserApiTokenAuthRequest {
    /**
     *
     * @type {TokenObtainPairWithUser}
     * @memberof UserApiTokenAuth
     */
    readonly tokenObtainPairWithUser: TokenObtainPairWithUser;
}
/**
 * Request parameters for tokenBlacklist operation in UserApi.
 * @export
 * @interface UserApiTokenBlacklistRequest
 */
export interface UserApiTokenBlacklistRequest {
    /**
     *
     * @type {TokenBlacklist}
     * @memberof UserApiTokenBlacklist
     */
    readonly tokenBlacklist: TokenBlacklist;
}
/**
 * Request parameters for tokenRefresh operation in UserApi.
 * @export
 * @interface UserApiTokenRefreshRequest
 */
export interface UserApiTokenRefreshRequest {
    /**
     *
     * @type {TokenRefreshWithUser}
     * @memberof UserApiTokenRefresh
     */
    readonly tokenRefreshWithUser?: TokenRefreshWithUser;
}
/**
 * Request parameters for tokenVerify operation in UserApi.
 * @export
 * @interface UserApiTokenVerifyRequest
 */
export interface UserApiTokenVerifyRequest {
    /**
     *
     * @type {TokenVerifyWithUser}
     * @memberof UserApiTokenVerify
     */
    readonly tokenVerifyWithUser: TokenVerifyWithUser;
}
/**
 * Request parameters for undo operation in UserApi.
 * @export
 * @interface UserApiUndoRequest
 */
export interface UserApiUndoRequest {
    /**
     * The particular client session to undo actions for. The actions must have been performed with this same header set with the same value for them to be undoable by this endpoint.
     * @type {string}
     * @memberof UserApiUndo
     */
    readonly clientSessionId: string;
    /**
     *
     * @type {PatchedUndoRedoRequest}
     * @memberof UserApiUndo
     */
    readonly patchedUndoRedoRequest?: PatchedUndoRedoRequest;
}
/**
 * Request parameters for updateAccount operation in UserApi.
 * @export
 * @interface UserApiUpdateAccountRequest
 */
export interface UserApiUpdateAccountRequest {
    /**
     *
     * @type {PatchedAccount}
     * @memberof UserApiUpdateAccount
     */
    readonly patchedAccount?: PatchedAccount;
}
/**
 * Request parameters for verifyEmail operation in UserApi.
 * @export
 * @interface UserApiVerifyEmailRequest
 */
export interface UserApiVerifyEmailRequest {
    /**
     *
     * @type {VerifyEmailAddress}
     * @memberof UserApiVerifyEmail
     */
    readonly verifyEmailAddress: VerifyEmailAddress;
}
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * Changes the password of an authenticated user, but only if the old password matches.
     * @param {UserApiChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changePassword(requestParameters: UserApiChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Creates a new user based on the provided values. If desired an authentication JWT can be generated right away. After creating an account the initial workspace containing a database is created.
     * @param {UserApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    createUser(requestParameters: UserApiCreateUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateUser200Response, any>>;
    /**
     * Lists all the relevant user information that for example could be shown on a dashboard. It will contain all the pending workspace invitations for that user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    dashboard(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Dashboard, any>>;
    /**
     * Redoes the latest redoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be redone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.
     * @param {UserApiRedoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    redo(requestParameters: UserApiRedoRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UndoRedoResponse, any>>;
    /**
     * Changes the password of a user if the reset token is valid. The **send_password_reset_email** endpoint sends an email to the user containing the token. That token can be used to change the password here without providing the old password.
     * @param {UserApiResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetPassword(requestParameters: UserApiResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Schedules the account deletion of the authenticated user. The user will be permanently deleted after the grace delay defined by the instance administrator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    scheduleAccountDeletion(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Sends an email containing the password reset link to the email address of the user. This will only be done if a user is found with the given email address. The endpoint will not fail if the email address is not found. The link is going to the valid for 48 hours.
     * @param {UserApiSendPasswordResetEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    sendPasswordResetEmail(requestParameters: UserApiSendPasswordResetEmailRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Sends an email to the user with an email verification link if the user\'s email is not verified yet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    sendVerifyEmail(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Authenticates an existing user based on their email and their password. If successful, an access token and a refresh token will be returned.
     * @param {UserApiTokenAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    tokenAuth(requestParameters: UserApiTokenAuthRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateUser200Response, any>>;
    /**
     * Blacklists the provided token. This can be used the sign the user off.
     * @param {UserApiTokenBlacklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    tokenBlacklist(requestParameters: UserApiTokenBlacklistRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Generate a new access_token that can be used to continue operating on Baserow starting from a valid refresh token.
     * @param {UserApiTokenRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    tokenRefresh(requestParameters?: UserApiTokenRefreshRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminImpersonateUser200Response, any>>;
    /**
     * Verifies if the refresh token is valid and can be used to generate a new access_token.
     * @param {UserApiTokenVerifyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    tokenVerify(requestParameters: UserApiTokenVerifyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenVerify200Response, any>>;
    /**
     * undoes the latest undoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be undone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.
     * @param {UserApiUndoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    undo(requestParameters: UserApiUndoRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UndoRedoResponse, any>>;
    /**
     * Updates the account information of the authenticated user.
     * @param {UserApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateAccount(requestParameters?: UserApiUpdateAccountRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Account, any>>;
    /**
     * Passing the correct verification token will confirm that the user\'s email address belongs to the user. This endpoint also optionally returns user information, access token and the refresh token for automatically signing user in the system if the request is performed by unauthenticated user.
     * @param {UserApiVerifyEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    verifyEmail(requestParameters: UserApiVerifyEmailRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateUser200Response, any>>;
}
/**
 * UserFilesApi - axios parameter creator
 * @export
 */
export declare const UserFilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Uploads a file to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Uploads a file to Baserow by downloading it from the provided URL.
     * @param {UserFileUploadViaURLRequest} userFileUploadViaURLRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadViaUrl: (userFileUploadViaURLRequest: UserFileUploadViaURLRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserFilesApi - functional programming interface
 * @export
 */
export declare const UserFilesApiFp: (configuration?: Configuration) => {
    /**
     * Uploads a file to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFile>>;
    /**
     * Uploads a file to Baserow by downloading it from the provided URL.
     * @param {UserFileUploadViaURLRequest} userFileUploadViaURLRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadViaUrl(userFileUploadViaURLRequest: UserFileUploadViaURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFile>>;
};
/**
 * UserFilesApi - factory interface
 * @export
 */
export declare const UserFilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Uploads a file to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(options?: RawAxiosRequestConfig): AxiosPromise<UserFile>;
    /**
     * Uploads a file to Baserow by downloading it from the provided URL.
     * @param {UserFilesApiUploadViaUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadViaUrl(requestParameters: UserFilesApiUploadViaUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserFile>;
};
/**
 * Request parameters for uploadViaUrl operation in UserFilesApi.
 * @export
 * @interface UserFilesApiUploadViaUrlRequest
 */
export interface UserFilesApiUploadViaUrlRequest {
    /**
     *
     * @type {UserFileUploadViaURLRequest}
     * @memberof UserFilesApiUploadViaUrl
     */
    readonly userFileUploadViaURLRequest: UserFileUploadViaURLRequest;
}
/**
 * UserFilesApi - object-oriented interface
 * @export
 * @class UserFilesApi
 * @extends {BaseAPI}
 */
export declare class UserFilesApi extends BaseAPI {
    /**
     * Uploads a file to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFilesApi
     */
    uploadFile(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserFile, any>>;
    /**
     * Uploads a file to Baserow by downloading it from the provided URL.
     * @param {UserFilesApiUploadViaUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFilesApi
     */
    uploadViaUrl(requestParameters: UserFilesApiUploadViaUrlRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserFile, any>>;
}
/**
 * UserSourceRolesApi - axios parameter creator
 * @export
 */
export declare const UserSourceRolesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Lists all the roles of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} applicationId Returns only the roles of the application related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationUserSourceRoles: (applicationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserSourceRolesApi - functional programming interface
 * @export
 */
export declare const UserSourceRolesApiFp: (configuration?: Configuration) => {
    /**
     * Lists all the roles of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} applicationId Returns only the roles of the application related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationUserSourceRoles(applicationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSourceUserSourceRoles>>;
};
/**
 * UserSourceRolesApi - factory interface
 * @export
 */
export declare const UserSourceRolesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Lists all the roles of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {UserSourceRolesApiListApplicationUserSourceRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationUserSourceRoles(requestParameters: UserSourceRolesApiListApplicationUserSourceRolesRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserSourceUserSourceRoles>;
};
/**
 * Request parameters for listApplicationUserSourceRoles operation in UserSourceRolesApi.
 * @export
 * @interface UserSourceRolesApiListApplicationUserSourceRolesRequest
 */
export interface UserSourceRolesApiListApplicationUserSourceRolesRequest {
    /**
     * Returns only the roles of the application related to the provided Id.
     * @type {number}
     * @memberof UserSourceRolesApiListApplicationUserSourceRoles
     */
    readonly applicationId: number;
}
/**
 * UserSourceRolesApi - object-oriented interface
 * @export
 * @class UserSourceRolesApi
 * @extends {BaseAPI}
 */
export declare class UserSourceRolesApi extends BaseAPI {
    /**
     * Lists all the roles of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {UserSourceRolesApiListApplicationUserSourceRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourceRolesApi
     */
    listApplicationUserSourceRoles(requestParameters: UserSourceRolesApiListApplicationUserSourceRolesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSourceUserSourceRoles, any>>;
}
/**
 * UserSourcesApi - axios parameter creator
 * @export
 */
export declare const UserSourcesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new user_source
     * @param {number} applicationId Creates an user_source for the application related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {UserSourceCreateUserSource} [userSourceCreateUserSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApplicationUserSource: (applicationId: number, clientSessionId?: string, userSourceCreateUserSource?: UserSourceCreateUserSource, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the user_source related by the given id.
     * @param {number} userSourceId The id of the user_source
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApplicationUserSource: (userSourceId: number, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List per user sources the first 5 users available.
     * @param {number} applicationId The application we want the users for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationUserSourceUsers: (applicationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the user_sources of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} applicationId Returns only the user_sources of the application related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationUserSources: (applicationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Moves the user_source in the application before another user_source or at the end of the application if no before user_source is given. The user_sources must belong to the same application.
     * @param {number} userSourceId The id of the user_source to move
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedMoveUserSource} [patchedMoveUserSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveApplicationUserSource: (userSourceId: number, clientSessionId?: string, patchedMoveUserSource?: PatchedMoveUserSource, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing user_source.
     * @param {number} userSourceId The id of the user_source
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {LocalBaserowUserSourceUpdateUserSource} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplicationUserSource: (userSourceId: number, clientSessionId?: string, body?: LocalBaserowUserSourceUpdateUserSource, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Force authenticates an existing user based on their ID. If successful, an access token and a refresh token will be returned.
     * @param {number} userSourceId The user source to use to authenticate the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceForceTokenAuth: (userSourceId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Authenticates an existing user against a user source based on their credentials. If successful, an access token and a refresh token will be returned.
     * @param {number} userSourceId The id of the user_source to move
     * @param {TokenObtainPair} tokenObtainPair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceTokenAuth: (userSourceId: number, tokenObtainPair: TokenObtainPair, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Blacklists the provided user source token. This can be used the sign the user off.
     * @param {TokenBlacklist} tokenBlacklist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceTokenBlacklist: (tokenBlacklist: TokenBlacklist, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generate a new access_token that can be used to continue operating on Baserow with a user source user starting from a valid refresh token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceTokenRefresh: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserSourcesApi - functional programming interface
 * @export
 */
export declare const UserSourcesApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new user_source
     * @param {number} applicationId Creates an user_source for the application related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {UserSourceCreateUserSource} [userSourceCreateUserSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApplicationUserSource(applicationId: number, clientSessionId?: string, userSourceCreateUserSource?: UserSourceCreateUserSource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSourceUserSource>>;
    /**
     * Deletes the user_source related by the given id.
     * @param {number} userSourceId The id of the user_source
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApplicationUserSource(userSourceId: number, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List per user sources the first 5 users available.
     * @param {number} applicationId The application we want the users for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationUserSourceUsers(applicationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPerUserSource>>;
    /**
     * Lists all the user_sources of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {number} applicationId Returns only the user_sources of the application related to the provided Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationUserSources(applicationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserSourceUserSource>>>;
    /**
     * Moves the user_source in the application before another user_source or at the end of the application if no before user_source is given. The user_sources must belong to the same application.
     * @param {number} userSourceId The id of the user_source to move
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedMoveUserSource} [patchedMoveUserSource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveApplicationUserSource(userSourceId: number, clientSessionId?: string, patchedMoveUserSource?: PatchedMoveUserSource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSourceUserSource>>;
    /**
     * Updates an existing user_source.
     * @param {number} userSourceId The id of the user_source
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {LocalBaserowUserSourceUpdateUserSource} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplicationUserSource(userSourceId: number, clientSessionId?: string, body?: LocalBaserowUserSourceUpdateUserSource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSourceUserSource>>;
    /**
     * Force authenticates an existing user based on their ID. If successful, an access token and a refresh token will be returned.
     * @param {number} userSourceId The user source to use to authenticate the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceForceTokenAuth(userSourceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSourceForceTokenAuth200Response>>;
    /**
     * Authenticates an existing user against a user source based on their credentials. If successful, an access token and a refresh token will be returned.
     * @param {number} userSourceId The id of the user_source to move
     * @param {TokenObtainPair} tokenObtainPair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceTokenAuth(userSourceId: number, tokenObtainPair: TokenObtainPair, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSourceForceTokenAuth200Response>>;
    /**
     * Blacklists the provided user source token. This can be used the sign the user off.
     * @param {TokenBlacklist} tokenBlacklist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceTokenBlacklist(tokenBlacklist: TokenBlacklist, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Generate a new access_token that can be used to continue operating on Baserow with a user source user starting from a valid refresh token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceTokenRefresh(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSourceTokenRefresh200Response>>;
};
/**
 * UserSourcesApi - factory interface
 * @export
 */
export declare const UserSourcesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new user_source
     * @param {UserSourcesApiCreateApplicationUserSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApplicationUserSource(requestParameters: UserSourcesApiCreateApplicationUserSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserSourceUserSource>;
    /**
     * Deletes the user_source related by the given id.
     * @param {UserSourcesApiDeleteApplicationUserSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApplicationUserSource(requestParameters: UserSourcesApiDeleteApplicationUserSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * List per user sources the first 5 users available.
     * @param {UserSourcesApiListApplicationUserSourceUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationUserSourceUsers(requestParameters: UserSourcesApiListApplicationUserSourceUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPerUserSource>;
    /**
     * Lists all the user_sources of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {UserSourcesApiListApplicationUserSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplicationUserSources(requestParameters: UserSourcesApiListApplicationUserSourcesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserSourceUserSource>>;
    /**
     * Moves the user_source in the application before another user_source or at the end of the application if no before user_source is given. The user_sources must belong to the same application.
     * @param {UserSourcesApiMoveApplicationUserSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveApplicationUserSource(requestParameters: UserSourcesApiMoveApplicationUserSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserSourceUserSource>;
    /**
     * Updates an existing user_source.
     * @param {UserSourcesApiUpdateApplicationUserSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplicationUserSource(requestParameters: UserSourcesApiUpdateApplicationUserSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserSourceUserSource>;
    /**
     * Force authenticates an existing user based on their ID. If successful, an access token and a refresh token will be returned.
     * @param {UserSourcesApiUserSourceForceTokenAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceForceTokenAuth(requestParameters: UserSourcesApiUserSourceForceTokenAuthRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserSourceForceTokenAuth200Response>;
    /**
     * Authenticates an existing user against a user source based on their credentials. If successful, an access token and a refresh token will be returned.
     * @param {UserSourcesApiUserSourceTokenAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceTokenAuth(requestParameters: UserSourcesApiUserSourceTokenAuthRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserSourceForceTokenAuth200Response>;
    /**
     * Blacklists the provided user source token. This can be used the sign the user off.
     * @param {UserSourcesApiUserSourceTokenBlacklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceTokenBlacklist(requestParameters: UserSourcesApiUserSourceTokenBlacklistRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Generate a new access_token that can be used to continue operating on Baserow with a user source user starting from a valid refresh token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSourceTokenRefresh(options?: RawAxiosRequestConfig): AxiosPromise<UserSourceTokenRefresh200Response>;
};
/**
 * Request parameters for createApplicationUserSource operation in UserSourcesApi.
 * @export
 * @interface UserSourcesApiCreateApplicationUserSourceRequest
 */
export interface UserSourcesApiCreateApplicationUserSourceRequest {
    /**
     * Creates an user_source for the application related to the provided value.
     * @type {number}
     * @memberof UserSourcesApiCreateApplicationUserSource
     */
    readonly applicationId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof UserSourcesApiCreateApplicationUserSource
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {UserSourceCreateUserSource}
     * @memberof UserSourcesApiCreateApplicationUserSource
     */
    readonly userSourceCreateUserSource?: UserSourceCreateUserSource;
}
/**
 * Request parameters for deleteApplicationUserSource operation in UserSourcesApi.
 * @export
 * @interface UserSourcesApiDeleteApplicationUserSourceRequest
 */
export interface UserSourcesApiDeleteApplicationUserSourceRequest {
    /**
     * The id of the user_source
     * @type {number}
     * @memberof UserSourcesApiDeleteApplicationUserSource
     */
    readonly userSourceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof UserSourcesApiDeleteApplicationUserSource
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for listApplicationUserSourceUsers operation in UserSourcesApi.
 * @export
 * @interface UserSourcesApiListApplicationUserSourceUsersRequest
 */
export interface UserSourcesApiListApplicationUserSourceUsersRequest {
    /**
     * The application we want the users for.
     * @type {number}
     * @memberof UserSourcesApiListApplicationUserSourceUsers
     */
    readonly applicationId: number;
}
/**
 * Request parameters for listApplicationUserSources operation in UserSourcesApi.
 * @export
 * @interface UserSourcesApiListApplicationUserSourcesRequest
 */
export interface UserSourcesApiListApplicationUserSourcesRequest {
    /**
     * Returns only the user_sources of the application related to the provided Id.
     * @type {number}
     * @memberof UserSourcesApiListApplicationUserSources
     */
    readonly applicationId: number;
}
/**
 * Request parameters for moveApplicationUserSource operation in UserSourcesApi.
 * @export
 * @interface UserSourcesApiMoveApplicationUserSourceRequest
 */
export interface UserSourcesApiMoveApplicationUserSourceRequest {
    /**
     * The id of the user_source to move
     * @type {number}
     * @memberof UserSourcesApiMoveApplicationUserSource
     */
    readonly userSourceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof UserSourcesApiMoveApplicationUserSource
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedMoveUserSource}
     * @memberof UserSourcesApiMoveApplicationUserSource
     */
    readonly patchedMoveUserSource?: PatchedMoveUserSource;
}
/**
 * Request parameters for updateApplicationUserSource operation in UserSourcesApi.
 * @export
 * @interface UserSourcesApiUpdateApplicationUserSourceRequest
 */
export interface UserSourcesApiUpdateApplicationUserSourceRequest {
    /**
     * The id of the user_source
     * @type {number}
     * @memberof UserSourcesApiUpdateApplicationUserSource
     */
    readonly userSourceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof UserSourcesApiUpdateApplicationUserSource
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {LocalBaserowUserSourceUpdateUserSource}
     * @memberof UserSourcesApiUpdateApplicationUserSource
     */
    readonly body?: LocalBaserowUserSourceUpdateUserSource;
}
/**
 * Request parameters for userSourceForceTokenAuth operation in UserSourcesApi.
 * @export
 * @interface UserSourcesApiUserSourceForceTokenAuthRequest
 */
export interface UserSourcesApiUserSourceForceTokenAuthRequest {
    /**
     * The user source to use to authenticate the user.
     * @type {number}
     * @memberof UserSourcesApiUserSourceForceTokenAuth
     */
    readonly userSourceId: number;
}
/**
 * Request parameters for userSourceTokenAuth operation in UserSourcesApi.
 * @export
 * @interface UserSourcesApiUserSourceTokenAuthRequest
 */
export interface UserSourcesApiUserSourceTokenAuthRequest {
    /**
     * The id of the user_source to move
     * @type {number}
     * @memberof UserSourcesApiUserSourceTokenAuth
     */
    readonly userSourceId: number;
    /**
     *
     * @type {TokenObtainPair}
     * @memberof UserSourcesApiUserSourceTokenAuth
     */
    readonly tokenObtainPair: TokenObtainPair;
}
/**
 * Request parameters for userSourceTokenBlacklist operation in UserSourcesApi.
 * @export
 * @interface UserSourcesApiUserSourceTokenBlacklistRequest
 */
export interface UserSourcesApiUserSourceTokenBlacklistRequest {
    /**
     *
     * @type {TokenBlacklist}
     * @memberof UserSourcesApiUserSourceTokenBlacklist
     */
    readonly tokenBlacklist: TokenBlacklist;
}
/**
 * UserSourcesApi - object-oriented interface
 * @export
 * @class UserSourcesApi
 * @extends {BaseAPI}
 */
export declare class UserSourcesApi extends BaseAPI {
    /**
     * Creates a new user_source
     * @param {UserSourcesApiCreateApplicationUserSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    createApplicationUserSource(requestParameters: UserSourcesApiCreateApplicationUserSourceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSourceUserSource, any>>;
    /**
     * Deletes the user_source related by the given id.
     * @param {UserSourcesApiDeleteApplicationUserSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    deleteApplicationUserSource(requestParameters: UserSourcesApiDeleteApplicationUserSourceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List per user sources the first 5 users available.
     * @param {UserSourcesApiListApplicationUserSourceUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    listApplicationUserSourceUsers(requestParameters: UserSourcesApiListApplicationUserSourceUsersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersPerUserSource, any>>;
    /**
     * Lists all the user_sources of the application related to the provided parameter if the user has access to the related application\'s workspace. If the workspace is related to a template, then this endpoint will be publicly accessible.
     * @param {UserSourcesApiListApplicationUserSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    listApplicationUserSources(requestParameters: UserSourcesApiListApplicationUserSourcesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSourceUserSource[], any>>;
    /**
     * Moves the user_source in the application before another user_source or at the end of the application if no before user_source is given. The user_sources must belong to the same application.
     * @param {UserSourcesApiMoveApplicationUserSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    moveApplicationUserSource(requestParameters: UserSourcesApiMoveApplicationUserSourceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSourceUserSource, any>>;
    /**
     * Updates an existing user_source.
     * @param {UserSourcesApiUpdateApplicationUserSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    updateApplicationUserSource(requestParameters: UserSourcesApiUpdateApplicationUserSourceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSourceUserSource, any>>;
    /**
     * Force authenticates an existing user based on their ID. If successful, an access token and a refresh token will be returned.
     * @param {UserSourcesApiUserSourceForceTokenAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    userSourceForceTokenAuth(requestParameters: UserSourcesApiUserSourceForceTokenAuthRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSourceForceTokenAuth200Response, any>>;
    /**
     * Authenticates an existing user against a user source based on their credentials. If successful, an access token and a refresh token will be returned.
     * @param {UserSourcesApiUserSourceTokenAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    userSourceTokenAuth(requestParameters: UserSourcesApiUserSourceTokenAuthRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSourceForceTokenAuth200Response, any>>;
    /**
     * Blacklists the provided user source token. This can be used the sign the user off.
     * @param {UserSourcesApiUserSourceTokenBlacklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    userSourceTokenBlacklist(requestParameters: UserSourcesApiUserSourceTokenBlacklistRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Generate a new access_token that can be used to continue operating on Baserow with a user source user starting from a valid refresh token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSourcesApi
     */
    userSourceTokenRefresh(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSourceTokenRefresh200Response, any>>;
}
/**
 * WorkspaceInvitationsApi - axios parameter creator
 * @export
 */
export declare const WorkspaceInvitationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accepts a workspace invitation with the given id if the email address of the user matches that of the invitation.
     * @param {number} workspaceInvitationId Accepts the workspace invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptWorkspaceInvitation: (workspaceInvitationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new workspace invitations for an email address if the authorized user has admin rights to the related workspace. An email containing a sign up link will be send to the user.
     * @param {number} workspaceId Creates a workspace invitation to the workspace related to the provided value.
     * @param {CreateWorkspaceInvitation} createWorkspaceInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspaceInvitation: (workspaceId: number, createWorkspaceInvitation: CreateWorkspaceInvitation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a workspace invitation if the authorized user has admin rights to the related workspace.
     * @param {number} workspaceInvitationId Deletes the workspace invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceInvitation: (workspaceInvitationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the requested workspace invitation if the authorized user has admin right to the related workspace
     * @param {number} workspaceInvitationId Returns the workspace invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceInvitation: (workspaceInvitationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with the serialized workspace invitation if an invitation with the provided token is found.
     * @param {string} token Returns the workspace invitation related to the provided token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceInvitationByToken: (token: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the workspace invitations of the workspace related to the provided `workspace_id` parameter if the authorized user has admin rights to that workspace.
     * @param {number} workspaceId Returns only invitations that are in the workspace related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceInvitations: (workspaceId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Rejects a workspace invitation with the given id if the email address of the user matches that of the invitation.
     * @param {number} workspaceInvitationId Rejects the workspace invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectWorkspaceInvitation: (workspaceInvitationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing workspace invitation related to the provided `workspace_invitation_id` param if the authorized user has admin rights to the related workspace.
     * @param {number} workspaceInvitationId Updates the workspace invitation related to the provided value.
     * @param {PatchedUpdateWorkspaceInvitation} [patchedUpdateWorkspaceInvitation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceInvitation: (workspaceInvitationId: number, patchedUpdateWorkspaceInvitation?: PatchedUpdateWorkspaceInvitation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkspaceInvitationsApi - functional programming interface
 * @export
 */
export declare const WorkspaceInvitationsApiFp: (configuration?: Configuration) => {
    /**
     * Accepts a workspace invitation with the given id if the email address of the user matches that of the invitation.
     * @param {number} workspaceInvitationId Accepts the workspace invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptWorkspaceInvitation(workspaceInvitationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUserWorkspace>>;
    /**
     * Creates a new workspace invitations for an email address if the authorized user has admin rights to the related workspace. An email containing a sign up link will be send to the user.
     * @param {number} workspaceId Creates a workspace invitation to the workspace related to the provided value.
     * @param {CreateWorkspaceInvitation} createWorkspaceInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspaceInvitation(workspaceId: number, createWorkspaceInvitation: CreateWorkspaceInvitation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceInvitation>>;
    /**
     * Deletes a workspace invitation if the authorized user has admin rights to the related workspace.
     * @param {number} workspaceInvitationId Deletes the workspace invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceInvitation(workspaceInvitationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the requested workspace invitation if the authorized user has admin right to the related workspace
     * @param {number} workspaceInvitationId Returns the workspace invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceInvitation(workspaceInvitationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceInvitation>>;
    /**
     * Responds with the serialized workspace invitation if an invitation with the provided token is found.
     * @param {string} token Returns the workspace invitation related to the provided token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceInvitationByToken(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWorkspaceInvitation>>;
    /**
     * Lists all the workspace invitations of the workspace related to the provided `workspace_id` parameter if the authorized user has admin rights to that workspace.
     * @param {number} workspaceId Returns only invitations that are in the workspace related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceInvitations(workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkspaceInvitation>>>;
    /**
     * Rejects a workspace invitation with the given id if the email address of the user matches that of the invitation.
     * @param {number} workspaceInvitationId Rejects the workspace invitation related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectWorkspaceInvitation(workspaceInvitationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates the existing workspace invitation related to the provided `workspace_invitation_id` param if the authorized user has admin rights to the related workspace.
     * @param {number} workspaceInvitationId Updates the workspace invitation related to the provided value.
     * @param {PatchedUpdateWorkspaceInvitation} [patchedUpdateWorkspaceInvitation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceInvitation(workspaceInvitationId: number, patchedUpdateWorkspaceInvitation?: PatchedUpdateWorkspaceInvitation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceInvitation>>;
};
/**
 * WorkspaceInvitationsApi - factory interface
 * @export
 */
export declare const WorkspaceInvitationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accepts a workspace invitation with the given id if the email address of the user matches that of the invitation.
     * @param {WorkspaceInvitationsApiAcceptWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiAcceptWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceUserWorkspace>;
    /**
     * Creates a new workspace invitations for an email address if the authorized user has admin rights to the related workspace. An email containing a sign up link will be send to the user.
     * @param {WorkspaceInvitationsApiCreateWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiCreateWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceInvitation>;
    /**
     * Deletes a workspace invitation if the authorized user has admin rights to the related workspace.
     * @param {WorkspaceInvitationsApiDeleteWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiDeleteWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns the requested workspace invitation if the authorized user has admin right to the related workspace
     * @param {WorkspaceInvitationsApiGetWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiGetWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceInvitation>;
    /**
     * Responds with the serialized workspace invitation if an invitation with the provided token is found.
     * @param {WorkspaceInvitationsApiGetWorkspaceInvitationByTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceInvitationByToken(requestParameters: WorkspaceInvitationsApiGetWorkspaceInvitationByTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserWorkspaceInvitation>;
    /**
     * Lists all the workspace invitations of the workspace related to the provided `workspace_id` parameter if the authorized user has admin rights to that workspace.
     * @param {WorkspaceInvitationsApiListWorkspaceInvitationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceInvitations(requestParameters: WorkspaceInvitationsApiListWorkspaceInvitationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkspaceInvitation>>;
    /**
     * Rejects a workspace invitation with the given id if the email address of the user matches that of the invitation.
     * @param {WorkspaceInvitationsApiRejectWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiRejectWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates the existing workspace invitation related to the provided `workspace_invitation_id` param if the authorized user has admin rights to the related workspace.
     * @param {WorkspaceInvitationsApiUpdateWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiUpdateWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceInvitation>;
};
/**
 * Request parameters for acceptWorkspaceInvitation operation in WorkspaceInvitationsApi.
 * @export
 * @interface WorkspaceInvitationsApiAcceptWorkspaceInvitationRequest
 */
export interface WorkspaceInvitationsApiAcceptWorkspaceInvitationRequest {
    /**
     * Accepts the workspace invitation related to the provided value.
     * @type {number}
     * @memberof WorkspaceInvitationsApiAcceptWorkspaceInvitation
     */
    readonly workspaceInvitationId: number;
}
/**
 * Request parameters for createWorkspaceInvitation operation in WorkspaceInvitationsApi.
 * @export
 * @interface WorkspaceInvitationsApiCreateWorkspaceInvitationRequest
 */
export interface WorkspaceInvitationsApiCreateWorkspaceInvitationRequest {
    /**
     * Creates a workspace invitation to the workspace related to the provided value.
     * @type {number}
     * @memberof WorkspaceInvitationsApiCreateWorkspaceInvitation
     */
    readonly workspaceId: number;
    /**
     *
     * @type {CreateWorkspaceInvitation}
     * @memberof WorkspaceInvitationsApiCreateWorkspaceInvitation
     */
    readonly createWorkspaceInvitation: CreateWorkspaceInvitation;
}
/**
 * Request parameters for deleteWorkspaceInvitation operation in WorkspaceInvitationsApi.
 * @export
 * @interface WorkspaceInvitationsApiDeleteWorkspaceInvitationRequest
 */
export interface WorkspaceInvitationsApiDeleteWorkspaceInvitationRequest {
    /**
     * Deletes the workspace invitation related to the provided value.
     * @type {number}
     * @memberof WorkspaceInvitationsApiDeleteWorkspaceInvitation
     */
    readonly workspaceInvitationId: number;
}
/**
 * Request parameters for getWorkspaceInvitation operation in WorkspaceInvitationsApi.
 * @export
 * @interface WorkspaceInvitationsApiGetWorkspaceInvitationRequest
 */
export interface WorkspaceInvitationsApiGetWorkspaceInvitationRequest {
    /**
     * Returns the workspace invitation related to the provided value.
     * @type {number}
     * @memberof WorkspaceInvitationsApiGetWorkspaceInvitation
     */
    readonly workspaceInvitationId: number;
}
/**
 * Request parameters for getWorkspaceInvitationByToken operation in WorkspaceInvitationsApi.
 * @export
 * @interface WorkspaceInvitationsApiGetWorkspaceInvitationByTokenRequest
 */
export interface WorkspaceInvitationsApiGetWorkspaceInvitationByTokenRequest {
    /**
     * Returns the workspace invitation related to the provided token.
     * @type {string}
     * @memberof WorkspaceInvitationsApiGetWorkspaceInvitationByToken
     */
    readonly token: string;
}
/**
 * Request parameters for listWorkspaceInvitations operation in WorkspaceInvitationsApi.
 * @export
 * @interface WorkspaceInvitationsApiListWorkspaceInvitationsRequest
 */
export interface WorkspaceInvitationsApiListWorkspaceInvitationsRequest {
    /**
     * Returns only invitations that are in the workspace related to the provided value.
     * @type {number}
     * @memberof WorkspaceInvitationsApiListWorkspaceInvitations
     */
    readonly workspaceId: number;
}
/**
 * Request parameters for rejectWorkspaceInvitation operation in WorkspaceInvitationsApi.
 * @export
 * @interface WorkspaceInvitationsApiRejectWorkspaceInvitationRequest
 */
export interface WorkspaceInvitationsApiRejectWorkspaceInvitationRequest {
    /**
     * Rejects the workspace invitation related to the provided value.
     * @type {number}
     * @memberof WorkspaceInvitationsApiRejectWorkspaceInvitation
     */
    readonly workspaceInvitationId: number;
}
/**
 * Request parameters for updateWorkspaceInvitation operation in WorkspaceInvitationsApi.
 * @export
 * @interface WorkspaceInvitationsApiUpdateWorkspaceInvitationRequest
 */
export interface WorkspaceInvitationsApiUpdateWorkspaceInvitationRequest {
    /**
     * Updates the workspace invitation related to the provided value.
     * @type {number}
     * @memberof WorkspaceInvitationsApiUpdateWorkspaceInvitation
     */
    readonly workspaceInvitationId: number;
    /**
     *
     * @type {PatchedUpdateWorkspaceInvitation}
     * @memberof WorkspaceInvitationsApiUpdateWorkspaceInvitation
     */
    readonly patchedUpdateWorkspaceInvitation?: PatchedUpdateWorkspaceInvitation;
}
/**
 * WorkspaceInvitationsApi - object-oriented interface
 * @export
 * @class WorkspaceInvitationsApi
 * @extends {BaseAPI}
 */
export declare class WorkspaceInvitationsApi extends BaseAPI {
    /**
     * Accepts a workspace invitation with the given id if the email address of the user matches that of the invitation.
     * @param {WorkspaceInvitationsApiAcceptWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceInvitationsApi
     */
    acceptWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiAcceptWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceUserWorkspace, any>>;
    /**
     * Creates a new workspace invitations for an email address if the authorized user has admin rights to the related workspace. An email containing a sign up link will be send to the user.
     * @param {WorkspaceInvitationsApiCreateWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceInvitationsApi
     */
    createWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiCreateWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceInvitation, any>>;
    /**
     * Deletes a workspace invitation if the authorized user has admin rights to the related workspace.
     * @param {WorkspaceInvitationsApiDeleteWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceInvitationsApi
     */
    deleteWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiDeleteWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the requested workspace invitation if the authorized user has admin right to the related workspace
     * @param {WorkspaceInvitationsApiGetWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceInvitationsApi
     */
    getWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiGetWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceInvitation, any>>;
    /**
     * Responds with the serialized workspace invitation if an invitation with the provided token is found.
     * @param {WorkspaceInvitationsApiGetWorkspaceInvitationByTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceInvitationsApi
     */
    getWorkspaceInvitationByToken(requestParameters: WorkspaceInvitationsApiGetWorkspaceInvitationByTokenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserWorkspaceInvitation, any>>;
    /**
     * Lists all the workspace invitations of the workspace related to the provided `workspace_id` parameter if the authorized user has admin rights to that workspace.
     * @param {WorkspaceInvitationsApiListWorkspaceInvitationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceInvitationsApi
     */
    listWorkspaceInvitations(requestParameters: WorkspaceInvitationsApiListWorkspaceInvitationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceInvitation[], any>>;
    /**
     * Rejects a workspace invitation with the given id if the email address of the user matches that of the invitation.
     * @param {WorkspaceInvitationsApiRejectWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceInvitationsApi
     */
    rejectWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiRejectWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates the existing workspace invitation related to the provided `workspace_invitation_id` param if the authorized user has admin rights to the related workspace.
     * @param {WorkspaceInvitationsApiUpdateWorkspaceInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceInvitationsApi
     */
    updateWorkspaceInvitation(requestParameters: WorkspaceInvitationsApiUpdateWorkspaceInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceInvitation, any>>;
}
/**
 * WorkspacesApi - axios parameter creator
 * @export
 */
export declare const WorkspacesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates an initial workspace. This is typically called after the user signs up and skips the onboarding in the frontend. It contains some example data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInitialWorkspace: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new workspace where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.
     * @param {Workspace} workspace
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace: (workspace: Workspace, clientSessionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an existing workspace if the authorized user belongs to the workspace. All the applications, databases, tables etc that were in the workspace are going to be deleted also.
     * @param {number} workspaceId Deletes the workspace related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace: (workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a workspace user if the authorized user has admin rights to the related workspace.
     * @param {number} workspaceUserId Deletes the workspace user related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceUser: (workspaceUserId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the generative AI models settings for the given workspace.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceGenerativeAiModelsSettings: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Makes the authenticated user leave the workspace related to the provided `workspace_id` if the user is in that workspace. If the user is the last admin in the workspace, they will not be able to leave it. There must always be one admin in the workspace, otherwise it will be left without control. If that is the case, they must either delete the workspace or give another member admin permissions first.
     * @param {number} workspaceId Leaves the workspace related to the value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveWorkspace: (workspaceId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the users that are in a workspace if the authorized user has admin permissions to the related workspace. To add a user to a workspace an invitation must be sent first.
     * @param {number} workspaceId Lists workspace users related to the provided workspace value.
     * @param {string} [search] Search for workspace users by username, or email.
     * @param {string} [sorts] Sort workspace users by name, email or role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceUsers: (workspaceId: number, search?: string, sorts?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the workspaces of the authorized user. A workspace can contain multiple applications like a database. Multiple users can have access to a workspace. For example each company could have their own workspace containing databases related to that company. The order of the workspaces are custom for each user. The order is configurable via the **order_workspaces** endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Changes the order of the provided workspace ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order will be custom for each user.
     * @param {OrderWorkspaces} orderWorkspaces
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderWorkspaces: (orderWorkspaces: OrderWorkspaces, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing workspace related to the provided `workspace_id` parameter if the authorized user belongs to the workspace. It is not yet possible to add additional users to a workspace.
     * @param {number} workspaceId Updates the workspace related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedWorkspace} [patchedWorkspace]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspace: (workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedWorkspace?: PatchedWorkspace, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the generative AI models settings for the given workspace.
     * @param {number} workspaceId Updates the workspace settings for the generative AI models available.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedGenerativeAISettings} [patchedGenerativeAISettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceGenerativeAiModelsSettings: (workspaceId: number, clientSessionId?: string, patchedGenerativeAISettings?: PatchedGenerativeAISettings, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the existing workspace user related to the provided `workspace_user_id` param if the authorized user has admin rights to the related workspace.
     * @param {number} workspaceUserId Updates the workspace user related to the provided value.
     * @param {PatchedUpdateWorkspaceUser} [patchedUpdateWorkspaceUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceUser: (workspaceUserId: number, patchedUpdateWorkspaceUser?: PatchedUpdateWorkspaceUser, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a the permission data necessary to determine the permissions of a specific user over a specific workspace.  See `core.handler.CoreHandler.get_permissions()` for more details.
     * @param {number} workspaceId The workspace id we want the permission object for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacePermissions: (workspaceId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkspacesApi - functional programming interface
 * @export
 */
export declare const WorkspacesApiFp: (configuration?: Configuration) => {
    /**
     * Creates an initial workspace. This is typically called after the user signs up and skips the onboarding in the frontend. It contains some example data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInitialWorkspace(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUserWorkspace>>;
    /**
     * Creates a new workspace where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.
     * @param {Workspace} workspace
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(workspace: Workspace, clientSessionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUserWorkspace>>;
    /**
     * Deletes an existing workspace if the authorized user belongs to the workspace. All the applications, databases, tables etc that were in the workspace are going to be deleted also.
     * @param {number} workspaceId Deletes the workspace related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes a workspace user if the authorized user has admin rights to the related workspace.
     * @param {number} workspaceUserId Deletes the workspace user related to the provided value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceUser(workspaceUserId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the generative AI models settings for the given workspace.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceGenerativeAiModelsSettings(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerativeAISettings>>;
    /**
     * Makes the authenticated user leave the workspace related to the provided `workspace_id` if the user is in that workspace. If the user is the last admin in the workspace, they will not be able to leave it. There must always be one admin in the workspace, otherwise it will be left without control. If that is the case, they must either delete the workspace or give another member admin permissions first.
     * @param {number} workspaceId Leaves the workspace related to the value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveWorkspace(workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Lists all the users that are in a workspace if the authorized user has admin permissions to the related workspace. To add a user to a workspace an invitation must be sent first.
     * @param {number} workspaceId Lists workspace users related to the provided workspace value.
     * @param {string} [search] Search for workspace users by username, or email.
     * @param {string} [sorts] Sort workspace users by name, email or role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceUsers(workspaceId: number, search?: string, sorts?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListWorkspaceUsersWithMemberData>>>;
    /**
     * Lists all the workspaces of the authorized user. A workspace can contain multiple applications like a database. Multiple users can have access to a workspace. For example each company could have their own workspace containing databases related to that company. The order of the workspaces are custom for each user. The order is configurable via the **order_workspaces** endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkspaceUserWorkspace>>>;
    /**
     * Changes the order of the provided workspace ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order will be custom for each user.
     * @param {OrderWorkspaces} orderWorkspaces
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderWorkspaces(orderWorkspaces: OrderWorkspaces, clientSessionId?: string, clientUndoRedoActionGroupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates the existing workspace related to the provided `workspace_id` parameter if the authorized user belongs to the workspace. It is not yet possible to add additional users to a workspace.
     * @param {number} workspaceId Updates the workspace related to the provided value.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {string} [clientUndoRedoActionGroupId] An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @param {PatchedWorkspace} [patchedWorkspace]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspace(workspaceId: number, clientSessionId?: string, clientUndoRedoActionGroupId?: string, patchedWorkspace?: PatchedWorkspace, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>>;
    /**
     * Updates the generative AI models settings for the given workspace.
     * @param {number} workspaceId Updates the workspace settings for the generative AI models available.
     * @param {string} [clientSessionId] An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @param {PatchedGenerativeAISettings} [patchedGenerativeAISettings]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceGenerativeAiModelsSettings(workspaceId: number, clientSessionId?: string, patchedGenerativeAISettings?: PatchedGenerativeAISettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>>;
    /**
     * Updates the existing workspace user related to the provided `workspace_user_id` param if the authorized user has admin rights to the related workspace.
     * @param {number} workspaceUserId Updates the workspace user related to the provided value.
     * @param {PatchedUpdateWorkspaceUser} [patchedUpdateWorkspaceUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceUser(workspaceUserId: number, patchedUpdateWorkspaceUser?: PatchedUpdateWorkspaceUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUser>>;
    /**
     * Returns a the permission data necessary to determine the permissions of a specific user over a specific workspace.  See `core.handler.CoreHandler.get_permissions()` for more details.
     * @param {number} workspaceId The workspace id we want the permission object for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacePermissions(workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionObject>>>;
};
/**
 * WorkspacesApi - factory interface
 * @export
 */
export declare const WorkspacesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates an initial workspace. This is typically called after the user signs up and skips the onboarding in the frontend. It contains some example data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInitialWorkspace(options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceUserWorkspace>;
    /**
     * Creates a new workspace where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.
     * @param {WorkspacesApiCreateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(requestParameters: WorkspacesApiCreateWorkspaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceUserWorkspace>;
    /**
     * Deletes an existing workspace if the authorized user belongs to the workspace. All the applications, databases, tables etc that were in the workspace are going to be deleted also.
     * @param {WorkspacesApiDeleteWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(requestParameters: WorkspacesApiDeleteWorkspaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes a workspace user if the authorized user has admin rights to the related workspace.
     * @param {WorkspacesApiDeleteWorkspaceUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceUser(requestParameters: WorkspacesApiDeleteWorkspaceUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns the generative AI models settings for the given workspace.
     * @param {WorkspacesApiGetWorkspaceGenerativeAiModelsSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceGenerativeAiModelsSettings(requestParameters: WorkspacesApiGetWorkspaceGenerativeAiModelsSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerativeAISettings>;
    /**
     * Makes the authenticated user leave the workspace related to the provided `workspace_id` if the user is in that workspace. If the user is the last admin in the workspace, they will not be able to leave it. There must always be one admin in the workspace, otherwise it will be left without control. If that is the case, they must either delete the workspace or give another member admin permissions first.
     * @param {WorkspacesApiLeaveWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveWorkspace(requestParameters: WorkspacesApiLeaveWorkspaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Lists all the users that are in a workspace if the authorized user has admin permissions to the related workspace. To add a user to a workspace an invitation must be sent first.
     * @param {WorkspacesApiListWorkspaceUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceUsers(requestParameters: WorkspacesApiListWorkspaceUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ListWorkspaceUsersWithMemberData>>;
    /**
     * Lists all the workspaces of the authorized user. A workspace can contain multiple applications like a database. Multiple users can have access to a workspace. For example each company could have their own workspace containing databases related to that company. The order of the workspaces are custom for each user. The order is configurable via the **order_workspaces** endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkspaceUserWorkspace>>;
    /**
     * Changes the order of the provided workspace ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order will be custom for each user.
     * @param {WorkspacesApiOrderWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderWorkspaces(requestParameters: WorkspacesApiOrderWorkspacesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates the existing workspace related to the provided `workspace_id` parameter if the authorized user belongs to the workspace. It is not yet possible to add additional users to a workspace.
     * @param {WorkspacesApiUpdateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspace(requestParameters: WorkspacesApiUpdateWorkspaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Workspace>;
    /**
     * Updates the generative AI models settings for the given workspace.
     * @param {WorkspacesApiUpdateWorkspaceGenerativeAiModelsSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceGenerativeAiModelsSettings(requestParameters: WorkspacesApiUpdateWorkspaceGenerativeAiModelsSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Workspace>;
    /**
     * Updates the existing workspace user related to the provided `workspace_user_id` param if the authorized user has admin rights to the related workspace.
     * @param {WorkspacesApiUpdateWorkspaceUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceUser(requestParameters: WorkspacesApiUpdateWorkspaceUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceUser>;
    /**
     * Returns a the permission data necessary to determine the permissions of a specific user over a specific workspace.  See `core.handler.CoreHandler.get_permissions()` for more details.
     * @param {WorkspacesApiWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacePermissions(requestParameters: WorkspacesApiWorkspacePermissionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PermissionObject>>;
};
/**
 * Request parameters for createWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiCreateWorkspaceRequest
 */
export interface WorkspacesApiCreateWorkspaceRequest {
    /**
     *
     * @type {Workspace}
     * @memberof WorkspacesApiCreateWorkspace
     */
    readonly workspace: Workspace;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof WorkspacesApiCreateWorkspace
     */
    readonly clientSessionId?: string;
}
/**
 * Request parameters for deleteWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiDeleteWorkspaceRequest
 */
export interface WorkspacesApiDeleteWorkspaceRequest {
    /**
     * Deletes the workspace related to the provided value.
     * @type {number}
     * @memberof WorkspacesApiDeleteWorkspace
     */
    readonly workspaceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof WorkspacesApiDeleteWorkspace
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof WorkspacesApiDeleteWorkspace
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for deleteWorkspaceUser operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiDeleteWorkspaceUserRequest
 */
export interface WorkspacesApiDeleteWorkspaceUserRequest {
    /**
     * Deletes the workspace user related to the provided value.
     * @type {number}
     * @memberof WorkspacesApiDeleteWorkspaceUser
     */
    readonly workspaceUserId: number;
}
/**
 * Request parameters for getWorkspaceGenerativeAiModelsSettings operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiGetWorkspaceGenerativeAiModelsSettingsRequest
 */
export interface WorkspacesApiGetWorkspaceGenerativeAiModelsSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesApiGetWorkspaceGenerativeAiModelsSettings
     */
    readonly workspaceId: string;
}
/**
 * Request parameters for leaveWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiLeaveWorkspaceRequest
 */
export interface WorkspacesApiLeaveWorkspaceRequest {
    /**
     * Leaves the workspace related to the value.
     * @type {number}
     * @memberof WorkspacesApiLeaveWorkspace
     */
    readonly workspaceId: number;
}
/**
 * Request parameters for listWorkspaceUsers operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiListWorkspaceUsersRequest
 */
export interface WorkspacesApiListWorkspaceUsersRequest {
    /**
     * Lists workspace users related to the provided workspace value.
     * @type {number}
     * @memberof WorkspacesApiListWorkspaceUsers
     */
    readonly workspaceId: number;
    /**
     * Search for workspace users by username, or email.
     * @type {string}
     * @memberof WorkspacesApiListWorkspaceUsers
     */
    readonly search?: string;
    /**
     * Sort workspace users by name, email or role.
     * @type {string}
     * @memberof WorkspacesApiListWorkspaceUsers
     */
    readonly sorts?: string;
}
/**
 * Request parameters for orderWorkspaces operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiOrderWorkspacesRequest
 */
export interface WorkspacesApiOrderWorkspacesRequest {
    /**
     *
     * @type {OrderWorkspaces}
     * @memberof WorkspacesApiOrderWorkspaces
     */
    readonly orderWorkspaces: OrderWorkspaces;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof WorkspacesApiOrderWorkspaces
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof WorkspacesApiOrderWorkspaces
     */
    readonly clientUndoRedoActionGroupId?: string;
}
/**
 * Request parameters for updateWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiUpdateWorkspaceRequest
 */
export interface WorkspacesApiUpdateWorkspaceRequest {
    /**
     * Updates the workspace related to the provided value.
     * @type {number}
     * @memberof WorkspacesApiUpdateWorkspace
     */
    readonly workspaceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof WorkspacesApiUpdateWorkspace
     */
    readonly clientSessionId?: string;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call.
     * @type {string}
     * @memberof WorkspacesApiUpdateWorkspace
     */
    readonly clientUndoRedoActionGroupId?: string;
    /**
     *
     * @type {PatchedWorkspace}
     * @memberof WorkspacesApiUpdateWorkspace
     */
    readonly patchedWorkspace?: PatchedWorkspace;
}
/**
 * Request parameters for updateWorkspaceGenerativeAiModelsSettings operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiUpdateWorkspaceGenerativeAiModelsSettingsRequest
 */
export interface WorkspacesApiUpdateWorkspaceGenerativeAiModelsSettingsRequest {
    /**
     * Updates the workspace settings for the generative AI models available.
     * @type {number}
     * @memberof WorkspacesApiUpdateWorkspaceGenerativeAiModelsSettings
     */
    readonly workspaceId: number;
    /**
     * An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.
     * @type {string}
     * @memberof WorkspacesApiUpdateWorkspaceGenerativeAiModelsSettings
     */
    readonly clientSessionId?: string;
    /**
     *
     * @type {PatchedGenerativeAISettings}
     * @memberof WorkspacesApiUpdateWorkspaceGenerativeAiModelsSettings
     */
    readonly patchedGenerativeAISettings?: PatchedGenerativeAISettings;
}
/**
 * Request parameters for updateWorkspaceUser operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiUpdateWorkspaceUserRequest
 */
export interface WorkspacesApiUpdateWorkspaceUserRequest {
    /**
     * Updates the workspace user related to the provided value.
     * @type {number}
     * @memberof WorkspacesApiUpdateWorkspaceUser
     */
    readonly workspaceUserId: number;
    /**
     *
     * @type {PatchedUpdateWorkspaceUser}
     * @memberof WorkspacesApiUpdateWorkspaceUser
     */
    readonly patchedUpdateWorkspaceUser?: PatchedUpdateWorkspaceUser;
}
/**
 * Request parameters for workspacePermissions operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiWorkspacePermissionsRequest
 */
export interface WorkspacesApiWorkspacePermissionsRequest {
    /**
     * The workspace id we want the permission object for.
     * @type {number}
     * @memberof WorkspacesApiWorkspacePermissions
     */
    readonly workspaceId: number;
}
/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
export declare class WorkspacesApi extends BaseAPI {
    /**
     * Creates an initial workspace. This is typically called after the user signs up and skips the onboarding in the frontend. It contains some example data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    createInitialWorkspace(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceUserWorkspace, any>>;
    /**
     * Creates a new workspace where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.
     * @param {WorkspacesApiCreateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    createWorkspace(requestParameters: WorkspacesApiCreateWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceUserWorkspace, any>>;
    /**
     * Deletes an existing workspace if the authorized user belongs to the workspace. All the applications, databases, tables etc that were in the workspace are going to be deleted also.
     * @param {WorkspacesApiDeleteWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    deleteWorkspace(requestParameters: WorkspacesApiDeleteWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes a workspace user if the authorized user has admin rights to the related workspace.
     * @param {WorkspacesApiDeleteWorkspaceUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    deleteWorkspaceUser(requestParameters: WorkspacesApiDeleteWorkspaceUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the generative AI models settings for the given workspace.
     * @param {WorkspacesApiGetWorkspaceGenerativeAiModelsSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    getWorkspaceGenerativeAiModelsSettings(requestParameters: WorkspacesApiGetWorkspaceGenerativeAiModelsSettingsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GenerativeAISettings, any>>;
    /**
     * Makes the authenticated user leave the workspace related to the provided `workspace_id` if the user is in that workspace. If the user is the last admin in the workspace, they will not be able to leave it. There must always be one admin in the workspace, otherwise it will be left without control. If that is the case, they must either delete the workspace or give another member admin permissions first.
     * @param {WorkspacesApiLeaveWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    leaveWorkspace(requestParameters: WorkspacesApiLeaveWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Lists all the users that are in a workspace if the authorized user has admin permissions to the related workspace. To add a user to a workspace an invitation must be sent first.
     * @param {WorkspacesApiListWorkspaceUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    listWorkspaceUsers(requestParameters: WorkspacesApiListWorkspaceUsersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceUsersWithMemberData[], any>>;
    /**
     * Lists all the workspaces of the authorized user. A workspace can contain multiple applications like a database. Multiple users can have access to a workspace. For example each company could have their own workspace containing databases related to that company. The order of the workspaces are custom for each user. The order is configurable via the **order_workspaces** endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    listWorkspaces(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceUserWorkspace[], any>>;
    /**
     * Changes the order of the provided workspace ids to the matching position that the id has in the list. If the authorized user does not belong to the workspace it will be ignored. The order will be custom for each user.
     * @param {WorkspacesApiOrderWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    orderWorkspaces(requestParameters: WorkspacesApiOrderWorkspacesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates the existing workspace related to the provided `workspace_id` parameter if the authorized user belongs to the workspace. It is not yet possible to add additional users to a workspace.
     * @param {WorkspacesApiUpdateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    updateWorkspace(requestParameters: WorkspacesApiUpdateWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Workspace, any>>;
    /**
     * Updates the generative AI models settings for the given workspace.
     * @param {WorkspacesApiUpdateWorkspaceGenerativeAiModelsSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    updateWorkspaceGenerativeAiModelsSettings(requestParameters: WorkspacesApiUpdateWorkspaceGenerativeAiModelsSettingsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Workspace, any>>;
    /**
     * Updates the existing workspace user related to the provided `workspace_user_id` param if the authorized user has admin rights to the related workspace.
     * @param {WorkspacesApiUpdateWorkspaceUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    updateWorkspaceUser(requestParameters: WorkspacesApiUpdateWorkspaceUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceUser, any>>;
    /**
     * Returns a the permission data necessary to determine the permissions of a specific user over a specific workspace.  See `core.handler.CoreHandler.get_permissions()` for more details.
     * @param {WorkspacesApiWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    workspacePermissions(requestParameters: WorkspacesApiWorkspacePermissionsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PermissionObject[], any>>;
}
